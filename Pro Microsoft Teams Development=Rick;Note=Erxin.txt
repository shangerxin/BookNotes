Pro Microsoft Teams Development=Rick;Note=Erxin

# Reference
https://learning.oreilly.com/library/view/pro-microsoft-teams/9781484263648/


# Teams Developer Portal 
- https://dev.teams.microsoft.com/home
- ms document 
https://docs.microsoft.com/en-us/microsoftteams/platform/


# Before you can start
- A basic Microsoft Teams application only consists of two parts. One is a place where your code can run and execute; the other is the Teams app package.

- A Teams app package

a zip file that contains three files

two image files that Teams needs to visualize your app and a manifest file.

- Manifest format 

version 1.7 (https://developer.microsoft.com/en-us/json-schemas/teams/v1.7/MicrosoftTeams.schema.json), and a developer preview version is also available (https://raw.githubusercontent.com/OfficeDev/microsoft-teams-app-schema/preview/DevPreview/MicrosoftTeams.schema.json)

- joining the Microsoft 365 developer program (https://developer.microsoft.com/en-us/office/dev-program).

- go to https://portal.azure.com and create a free subscription and create bot entry 

- install App Studio from Microsoft into Teams. App Studio is a free Teams app that is for starters, an excellent example of the things you can create with Teams development

- activate the sideloading of apps in your new developer environment. 

- Now activate the Upload custom apps setting (Figure 1-5). Or if you create an app that’s needed for the entire company

- additional tools 

    + ngrok is tunneling software You can download the executable here: https://ngrok.com/. I recommend that you also sign up for the service.
    
    + linking hard drive to teams 
    
    ngrok process by pressing CTRL + C. Now enter the following command: ngrok http "file:///C:\windows
    
    + Bot Framework emulator at https://github.com/microsoft/BotFramework-Emulator/releases.
    
    + windows terminal 

- start development 

    + nodejs 
    
    + nvm, install NVM (https://github.com/nvm-sh/nvm; or NVM for Windows, https://github.com/coreybutler/nvm-windows). NVM stands for node version manager
    
    + Yeoman generator for Teams
    
- Another method of starting a new project with Node.js is using the Microsoft Teams Toolkit (https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension). 

- teams Toolkit for Visual Studio for this (https://docs.microsoft.com/en-us/microsoftteams/platform/toolkit/visual-studio-code-overview)



# Teams client javascript sdk 
- iFrame within Teams that shows a web page. Because of this, users visiting this tab can not only see the application but that application can also have some interaction with Teams

-  JavaScript Client SDK is publicly available on GitHub (https://github.com/OfficeDev/microsoft-teams-library-js)

-  a .NET Core empty template. You can do the same or you can start from the basic solution provided in the samples

- javascript sdk, NPM (www.npmjs.com/package/@microsoft/teams-js); there is also the URL you need. Just add it below the other script tags inside of the layouts pag

    + Initializing the SDK must be done with the following command:
microsoftTeams.initialize();

    +  script tag with the following logic to our index page:
<script type="text/javascript">
    microsoftTeams.initialize();
    microsoftTeams.getContext(function (context) {
        var theme = context.theme;
        var color;
        switch(theme) {
            case "dark":
                color = "#F3F2F1";
            break;
            case "contrast":
                color = "#ffff01";
            break;
        default:
                color = "#252423";
        }
        var h1Elements = document.getElementsByTagName("h1");
        for(var i = 0; i < h1Elements.length; i++) {
            h1Elements[i].style.color = color;
        }
    });
</script>

microsoftTeams.registerOnThemeChangeHandler(function(theme) {
        var color = "#252423";
        if (theme === "default") {
            color = "#252423";
        } else if (theme === "dark") {
            color = "#F3F2F1";
        } else if (theme === "contrast") {
            color = "#ffff01";
        }
        var h1Elements = document.getElementsByTagName("h1");
        for(var i = 0; i < h1Elements.length; i++) {
            h1Elements[i].style.color = color;
        }
    });

- These are the following (taken from the documentation from MS, https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/access-teams-context)

-  UX components announced by Microsoft at Build 2020. More information can be found at https://developer.microsoft.com/en-us/fluentui#/, and it’s a nice way to style your application in the same styles

updateTheme = (themeStr) =>{
    switch (themeStr) {
        case "dark":
            var theme = themes.teamsDark;
            break;
        case "contrast":
            var theme = themes.teamsHighContrast;
            break;
        case "default":
        default:
            var theme = themes.teams;
    }
    this.setState({ theme:theme });
}

- setting your headers as the following:
Content-Security-Policy: frame-ancestors teams.microsoft.com *.teams.microsoft.com *.skype.com
X-Frame-Options: ALLOW-FROM https://teams.microsoft.com/
And for Internet Explorer 11 compatibility, you need to set X-Content-Security-Policy

- configure tab 

adding a configurableTabs section.
  "configurableTabs": [
    {
      "configurationUrl": "https://proteamsdev.ngrok.io/news/configure",
      "canUpdateConfiguration": true,
      "scopes": [ "team", "groupchat" ]
    }
  ],

- pop up authentication 

    microsoftTeams.authentication.authenticate({
      url: "/Auth",
      width: 600,
      height: 535,
      successCallback: this.getUserProfile,
      failureCallback: function (reason) {
        console.log("Login failed: " + reason);
      }
    });

   function getUserProfile(accessToken) {
        $.ajax({
            url: "https://graph.microsoft.com/v1.0/me/",
            beforeSend: function (request) {
                request.setRequestHeader("Authorization", "Bearer " + accessToken);
            },
            success: function (profile) {
                $("#officeLocation").text(profile.officeLocation);
            },
            error: function (xhr, textStatus, errorThrown) {
                console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
            },
        });
    }

- integrating teams and sharepoint 

"configurableTabs": [
    {
      "configurationUrl": "https://proteamsdev.ngrok.io/news/configure",
      "canUpdateConfiguration": true,
      "scopes": [ "team", "groupchat" ],
      "supportedSharePointHosts": [
        "sharePointFullPage",
        "sharePointWebPart"
      ]
    }
  ],    

- SharePoint admin page (https://<yourTenantName-admin.sharepoint.com/_layouts/15/online/AdminHome.aspx#/classicFeatures)


# Bots 
- Communication between the Bot Framework and your bot (source: Microsoft Documentation, https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-basics?view=azure-bot-service-4.0&tabs=csharp)

- natural language processing bot 

different regions. More info can be found here: https://westus.dev.cognitive.microsoft.com/docs/services

- https://westus.dev.cognitive.microsoft.com/docs/services/5a93fcf85b4ccd136866eb37/operations/5ac266295b4ccd1554da75ff. The documentation is quite extensive

-  recommend you start with the AI school from Microsoft to get started: https://aischool.microsoft.com/en-us/conversational/learning-paths/getting-started-with-azure-bot-framework

- Microsoft Documentation: https://docs.microsoft.com/en-us/microsoftteams/platform/bots/calls-and-meetings/registering-calling-bot

- Azure Cognitive speech-to-text service (https://azure.microsoft.com/en-us/services/cognitive-services/text-to-speech/)


# Webhook 
- observer pattern (https://en.wikipedia.org/wiki/Observer_pattern) we use in the software design

- Mine looks like this:

https://outlook.office.com/webhook/9a792aa1-489d-4485-b4c1-d6e9662bc854@c1df480e-6f75-4ba5-97a6-efcca25423ee/IncomingWebhook/4ca18db10781479c8d786191f2069274/ee61283f-5214-4ddc-8f0d-596740fc439f

- posting information 

The information that we need to send to this endpoint is always going to be in JSON format. We need to create an HTTP Post message and send this over. The easiest way to do this is with Postman (www.postman.com/)

- add teams card 

find more information here: https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-connector-add-rich-cards?view=azure-bot-service-4.0#types-of-rich-cards.

- There is a designer available for you at https://amdesigner.azurewebsites.net/.

- there is an old designer, which we can still use (https://messagecardplayground.azurewebsites.net/). This designer helps us to construct the JSON in a visual way

- find an example on how to do this here: https://github.com/OfficeDev/outlook-actionable-messages-node-token-validation

- out going web hook

triggering the event is what we need for our API to get called. That’s why with incoming and outgoing webhooks, we can build a bot-like solution.
    
    + c# 
OutgoingWebhook and add the following method:
[HttpPost]
public Activity AnswerBack()
{
    using (StreamReader reader = new StreamReader(Request.Body, Encoding.UTF8))
    {
        var userResponse = reader.ReadToEndAsync().Result;
        var newReaction = $"You send" + userResponse;
        var replyActivity = MessageFactory.Text(newReaction);
        return replyActivity;
    }
}
                                                                                       
    + node 

module.exports = async function (context, req) {
    context.log('JavaScript HTTP trigger function processed a request.');
    var receivedMsg = req.body.text;
    var responseMessage = '{ "type": "message", "text": "You typed: ' + receivedMsg + '" }';
    context.res = {
        // status: 200, /* Defaults to 200 */
        body: responseMessage
    };
}

-  HMAC tokens can be found here: https://en.wikipedia.org/wiki/HMAC.

- Image from the Microsoft documentation: https://docs.microsoft.com/en-us/microsoftteams/platform/messaging-extensions/what-are-messaging-extensions


# Develop against teams 
- Microsoft Graph, I always go to https://aka.ms/ge. This takes you instantly to the Graph Explorer where you can sign in and see examples

- To get our access token , we need to make a request to https://login.microsoftonline.com as you can remember from Chapter 6; to use the V2 endpoint

-  Microsoft (https://github.com/microsoft/vscode-tips-and-tricks). The first thing we always must do is to connect

- especially for Teams (https://docs.microsoft.com/en-us/powershell/sharepoint/sharepoint-pnp/sharepoint-pnp-cmdlets?view=sharepoint-ps)

- Microsoft Teams Toolkit for Visual Studio (https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.vsteamstemplate ).