AngularJS=K.Scott Allen;Note=Erxin


# introduction
- start from google 
www.angularjs.org

builtwith.angularjs.org 

plunker.com
plunker, is a online read web editor 

- two requirement
    + add a <script> tag pointing to angular.js 
    + add an ng-app attribute in your html 
        * ng-app is a an angular directive 
        * the ng is short for angular
        
- go to the plnk.co and launch the editor 
<!DOCTYPE html>
<html>
    <head>
        <script data-require="angular.js@*" data-semver="1.3.0-beta.5" src="https://code.angularjs.org/1.3.0-beta.5/angular.js"/>
        <link ref="stylesheet" href="style.css"/>
        <script src="script.js"></script>
    </head>
    <!-- the ng-app is the markup for angular to define the code region it also could be add to other tags -->
    <body ng-app>
    {{843/42}} <!--this a direct eval for angular binding expression-->
    </body>
</html>

plunker support save or share 
plunker could download the current code package 
the preview could be used to debug the code 
support directly add js package 

- chrome or firefox developer tool to debug and check the js code 
    + keep open the console window will include all the current edit js information 
    clear the console to refresh the current edit status 
    + check the right corner about the error and warning statistic information 
    + go to the source tab of developer tool 
    ctrl+o to search file name, open a script file and click the line number to add a break point, on the right corner could resume the script execution 
    
- javascript pattern 
    + functions as abstractions 
    var work = function(){
        console.log("working hard!");
    };
    
    work(); //will execute the function 
    
    var dowork = function(f){
        console.log("starting");
        try
        {
            f();
        }
        catch(ex)
        {
            console.log(ex);
        }
        console.log("end");
    };
    dowork(work); //invoke the work 
    
    + functions to build modules 
    var worker = createWorker();
    
    worker.job1();
    worker.job2();
    
    var createWorker = function(){
        var workCount = 0;
        var task1 = function()
        {
            workCount += 1;
            console.log("task1" + workCount);
        };
        var task2 = function()
        {
            workCount += 1;
            console.log("task2" + workCount);
        };
        return {
            job1: function(){
            }, //define function inline 
            job2: task2
        };
    };
    
    revealing module pattern, module is a collection of function or feature can do some works 
    
    + functions to avoid global variables, for javascript the global variables are beyond the evil 
    
(function(){
    var worker = createWorker();
    
    worker.job1();
    worker.job2();
    
    var createWorker = function(){
        var workCount = 0;
        var task1 = function()
        {
            workCount += 1;
            console.log("task1" + workCount);
        };
        var task2 = function()
        {
            workCount += 1;
            console.log("task2" + workCount);
        };
        return {
            job1: function(){
            }, //define function inline 
            job2: task2
        };
    };
})(); // IIFE immediately invoke function expression, this will avoid create global variables 


# Controllers 
- introduction, controller is the center of the angular framework. controller will do whatever it needs to grab the data and build the model. use data binding to show the model in the web page 
- controller basics 
    + controller directive in html (ng-controller)
    <div ng-app>
        <div ng-controller="mainController>
            <h1>{{message}}</h1>
        </div>
    </div>
    
    + we need create a controller with that ng-controller directive specified 
    
    var mainController = function($scope){
        $scope.message = "hello!";
    }
    
    angular will call this function when it need to management an area of webpage 
    
    + controller take a $scope parameter, dollar sign prefix is a sign that the component you're working with is a component provided by angular. we could assign our model to that object 
    
    $scope is not the model, but things that we attach to that $scope are going to the be model 
    
    + angularjs changed will not find the controller in global scope 
    
- controller capabilities
    + controller never directly manipulate html 
    
    + multiple controllers, on same page may have several controllers 
    + complex objects 
    + nest controllers 
    + use binding expression to set attribute of html tag
    <img ng-src="{{chart.source}}">...

    + data binding will never throw exception 

- calling http service 
$http service, is a service provide. encapsulates http communication. get, post, put, delete 

can "ask" for $http inside a controller 

var PersonController = function($scope, $http){
    $http.get("/users/1783").then((v)=>{
        $scope.user = v;
    });
}

- using $http 
    + use github api 
    available from javascript in a browser 
    
    + returns json (easy to convert into objects)
    
    + no authentication or client key required 
    
    + issue a get request to git hub 
    
var mainController = function($scope, $http){
    var onUserComplete = function(resposne){
        $scope.user = response.data;
    }
    
    
    $http.get("https://api.github.com/users/robconery")
         .then(onUserComplete);
         
    $scope.message = "hello";
}


<html ng-app>
<body ng-controller="mainController">
    <h1>{{message}}</h1>
    
    <img ng-src="{{person.imageSrc}}" title="{{person.firstName}}"/>
</body>
</html>

- controllers and modules 
    + controllers usually live in modules 
    
    provide some sort of container for the code we write which is not expose to the global namespace 
    
    + working with modules 
        * create a module with a name 
        
        var app = angular.module("module-name", [other-module-dependencies]);
        
        
        * we could register a controller or another other kinds of object to the module 

        app.controller("controller-name", controller-constructor-function);

        * after create the modules, we could tell angular which module is used as ng-app 
        
        <body ng-app="module-name"/>

        then angular will use the module to load the dependencies and if it look up a controller will try to find it from the module 
        
- create a module 
    + keep things out of global space 
    (function(){
        var mainController = function($scope,$http){
        
        };
    
    })();
    
    + we could specify ng-app to use a model as a context 
    <http ng-app="githubViewer">
    </http>
    
    + define a module called 
    var app = angular.module("githubViewer", []);
    
    //define the main controller 
    ...
    
    //register the controller into the module "githubViewer" by variable app 
    app.controller("MainController", mainController);

    //in real world the javascript it is used with minifier. the last element of array should be the contructor of the controller no matter it will be changed to whatever name by minifier, the previous element is the string argument names which need angular passed to the contructor. to prevent the definition of the parameter in the constructor is changed by the minifier 
    app.controller("MainController", ["$scope", "$http", mainController]); 
- summary 
    + controllers manipulate scope 
    + controllers can live in a module 
    + controllers can use services like $http 
    

# Directives and Views 
- introduction, directive to handle button click to move user input datainto javascript module 

- philosophy 
    + directives, $scope provides the model 
    var mainController = function($scope){
        $scope.message = "hello";
    };
    + model doesnot touch html 
    + data binding moves model data to view 
    + controllers and the model are only focused on gather the data
    + the view is only focus on present the data on the model 
    + move information from view to model, such as form data information 
    <form>
        <input name="message" type="text"/>
        <input type="submit" value="save"/>
    </form>
    + directive allow for indirect model view interaction, most of the directives are works both side 
    
- ng-model 
    + add a user information input by a form 
    <form name="searchUser">
        <input type="search" placeholder="username to find" ng-model="username"/>
        <input type="submit" value="search" ng-click="search()"/>
    </form>
    
    ng-model will use a expression the value will be used to save the user input from the binded tag element 
    if the username is not defined in the $scope of the controller, ng-model will create the variable under the $scope object 

- ng-click 
    + use ng-click to handle the user input event 
    + ng-click accept an expression in the example above we could also pass seach(username) the username which is created by the ng-model
    
    + inside the controller add the search function into the $scope 
    $scope.search = function(username){
        $http.get("https://api.github.com/users/" + username).then(onUserComplete, onError);
    };

    + add ng-src to img tag to display the avatar picture 
    <div>
        <h2>{{user.name}}</h2>
        <img ng-src="http://www.gravatar.com/avatar/{{user.gravatar_id}}" title="{{user.name}}"/>
    </div>
- ng-repeat for display repeat data 
    + add logic to handle the user input complete event to get the repos of the user 
    
    //in the mainController
    var onUserComplete = function(response){
        $scope.user = response.data;
        $http.get($scope.user.repo_url).then(onRepos, onError);
    };
    
    var onRepos = function(response){
        $scope.repos = response.data;
    };
    
    //add UI element to display the repos 
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Stars</th>
                <th>Language</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="repo in repos">
                <td>{{repo.name}}</td>
                <td>{{repo.stargazers_count | number:1}}</td>
                <td>{{repo.language}}</td>
            </tr>
        </tbody>
    </table>
    
    number is a built-in angular filter, the :1 means keep one decimal point
- filters, filter is a object which is used to pass data and output a new format of data. it is modify the data for display 

    + basic format
    expression |filterName:parameter 
    
    + example to use the built in filters in angular 
    currency    {{amount|currency:"USD$}}
    date        {{startDate|date:'short'}}
    filter      repo in repos|filter:searchTerm 
    json        {{repo|json}}
    limitTo     repo in repos|limitTo:10 
    lowercase/uppercase     {{user.name|upppercase}}
    number      {{starts|number}}    
    orderBy     repo in repos|filter:searchTerm|orderBy:'name'
    
    + we could also let the filter filte the value base on a property of a model value, the prefix +/- means asc or desc in the filter 
    
    <select ng-model="repoSortOrder">
        <option value="+name">Name</option>
        <option value="-stargazers_count">Starts</option>
        <option value="+language">Language</option>
    </select>
    
    the select element will be fill with the property value of the scope 
    set the propety value in the controller 
    
    $scope.repoSortOrder = "init-value";
    
    add filter to use the repoSortOrder property 
    <tr ng-repeat="repo in repos | orderBy:repoSortOrder">
        <td>{{repo.name}}</td>
    </tr>

- each direction's assign value is a expression of javascript, it is same as {{}} in the html template 
    
- ng-show and hide 
<div ng-show="user">
</div>

if the expression user is truthinese 
var number = 0; //false 
var o1 = undefined; //false 
var o2 = null; //false 
var o3 = []; //true
var o4 = {}; //true 
var name = ""; //false 

ng-hide is revert to ng-show 

- ng-include, can bring in html from other source. this is useful to break your html into pieces 
<div ng-include="'userdetails.html'" ng-show="user">
</div>

- directives! all the built-in directives there are more than fourty directives 
ng-app 
ng-class 
ng-if 
ng-keypress 
ng-mouseleave 
ng-repeat 
ng-bind 
ng-click 
ng-focus 
ng-include 
ng-keyup 
ng-mousemove 
ng-style 
ng-blur 
ng-copy 
ng-hide 
ng-init 
ng-model
ng-mouseover 
ng-switch 
ng-change 
ng-dblclick 
ng-href 
ng-keydown 
ng-mouseenter 
ng-paste 
ng-transclude 

    + angular aslo support custom directives there are lots of open source directives avaliable such as ng bootstrap widgets, directive for google map, media players etc. 
- summary 
binding directives 
model directives 
event directives 
display directives 


# Services
- introduction 
    + a service is different, is a module to do a specific job 
- the veen of services 
so far... demo logic 
    + controllers setup the model 
    + view consumes the model 
    + directives are an intermediary 
    directive sit between model and view to keep seperate from the model and view but sync the changes 
    
    + servies is if the logic doesn't fit in model or a view or a directive, then the service is a grab-bag where everything else can fit. the logic will be easy to use anywhere else in the application 
    
    so services are offer functionality to models, directives and controllers in a reusable way, such as http communication. 
    
- Gamification, use the timeout services
    + for demo, will give user 5 second to type in the value and after that app will use whatever inside the input box to search 
    
    in controller:
    var app = angular.model("githubViewer", []);
    var mainController = function(){$scope, $http, $interval){
        var decrementCountdown = function(){
            $scope.countdown -= 1;
            if($scope.countdown < 1){
            $scope.search($scope.username);
            }
        };
    };
    
    app.controller("mainController", "$scope", "$http", "$interval", mainController);
    
    or use simple registration syntax 
    app.controller("mainController", mainController);

    
    angular provide two serives to wrap the javascript built-in settimeout and setinterval functions, $timeout and $interval. 
    the reasons are, first easy for unit test, second reason is the sync data between model and view, the built-in methods will trigger the changes of view 
    
    var startCountdown = function(){
        $interval(decrementCountdown, 1000, $scope.countdown);
    };
    $interval service is a function you could directly invoke 
    
- service roles 
    + wrapper up complexity logic for controller to provide issolation such as http communication 

    we could use service by direct pass the service from the controller constructor function or use service inside of directives in custom directives and other service too 

- using $log 
var mainController = function($scope, $http, $interval,$log){
    $log.log 
    $log.warn
    $log.info 
    $log.error 
};

we could override the default $log service to make it log to server 

- UI service 
    + change the model and directive will update the view for us 
    
    + some scenarios need to use javascript directly interactive with UI such as force browser navigate to new url; pop up dialog to let the user input some data 

    their are services we could use to complete these kinds of requirements 
    
    $window, $browser, $location, $animate, $anchorScroll
    
    these services could be used to achieve this and easy to unit test the logic 

    + user $anchorScroll and $location 
    
    we add id to a UI element and use $anchorScroll to scroll the scrollbar and $location to set the fragement of the identifer of the id of the element 
    
    $location.hash("element-id");
    $anchorScroll();
    
- custom services, why build your own? lets tell you about the big three 
    + create resuable logic 
    + create shared data between controller and views, angular only instance only single instance for each service 
    + manage complexity, simplify the code and seperate the responsability 
    
- create a custom github service 
(function(){
    var github = function($http){
    
        var getUser = function(username){
            return $http.get("https://api.github.com/users/" + username)
                        .then(function(response){
                            return response.data;
                        });
        };
    
        return {
            getUser:getUser
        };
    };
    
    //get the referece of the module githubViewer
    var module = angular.module("githubViewer"); 
    
    //name of service and a function return a service object;
    module.factory("github", github); 
}());

//change the code relative to mainController

var mainController = funtion($scope, $github, $interval, $log, $anchorScroll, $location){
    ...
    
    $github.getUser("user-name").then(onUserComplete, onError);
    ...
};
- Service 
    + service as a barrier to keep module and controller 
    + service as components can be pass to controller 
    + services for custom logic 


# Routing
- introduction 
    + alow to mange multiple views 
    + pass parameters between the controllers that manage these screens and even tap into the browser back and forward buttons so that the browser history is synchronized with user's location in your application 

- what is routing 
    + have different features in different areas your application 
    + different controllers and different views 
    + use router to track the current user location 
    + routing based on URL in the address bar 
    + URL is be able to used to address resources in server and client 
    + routing engine captures request 
    + routing rules render a response 
    + example 
    user got a url -> application need render the relative view -> the controller get the data and we use data-binding put the data to display 
    
    user click a link -> again routing engine and transfer the url to another view -> the controller get the necessary data 
    
- routing with angular 
    + dependson another module: angular-route.js, this will give use a new module, is called ng-route 

    + configure rules into $routeProvider 
    $ routeProvider.when("/main", {
        templateUrl: "main.html",
        controller: "mainController"
    });
    
    + we need reorganize our default.html, setup a layout view, route engine is used to load the templates 
    header 
    layout template for route engine 
    footer 
    
    base on the url angular could navigate between different views 
- the setup 
    + add dependence for angular-route.js 
    
    + create a new file called app.js which is used to define module
    //the module ngRoute is provided by angular-route.js 
    
    + seperate different views, main.html(search user), user.html(user details), repo.html(repository details), index.html(shell)
    
    var app = angular.module("githubViewer", ["ngRoute"]);
    app.config(function($routeProvider){
        $routeProvider.when("/main", {
            templateUrl:"main.html",
            controller:"mainController"
        })
        .when({
        })
        .otherwise({
            redirectTo:"/main"
        });
    });
    
    
    + add javascript file dependence to html 
    <script data-require="angular.js@" data-swmver="1.3.0-beta.5" src="https://code.angularjs.com..."><script>
    <script data-require="angular-route.js@" data-swmver="1.3.0-beta.5" src="https://code.angularjs.com..."><script>
    <script src="app.js"><script>
    <script src="mainController.js"></script>
    <script src="github.js"></script>
    
    + update index.js 
    
    <html ng-app="githubViewer">
    <body>
        <h1>Github Viewer</h1>
        <div ng-view></div>
    </body>
    <html>
    
    + now we could remove the unnecessary directives from our view, main.html such as remove the ng-controller="mainController"
    
    <div>
        <div>{{error}}</div>
        {{countdown}}
        <form name="searchUser" ng-submit="search(username)">
        ...
        <div ng-include="'userdetails.html'" ng-show="user"></div>
    </div>
    
    we could separate our main.html to only handle the user information without user detail, repository information etc...
    var mainController($scope, $interval, $location){
    
    ...
    
    };
    
    the main controller only need to focus on handling query for user and the countdown information 

- the fixup 
    + add user detail 
    + have location into url have two benifits 
        * easy to pass parameters between views and controllers
        * let the user easy to bookmark the url 
        
    + to make it works again we need 
        * create route 
        * create template 
        * create controller 
        * have search navigate to new route 
        
    + add new user url into route rule 
    $routeProvider.when("/main", {
            templateUrl:"main.html",
            controller:"mainController"
        })
        .when({
            // after : is treat as parameter to username 
            "/user/:username",  
            controller: "UserController"
        })
        .otherwise({
            redirectTo:"/main"
        });
        
    + add user.html 
    + add userController.js 
    var app = angular.module("githubViewer");
    var userController = function($scope, $github, $routeParams){
        ...
        $scope.username = $routeParams.username;
        ...
    };
    
    app.controller("userController", userController);
    
    + add location switch to the mainController
    
    $location.path("/user/" + username);
    
    + add a navigation back to main anchor into the user.html 
    ...
    <a href="#/main">Back to search</a>
    ...
    
- your challenge 
    + how to add github repo detail into a new view 

- my solution, compose all the previous learned features to achieve the challenge 
- summary 







        
        