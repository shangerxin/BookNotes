Docker fundamentals for beginners;Note=Erxin


# Install 
- from 

# Get started 
- module overview 
- servers versus virtual machines 
- what is docker 
docker is a tool/software that makes it easier to create, deploy and run applications 


    + layers 
    
app 
bins/libs 
docker engine 
os 
hardware 

- docker editions 



# Working with containers and images 
- docker commandlines 

    + cli https://docs.docker.com/engine/reference/commandline/cli/

attach	Attach local standard input, output, and error streams to a running container
build	Build an image from a Dockerfile
builder	Manage builds
checkpoint	Manage checkpoints
commit	Create a new image from a container’s changes
config	Manage Swarm configs
container	Manage containers
context	Manage contexts
cp	Copy files/folders between a container and the local filesystem
create	Create a new container
diff	Inspect changes to files or directories on a container’s filesystem
events	Get real time events from the server
exec	Execute a command in a running container
export	Export a container’s filesystem as a tar archive
history	Show the history of an image
image	Manage images
images	List images
import	Import the contents from a tarball to create a filesystem image
info	Display system-wide information
inspect	Return low-level information on Docker objects
kill	Kill one or more running containers
load	Load an image from a tar archive or STDIN
login	Log in to a registry
logout	Log out from a registry
logs	Fetch the logs of a container
manifest	Manage Docker image manifests and manifest lists
network	Manage networks
node	Manage Swarm nodes
pause	Pause all processes within one or more containers
plugin	Manage plugins
port	List port mappings or a specific mapping for the container
ps	List containers
pull	Download an image from a registry
push	Upload an image to a registry
rename	Rename a container
restart	Restart one or more containers
rm	Remove one or more containers
rmi	Remove one or more images
run	Create and run a new container from an image
save	Save one or more images to a tar archive (streamed to STDOUT by default)
search	Search Docker Hub for images
secret	Manage Swarm secrets
service	Manage Swarm services
stack	Manage Swarm stacks
start	Start one or more stopped containers
stats	Display a live stream of container(s) resource usage statistics
stop	Stop one or more running containers
swarm	Manage Swarm
system	Manage Docker
tag	Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
top	Display the running processes of a container
trust	Manage trust on Docker images
unpause	Unpause all processes within one or more containers
update	Update configuration of one or more containers
version	Show the Docker version information
volume	Manage volumes
wait	Block until one or more containers stop, then print their exit codes

    + base command 
```
--config	/root/.docker	Location of client config files
--context , -c		Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with docker context use)
--debug , -D		Enable debug mode
--host , -H		Daemon socket(s) to connect to
--log-level , -l	info	Set the logging level (debug, info, warn, error, fatal)
--tls		Use TLS; implied by --tlsverify
--tlscacert	/root/.docker/ca.pem	Trust certs signed only by this CA
--tlscert	/root/.docker/cert.pem	Path to TLS certificate file
--tlskey	/root/.docker/key.pem	Path to TLS key file
--tlsverify		Use TLS and verify the remote
```

- docker file references 

docker file format 
```
# Comment
INSTRUCTION arguments

# escape=\ (backslash)
or 
# escape=` (backtick)

FROM microsoft/nanoserver
COPY testfile.txt c:\\
RUN dir c:\
```

example 
```
RUN echo hello \
# comment
world
```

    + Environment variables (declared with the ENV statement) can also be used in certain instructions as variables to be interpreted by the Dockerfile

${variable:-word} indicates that if variable is set then the result will be that value. If variable is not set then word will be the result.

${variable:+word} indicates that if variable is set then word will be the result, otherwise the result is the empty string

Environment variables are supported by the following list of instructions in the Dockerfile:

ADD
COPY
ENV
EXPOSE
FROM
LABEL
STOPSIGNAL
USER
VOLUME
WORKDIR
ONBUILD

    + FROM, ARG and FROM interact 
    
RUN --mount 

RUN --nextwork 
    host 
    none, none network access  
    default, in the default netork 
RUN --security 

CMD        The CMD instruction has three forms:
    ```
    CMD ["executable","param1","param2"] (exec form, this is the preferred form)
    CMD ["param1","param2"] (as default parameters to ENTRYPOINT)
    CMD command param1 param2 (shell form)
    ```
LABEL 
MAINTAINER 
LABEL 
EXPOSE 
ENV     ENV <key>=<value> ...
ADD 
    ADD [--chown=<user>:<group>] [--chmod=<perms>] [--checksum=<checksum>] <src>... <dest>
    ADD [--chown=<user>:<group>] [--chmod=<perms>] ["<src>",... "<dest>"]
    
ADD --link   check copy --link 
COPY 
    COPY [--chown=<user>:<group>] [--chmod=<perms>] <src>... <dest>
    COPY [--chown=<user>:<group>] [--chmod=<perms>] ["<src>",... "<dest>"]
COPY --link 

ENTRYPOINT   exec form of ENTRYPOINT to set fairly stable default commands and arguments and then use either form of CMD
VOLUME 
USER 
WORKERDIR 
ARG 
ONBUILD 
STOPSIGNAL 


- compose file reference, docker-compose features and flags, https://docs.docker.com/compose/reference/

$ docker compose --help 

example
$ docker compose -f docker-compose.yml -f docker-compose.admin.yml run backup_db


```
Define and run multi-container applications with Docker.

Usage:
  docker compose [-f <arg>...] [--profile <name>...] [options] [COMMAND] [ARGS...]
  docker compose -h|--help

Options:
  -f, --file FILE             Specify an alternate compose file
                              (default: docker-compose.yml)
  -p, --project-name NAME     Specify an alternate project name
                              (default: directory name)
  --profile NAME              Specify a profile to enable
  --verbose                   Show more output
  --log-level LEVEL           DEPRECATED and not working from 2.0 - Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
  --no-ansi                   Do not print ANSI control characters
  -v, --version               Print version and exit
  -H, --host HOST             Daemon socket to connect to

  --tls                       Use TLS; implied by --tlsverify
  --tlscacert CA_PATH         Trust certs signed only by this CA
  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file
  --tlskey TLS_KEY_PATH       Path to TLS key file
  --tlsverify                 Use TLS and verify the remote
  --skip-hostname-check       Don't check the daemon's hostname against the
                              name specified in the client certificate
  --project-directory PATH    Specify an alternate working directory
                              (default: the path of the Compose file)
  --compatibility             If set, Compose will attempt to convert deploy
                              keys in v3 files to their non-Swarm equivalent

Commands:
  build              Build or rebuild services
  bundle             Generate a Docker bundle from the Compose file
  config             Validate and view the Compose file
  create             Create services
  down               Stop and remove containers, networks, images, and volumes
  events             Receive real time events from containers
  exec               Execute a command in a running container
  help               Get help on a command
  images             List images
  kill               Kill containers
  logs               View output from containers
  pause              Pause services
  port               Print the public port for a port binding
  ps                 List containers
  pull               Pull service images
  push               Push service images
  restart            Restart services
  rm                 Remove stopped containers
  run                Run a one-off command
  scale              Set number of containers for a service
  start              Start services
  stop               Stop services
  top                Display the running processes
  unpause            Unpause services
  up                 Create and start containers
  version            Show the Docker Compose version information
```

- API reference 

The Docker Engine API is a RESTful API accessed by an HTTP client such as wget or curl

$ docker version

    + sdk 
    
$ go get github.com/docker/docker/client

python sdk 

pip install docker.

```
import docker
client = docker.from_env()
print(client.containers.run("alpine", ["echo", "hello", "world"]))
```                                                               


- docker hub api, OpenAPI specification:Download

Docker Hub is a service provided by Docker for finding and sharing container images with your team.

It is the world's largest library and community for container images.

In addition to the Docker Hub UI and Docker Hub CLI tool  

- docker extension api 

```
await ddClient.docker.cli.exec("logs", ["-f", "..."], {
  stream: {
    onOutput(data): void {
        // As we can receive both `stdout` and `stderr`, we wrap them in a JSON object
        JSON.stringify(
          {
            stdout: data.stdout,
            stderr: data.stderr,
          },
          null,
          "  "
        );
    },
    onError(error: any): void {
      console.error(error);
    },
    onClose(exitCode: number): void {
      console.log("onClose with exit code " + exitCode);
    },
  },
});
```




- drivers and specifications 

- .dockerignore file:
```
# comment
*/temp*
*/*/temp*
temp?          Exclude files and directories in the root directory whose names are a one-character extension of temp
```

- image manifest v2 schema 1 


```
{
   "name": "hello-world",
   "tag": "latest",
   "architecture": "amd64",
   "fsLayers": [
      {
         "blobSum": "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"
      },
      {
         "blobSum": "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"
      },
   ],
   "history": [
      {
         "v1Compatibility": "{\"id\":\"e45a5af57b00862e5ef5782a9925979a02ba2b12dff832fd0991335f4a11e5c5\",\"parent\":\"31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\",\"created\":\"2014-12-31T22:57:59.178729048Z\",\"container\":\"27b45f8fb11795b52e9605b686159729b0d9ca92f76d40fb4f05a62e19c46b4f\",\"container_config\":{\"Hostname\":\"8ce6509d66e2\",\"Domainname\":\"\",\"User\":\"\",\"Memory\":0,\"MemorySwap\":0,\"CpuShares\":0,\"Cpuset\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"PortSpecs\":null,\"ExposedPorts\":null,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":[\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"],\"Cmd\":[\"/bin/sh\",\"-c\",\"#(nop) CMD [/hello]\"],\"Image\":\"31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"NetworkDisabled\":false,\"MacAddress\":\"\",\"OnBuild\":[],\"SecurityOpt\":null,\"Labels\":null},\"docker_version\":\"1.4.1\",\"config\":{\"Hostname\":\"8ce6509d66e2\",\"Domainname\":\"\",\"User\":\"\",\"Memory\":0,\"MemorySwap\":0,\"CpuShares\":0,\"Cpuset\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"PortSpecs\":null,\"ExposedPorts\":null,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":[\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"],\"Cmd\":[\"/hello\"],\"Image\":\"31cbccb51277105ba3ae35ce33c22b69c9e3f1002e76e4c736a2e8ebff9d7b5d\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"NetworkDisabled\":false,\"MacAddress\":\"\",\"OnBuild\":[],\"SecurityOpt\":null,\"Labels\":null},\"architecture\":\"amd64\",\"os\":\"linux\",\"Size\":0}\n"
      },
      
   ],
   "schemaVersion": 1,
   "signatures": [
      {
         "header": {
            "jwk": {
               "crv": "P-256",
               "kid": "OD6I:6DRK:JXEJ:KBM4:255X:NSAA:MUSF:E4VM:ZI6W:CUN2:L4Z6:LSF4",
               "kty": "EC",
               "x": "3gAwX48IQ5oaYQAYSxor6rYYc_6yjuLCjtQ9LUakg4A",
               "y": "t72ge6kIA1XOjqjVoEOiPPAURltJFBMGDSQvEGVB010"
            },
            "alg": "ES256"
         },
         "signature": "XREm0L8WNn27Ga_iE_vRnTxVMhhYY0Zst_FfkKopg6gWSoTOZTuW4rK0fg_IqnKkEKlbD83tD46LKEGi5aIVFg",
         "protected": "eyJmb3JtYXRMZW5ndGgiOjY2MjgsImZvcm1hdFRhaWwiOiJDbjAiLCJ0aW1lIjoiMjAxNS0wNC0wOFQxODo1Mjo1OVoifQ"
      }
   ]
}

```

    + schema 2 
```
{
    "schemaVersion": 2,
    "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
    "config": {
        "mediaType": "application/vnd.docker.container.image.v1+json",
        "digest": "sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7",
        "size": 7023
    },
    "layers": [
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "digest": "sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f",
            "size": 32654
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "digest": "sha256:3c3a4604a545cdc127456d94e421cd355bca5b528f4a9c1905b15da2eb4a4c6b",
            "size": 16724
        },
        {
            "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
            "digest": "sha256:ec4b8955958665577945c89419d1af06b5f7636b4ac3da7f12184802ad867736",
            "size": 73109
        }
    ]
}
```

- docker register token authentication 

Oauth2 token 

Toekn scope documentation 

Token authentication specification 

- Docker registry storage driver      

inmemory: A temporary storage driver using a local inmemory map. This exists solely for reference and testing.
filesystem: A local storage driver configured to use a directory tree in the local filesystem.
s3: A driver storing objects in an Amazon Simple Storage Service (S3) bucket.
azure: A driver storing objects in Microsoft Azure Blob Storage.
swift: A driver storing objects in Openstack Swift.
oss: A driver storing objects in Aliyun OSS.
gcs: A driver storing objects in a Google Cloud Storage bucket.
Aliyun OSS Storage drive An implementation of the storagedriver.StorageDriver interface which uses Aliyun OSS for object storage.
In-memory storage driver



# Docker images and registry 
- os install 

docker run image > check local > pull from hub > download and run 

image like vmware templates 

- image registry, registry provider like dockerhub, jfrog  

images are stored in image registry 

dockerhub -> free & paid 

on-premises image registry server setup 

Image tag 
[repository]:[tag] 

ex. 
nginx_olb_fe:latest 

$ docker pull ubuntu:version
$ docker run ubuntu 

- dockerhub 

official images, published by docker 

verified publisher, do

- docker file 






# Working with containers and images 
- 