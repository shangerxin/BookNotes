Learn Linux Shell Scripting=Sebastiaan;Note=Erxin

# Preface
- reference
bash 4.4

https://learning.oreilly.com/library/view/learn-linux-shell/9781788995597/2666592d-269d-4539-8457-840fac009c51.xhtml

- code examples 

GitHub at https://github.com/PacktPublishing/Learn-Linux-Shell-Scripting-Fundamentals-of-Bash-4.4. 

- what is bash

Bourne-again shell, or Bash. The Bash shell is based on the Bourne shell, known as sh. But what is a shell

- set up environment, vm ubuntu 
- access the virtual machine via ssh. 

    + The simplest and most well-known client is PuTTY. PuTTY was created in 1999
    
    + newer SSH client software, such as MobaXterm. This provides you with more session managemen
    https://mobaxterm.mobatek.net/download.html
    
- editors 
atom 
notepad++
vscode 
vim, Vim. Vim is derived from the term Vi Improved
gnu nano

- .vimrc file can be used to set some persistent options for Vim

set expandtab
set tabstop=2
syntax on
colo peachpuff
set ignorecase
set smartcase
set number

- vim cheatsheet 
esc, exit insert mode, back to command mode 
i, insert before 
a, insert after 
I, insert at the beginning of current line 
A, insert at the end of the current line 
o, insert a new line below the current line 
O, insert above the current line 
dd, delete current line 
ctrl+r, redo an undo 
yy, yank the current line (=copy)
p, paste the last yanked line below the current line 
P, paste above the current line 
H, navigate to the beginning of the file 
M, navigate to the middle 
G, navigate to the end of the file 
dH, delete all lines until the beginning of the file 
dG, delete all lines until the end of the file 

- Nano was first released in 1999, with the intention of replacing the Pico text editor.  ^ is shorthand for Ctrl. If you want to exit, you hold down Ctrl and press X:

- reference hacking vim 7.2 
https://www.packtpub.com/application-development/hacking-vim-72


# The linux filesystem 
- built-in commands, Each builtin command is executed directly in the shell itself, instead of an external programme which the bash would load and run.

list all built in commands 

$ compgen -b

- everything is a file
- what is a filesystem?

    +  The Windows filesystem family spans from the earliest filesystem of FAT up until the newest ReFS, with the most widely used currently being NTFS.
    
    + linux: ext4, XFS, Btrfs
    Linux filesystem implementation is currently ext4. It is the fourth iteration in the extended file system (ext) series of Linux filesystems
    
    XFS is most famously used in Red Hat distributions, advanced feature than ext4, parallel I/O, larger file size support, and better handling of large files.
    
    Btrfs. This filesystem implementation was initially designed at Oracle and is considered stable as of 2014. Btrfs has many advanced features that could make it preferable to ext4 and XFS; The most interesting feature of Btrfs is that it uses the copy-on-write (COW) principle
    
- A Linux filesystem adheres to the Filesystem Hierarchy Standard (FHS). This FHS is maintained by The Linux Foundation and is currently up to version 3.0

based on a Unix predecessor: the Unix Filesystem Standard (UFS). It specifies the directory structure and its contents

write half and drop power, COW, Btrfs does not have this problem. However, ext4 and XFS are not COW filesystems. They both handle this issue in another way: with journaling:

    + filesystem request disk write from journal
    + journal writes on disk 
    + after file write, journal is updated 

- tree structure. It is referred to as a tree because it starts at a single origin point, the root (found at /

$ ls gives the long listing format

lowest point in filesystem at /
default superuser root 
default superuser's home directory /root/

- top level directory 
/bin/, binaries used by normal users 
/boot/, files used in the boot process, kernel, initramfs, bootloader 
/dev/, contains special files used to access devices 
/etc/, default location for software configuration files 
/home/, contains the home directories for normal users 
/lib/, contains system libraries 
/lib64/, contains 64 bit system libraries 
/media/, removable devices such as USB and DVDs can be found here 
/mnt/, empty by default, can be used to mount other filesystems 
/opt/, directory where optional software can be installed 
/root/, the home directory of the root user 
/run/, contains variable data about run-time data, different each boot 
/sbin/, contains essential system binaries (=tools) used by administrative users 
/srv/, directory to place data to be served by the server 
/sys/, contains information about the system such as drivers and kernel features 
/tmp/, directory intended for temporary files, often cleared on reboot(because it is tored in RAM)
/usr/, contains non-essential files and binaries as read-only user data 
/var/, contains variable files such as logs 

- multiple partitions, linux mounts filesystems somewhere within the tree structure 

check with df tool 

$ df -hT 

disk space usage 

- /bin/, /sbin/, and /usr/ 

In Bash, the $ denotes the fact that we're using a variable

As a final note, /usr/ contains more than just binaries. Among these are some libraries (which have the same relation to the /lib/ and /lib64/ top-level directories) and some miscellaneous files. 

The difference between the top-level /(s)bin/ and /usr/(s)bin/ is a bit more vague. In general, the rule is that essential tools are found in /(s)bin, while system-specific binaries are placed in the /usr/(s)bin directories. 

why are they divided between bin and sbin? The answer to the last part of the question is easy: bin has normal utilities used by users, while sbin has utilities used by system administrators.

check a command with 
$ type -a echo 

As you can see here, binaries need to be in the /usr/local/sbin/, /usr/local/bin/, /usr/sbin/, /usr/bin/, /sbin/, or /bin/ directory for us to be able to use them (with the current value of PATH, which we can change, but that's out of scope for now)

- /etc/, pronounced et-c as in et-cetera, it is used to store configuration files for both system

/etc$ cat fstab

here is the file systems table, or fstab file. It contains the instructions for Linux to mount the filesystems at each start

- Universally Unique Identifier (UUID) and we're mounting it on /

- /opt/, /tmp/, and /var/ 

/tmp/, used for temporary files 
/var/, /var/ contains many subdirectories and some symlinks

On your new Ubuntu virtual machine, the /var/mail/ directory and its symlink, /var/spool/mail/

- everything is a file 
- different types of files, denoted character 

-:, normal file 
d:, directory 
l:, symlink 
s:, socket 
c:, special file used for device handlers 
b:, block device, represents storage hardware, such as disk partitions 
p:, named pipe 

    + example 
reader@ubuntu:/dev$ ls -l /dev/
total 0
crw-r--r-- 1 root root     10, 235 Jul 29 15:04 autofs
drwxr-xr-x 2 root root         280 Jul 29 15:04 block
drwxr-xr-x 2 root root          80 Jul 29 15:04 bsg
crw-rw---- 1 root disk     10, 234 Jul 29 15:04 btrfs-control
drwxr-xr-x 3 root root          60 Jul 29 15:04 bus
lrwxrwxrwx 1 root root           3 Jul 29 15:04 cdrom -> sr0
drwxr-xr-x 2 root root        3500 Jul 29 15:04 char
crw------- 1 root root      5,   1 Jul 29 15:04 console
lrwxrwxrwx 1 root root          11 Jul 29 15:04 core -> /proc/kcore

- overview of linux filesystem 

https://www.tldp.org/LDP/intro-linux/html/sect_03_01.html

https://tldp.org/, linux document project 

- linux permissions, built-in commands, id, touch, chmod, umask, chown, chgrp, sudo, useradd, groupadd, usermod, mkdir, and su.

/etc/shadow (which contains the hashed passwords for all users)

/etc/fstab (which determines which file systems are mounted at boot)

- RWX, attributes: read, write, and execute, or RWX

permission          on file         on directory 
read                list files      list contents 
write               make change     replace or delete files 
execute             execute file    traverse into the directory by cd, always combined with read

- users, groups, and others 

user id(UID)
group id(GID)

check yourself
$ id 

check current working directory 
$ pwd

- change permission, chmod, umask 
    
    + chmod, which we like to read as change file mode. chmod has two operating modes: symbolic mode and numeric/octal mode.

    tell chmod who (users, groups, others, or all) we are doing this for, followed by the permission we want to add. chmod u+x <filename>, User, Group, Others and All
    
    add. $ chmod u+x <filename>
    
    remove group $ chmod g-rwx <filename>.
    
    + example 
    
reader@ubuntu:~$ ls -l
total 4
-rw-rw-r-- 1 reader reader 69 Jul 14 13:18 nanofile.txt
-rw-rw-r-- 1 reader reader  0 Aug  4 13:44 testfile
reader@ubuntu:~$ chmod u+x testfile 
reader@ubuntu:~$ ls -l
total 4
-rw-rw-r-- 1 reader reader 69 Jul 14 13:18 nanofile.txt
-rwxrw-r-- 1 reader reader  0 Aug  4 13:44 testfile

    + with number 
sym octal  
---	0
--x	1
-w-	2
-wx	3
r--	4
r-x	5
rw-	6
rwx	7
    
    
- check command manual with man 
$ man chmod 

- The umask session is used to determine the file permissions for newly created files and directories.

umask it list the default permission 
$ umask 
0002

take the maximum octal value for files, 0666, and subtract the umask (in this case, 0002), which gives us 0664. This would mean that newly created files are -rw-rwr--. 0666 is due to linux protect to create executable file by default 

- sudo, chown and chgrp 

sudo, superuser do


use chgrp to change the group of the umaskfile file to games

reader@ubuntu:~$ chgrp games umaskfile 
chgrp: changing group of 'umaskfile': Operation not permitted
reader@ubuntu:~$ sudo chgrp games umaskfile 
reader@ubuntu:~$ ls -l

- work with multiple users 

useradd (and later usermod) is a privileged command, which we will execute with sudo

- advanced permissions 
    + file attributes 
      
    + special file permissions SUID, SGID, and the sticky bit
    
    SUID, files are executed with the permissions of the owner, directories does nothing 
    SGID, files are executed with the permissions of the group, regardless of which user executes it, directoreis files that are created in this directory get the same group 
    Sticky bit, files does nothing, directory user can only delete their own files 
    
    + access control lists(ACLs), UGO/RWX system, using setfacl (set file acl) getfacl (get file acl). 
    
- further reading 
<fundamentals of linux>
    
file attribteus, https://linoxide.com/how-tos/howto-show-file-attributes-in-linux/

access control list, https://www.tecmint.com/secure-files-using-acls-in-linux/

special file permissions, https://thegeeksalive.com/linux-special-permissions/

- file manipulation

mkdir, touch, cp, rm 

rename the file by mv command 

symbolic links (also called soft links) and hard links. The difference is found deeper in the filesystem workings: a symbolic link refers to the filename (or directory name), whereas a hard link links to inode that stores the contents of the file or directory

- archiving, creating archives, tarball 

tar command 

$ tar czvf <archive name> <file1> <file2>
$ tar -czvf <archive name> <file1> <file2>
$ tar -c -z -v -f <archive name> <file1> <file2>
$ tar --create --gzip --verbose --file=<archive name> <file1> <file2>

- find files, locate command 

$ locate fstab 

- find command

search on a filename 
search on permissions 
search on ownership 
search on file type 
search on file size 
search on timestamps 
search only in certain directories 

    + print every file 
reader@ubuntu:~$ find /home/reader/
/home/reader/
/home/reader/.gnupg
/home/reader/.gnupg/private-keys-v1.d
/home/reader/.bash_logout
/home/reader/.sudo_as_admin_successful
...

    + find with size 
reader@ubuntu:~$ find /home/reader/ -size 23c


# Start Scripting
- KISS principle (Keep It Simple, Stupid) where possible

zen of python:
Simple is better than complex
Complex is better than complicated
Readability counts

- hello world

```
#!/bin/bash

echo "Hello World!"
```

$ bash hello-world.sh

- shebang, but is sometimes also referred to as a sha-bang, hashbang, pound-bang, and/or hash-pling. Its function is pretty simple

which binary to use to execute the script

#!/bin/bash 

- script header 
author 
version 
date
description 
usage 

```
#!/bin/bash

#####################################
# Author: Sebastiaan Tammer
# Version: v1.0.0
# Date: 2018-08-26
# Description: Our first script!
# Usage: ./hello-world-improved.sh
#####################################

# Print the text to the Terminal.
echo "Hello World!"
```

- The short answer: use shorthand options in your daily work, but use long options when scripting. 
- verbose output 

- what is variable 

```
hello_text="Hello World!"

# Print the text to the terminal.
echo ${hello_text}
```

wrapping its name inside the ${...} syntax

- use lowercase_separated_by_underscores for regular variables, and UPPERCASE for constants

- user input 

script parameter 

read from file 

read from user input

- script exit status
# Test if the /tmp/ directory exists using the full command:
test -d /tmp/
test_rc=$?

# Test if the /tmp/ directory exists using the simple shorthand:
[ -d /tmp/ ]
simple_rc=$?

# Test if the /tmp/ directory exists using the extended shorthand:
[[ -d /tmp/ ]]
extended_rc=$?

- debugging, running the Bash script with debug logging

reader@ubuntu:~/scripts/chapter_09$ bash -x test-shorthand-variable.sh 


- if else


read -p "Do you like this question? " reply_variable

# See if the user responded positively.
if [[ ${reply_variable} = 'y' || ${reply_variable} = 'Y' || ${reply_variable} = 'yes' || ${reply_variable} = 'YES' || ${reply_variable} = 'Yes' ]]; then
  echo "Great, I worked really hard on it!"
  exit 0
fi

# If we get here, the user did not give a proper response.
echo "Please use yes/no!"
exit 1

- grep. global regular expression 

grep <pattern> <file>
grep <pattern> (which needs input in the form of a pipe, or |)

- character classes, POSIX double-bracket character classes 

[[:alnum:]], lowercase and upppercase letters or number 
[[:alpha:]]
[[:digit:]]
[[:lower:]]
[[:upper:]]
[[:blank:]]

?, zero or more 
+, one or more 
{n}, repeat n times 
{n,m}, between n and m times 
{,n} n or fewer times 
{n,}, n or more times 
(xx|yy), search pattern more than on character 

- globbing,

reader@ubuntu:~/scripts/chapter_09$ ls -l if-then-*

- sed, the stream editor 

sed script, we are now globally replacing all instances, instead of just the first instance for each line

    + in-place editing 

cat a file before we send it to sed, fortunately, we don't really need to do that. The usage for sed is as follows: sed [OPTION] {script-only-if-no-other-script} [input-file].

--in-place option of sed can provide that functionality as well, by adding a file suffix



# condition test
- if else 
```
input_path=$1

# First, check if we can read the file.
if [[ -r ${input_path} ]]; then
  # We can read the file, now we determine what type it is.
  if [[ -f ${input_path} ]]; then
    echo "File found, showing content:"
    cat ${input_path} 
  elif [[ -d ${input_path} ]]; then
    echo "Directory found, listing:"
    ls -l ${input_path} 
  else
    echo "Path is neither a file nor a directory, exiting script."
    exit 1
  fi
else
  # We cannot read the file, print an error.
  echo "Cannot read the file/directory, exiting script."
  exit 1
fi
```

both globbing and regular expressions within the [[...]] blocks

- the while loop 
```
# Infinite while loop.
while true; do
  echo "Hello!"
  sleep 1 # Wait for 1 second.
done
```
- until loop 
```
# This loop runs 10 times.
until [[ ${counter} -gt 9 ]]; do
  counter=$((counter+1)) # Increment the counter by 1.
  echo "Hello! This is loop number ${counter}."
  sleep 1
done

# After the while-loop finishes, print a goodbye message.
echo "All done, thanks for tuning in!"
```

- the for loop 

```
# Iterate over the list and process the values.
for word in ${words}; do
  echo "The word is: ${word}"
done

# Infinite for loop.
for ((;;)); do
  echo "Hello!"
  sleep 1 # Wait for 1 second.
done
```

- globbing and the for loop 

break, continue 


# Using pipes and redirection in scripts 
- redirection with |
-  streams which are exposed by default through file descriptors:

The standard input stream, stdin, by default bound to /dev/fd/0
The standard output stream, stdout, by default bound to /dev/fd/1
The standard error stream, stderr, by default bound to /dev/fd/2

- a Terminal gets written to stdin on /dev/fd/0, which a command can read.

- redirecting output 

command > output-file

> is shorthand for 1>. You might recognize this 1: it refers to the file descriptor /dev/fd/1. As we'll see when we're dealing with stderr, which is on /dev/fd/2, we will use 2> instead of 1> or >.

- stderr 

- reference 

Bash coding style guide: https://bluepenguinlist.com/2016/11/04/bash-scripting-tutorial/
KISS: https://people.apache.org/%7Efhanik/kiss.html

Keep It Stupid Simple or Keep It Simple, Stupid

Enter the read command. The basic usage of read looks at input from the command line, and stores it in the REPLY variable.

- exit code 

exit codes or return codes, is the way Bash communicates the successful or unsuccessful termination

- variable refresher 
```
DIRECTORY=/tmp/

# Test if the /tmp/ directory exists using the full command:
test -d ${DIRECTORY}
test_rc=$?
```

bash -x test-shorthand-variable.sh. In this case, the -x flag tells Bash to print commands and their arguments as they are executed

- if then exit 

if [[ -f /tmp/file ]]; then do-something -> do-something is executed if the file /tmp/file exists

if [[ -f ${file_name} ]]; then
  cp /dev/null ${file_name}
else
  touch ${file_name}
fi

- short hand syntax 

logical operators:
true && echo "We get here because the first part is true!"

- required, and [] if they're optional (which they are if they have a default value, for instance, which we will see at the end of this chapter).

- dealing with y/n 

five ways a user could give us a yes: y, Y, yes, YES, and Yes.

```
read -p "Do you like this question? " reply_variable

# See if the user responded positively.
if [[ ${reply_variable} = 'y' || ${reply_variable} = 'Y' || ${reply_variable} = 'yes' || ${reply_variable} = 'YES' || ${reply_variable} = 'Yes' ]]; then
  echo "Great, I worked really hard on it!"
  exit 0
fi

# Maybe the user responded negatively?
if [[ ${reply_variable} = 'n' || ${reply_variable} = 'N' || ${reply_variable} = 'no' || ${reply_variable} = 'NO' || ${reply_variable} = 'No' ]]; then
  echo "You did not? But I worked so hard on it!"
  exit 0
fi

```

```
read -p "Do you like this question? " reply_variable

# See if the user responded positively.
if [[ ${reply_variable,,} = 'y' || ${reply_variable,,} = 'yes' ]]; then
  echo "Great, I worked really hard on it!"
  exit 0
fi

# Maybe the user responded negatively?
if [[ ${reply_variable^^} = 'N' || ${reply_variable^^} = 'NO' ]]; then
  echo "You did not? But I worked so hard on it!"
  exit 0
fi
```

- reference 

The test command: http://wiki.bash-hackers.org/commands/classictest
Bash debugging: http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_02_03.html
Logical operators: https://secure.php.net/manual/en/language.operators.logical.php



# Regular expression 
- use grep 

Usage: grep [OPTION]... PATTERN [FILE]...
Search for PATTERN in each FILE or standard input.
PATTERN is, by default, a basic regular expression (BRE).
Example: grep -i 'hello world' menu.h main.c

Regexp selection and interpretation:
  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)
  -F, --fixed-strings       PATTERN is a set of newline-separated strings
  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)
  -P, --perl-regexp         PATTERN is a Perl regular expression
  -e, --regexp=PATTERN      use PATTERN for matching
  -f, --file=FILE           obtain PATTERN from FILE
  -i, --ignore-case         ignore case distinctions
  -w, --word-regexp         force PATTERN to match only whole words
  -x, --line-regexp         force PATTERN to match only whole lines
  -z, --null-data           a data line ends in 0 byte, not newline

Miscellaneous:
  -s, --no-messages         suppress error messages
  -v, --invert-match        select non-matching lines
  -V, --version             display version information and exit
      --help                display this help text and exit

Output control:
  -m, --max-count=NUM       stop after NUM matches
  -b, --byte-offset         print the byte offset with output lines
  -n, --line-number         print line number with output lines
      --line-buffered       flush output on every line
  -H, --with-filename       print the file name for each match
  -h, --no-filename         suppress the file name prefix on output
      --label=LABEL         use LABEL as the standard input file name prefix
  -o, --only-matching       show only the part of a line matching PATTERN
  -q, --quiet, --silent     suppress all normal output
      --binary-files=TYPE   assume that binary files are TYPE;
                            TYPE is 'binary', 'text', or 'without-match'
  -a, --text                equivalent to --binary-files=text
  -I                        equivalent to --binary-files=without-match
  -d, --directories=ACTION  how to handle directories;
                            ACTION is 'read', 'recurse', or 'skip'
  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;
                            ACTION is 'read' or 'skip'
  -r, --recursive           like --directories=recurse
  -R, --dereference-recursive  likewise, but follow all symlinks
      --include=FILE_PATTERN  search only files that match FILE_PATTERN
      --exclude=FILE_PATTERN  skip files and directories matching FILE_PATTERN
      --exclude-from=FILE   skip files matching any file pattern from FILE
      --exclude-dir=PATTERN  directories that match PATTERN will be skipped.
  -L, --files-without-match  print only names of FILEs containing no match
  -l, --files-with-matches  print only names of FILEs containing matches
  -c, --count               print only a count of matching lines per FILE
  -T, --initial-tab         make tabs line up (if needed)
  -Z, --null                print 0 byte after FILE name

Context control:
  -B, --before-context=NUM  print NUM lines of leading context
  -A, --after-context=NUM   print NUM lines of trailing context
  -C, --context=NUM         print NUM lines of output context
  -NUM                      same as --context=NUM
      --color[=WHEN],
      --colour[=WHEN]       use markers to highlight the matching strings;
                            WHEN is 'always', 'never', or 'auto'
  -U, --binary              do not strip CR characters at EOL (MSDOS/Windows)
  -u, --unix-byte-offsets   report offsets as if CRs were not there
                            (MSDOS/Windows)

'egrep' means 'grep -E'.  'fgrep' means 'grep -F'.
Direct invocation as either 'egrep' or 'fgrep' is deprecated.
When FILE is -, read standard input.  With no FILE, read . if a command-line
-r is given, - otherwise.  If fewer than two FILEs are given, assume -h.
Exit status is 0 if any line is selected, 1 otherwise;
if any error occurs and -q is not given, the exit status is 2.

Report bugs to: bug-grep@gnu.org
GNU grep home page: <https://www.gnu.org/software/grep/>
General help using GNU software: <http://www.gnu.org/gethelp/>