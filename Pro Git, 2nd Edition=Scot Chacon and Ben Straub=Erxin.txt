Pro Git, 2nd Edition=Scot Chacon and Ben Straub=Erxin

# introduction 
- short history of git, linux kernel is an open source software project of fairly large scope 
	+ speed
	+ simple design 
	+ strong support for non-linear development 
	+ fully distributed 
	+ able to handle large projects like linux kernel 
- nearly every operation is local 
- git has history, git use checksumming is called SHA-1 hash 
- git generally only add data 
- git have three states 
working directory	   staging area		.git directory(repository)
|<-------checkout the project---------------------------|
|--------stage fixes------>|							|
|						  |-------commit-------------->|

- install git 
	+ on linux 
	$ yum install git 
	or 
	$ apt-get install git 
	
	+ install on window 
	http://mysygit.github.io
	http://windows.github.com 
	
	+ install from source , you need to have following libraries that git depends on 
	curl, zlib, openssl, expat and libiconv 
	
	install dependency on linux 
	$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel
	
	$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev 
	
- first time git setup 
/etc/gitconfig, contains values for every user 
~/.gitconfig or ~/.config/git/config, configuration for single user 
config file in the git directory 

on window 
$home(c:\users\$user)

- setup your identity 
$ git config --global user.name name 
$ git config --global user.email xx@email.com 

- configure editor 
$ git config --global core.editor emacs 

- checking your setting 
$ git config --list 

- get help 
$ git help <verb>
$ git <verb> --help 
$ man git-<verb>


# git baiscs 
- initializing a repository in an existing directory 
$ git init 

- add track file 
$ git add *.c 
$ git commit -m "comments"
	
- clone a existing repository git receives a full copy of nearly all data that the server has. in svn it is called checktout 
$ git clone https://uri, 


- checking the status of your files 
$ git status 

- tracking new file 
$ git add file_uri

- short status 
$ git status -s 
A, for new file 
M, for modified file 
??, aren't track file 

- ignoring files, ignore files are list at .gitignore which support wild card matching 
	+ Blank lines or lines starting with # are ignored.
	+ Standard glob patterns work.
	+ You can end patterns with a forward slash (/) to specify a directory.
	+ You can negate a pattern by starting it with an exclamation point (!).

	+ glob pattern 
	Glob patterns are like simplified regular expressions that shells use. An asterisk
	(*) matches zero or more characters; [abc] matches any character inside
	the brackets (in this case a, b, or c); a question mark (?) matches a single character;
	and brackets enclosing characters separated by a hyphen([0-9]) matches
	any character between them (in this case 0 through 9). You can also use two
	asterisks to match nested directories; a/**/z would match a/z, a/b/z,
	a/b/c/z, and so on.

- check difference 
$ git diff [file1_uri] [file2_uri]

$ git diff --staged
will compare your staged changes to your last commit 

$ git diff --cached 
check what you've staged so far 

- check avaliable diff tools 
$ git diff --tool-help 

- commit your changes 
$ git commit [-m "message"]

- skipping the staging area 
$ $ git commit -a -m 'added new benchmarks'

- removing files, remove it from your staging area and untracked the file. it also removes the file from your working directory 
$ rm file-name 
$ git commit 

$ git rm file-name 

- remove the file from tracking but keep it in the working tree 
$ git rm --cached file-name 

- move files 
$ git mv file-path new-path 

- viewing the commit history 
$ git log 

- see more specific information 
$ git log --stat 

- see in oneline 
$ git log --pretty=oneline 

also support custom format 
$ git log --pretty=format:"%h - %an, %ar : %s" 

- limiting log output 
$ git log --since=2.weeks 

	+ search commit message contain a specific string 
$ git log -Ssearch-for-string 

	+ other options 
| -(n)
| --since, --after 
| --until, before 
| --author 
| --committer, only show commits in which the committer entry matches the specific string 
| --grep, only show commits with a commit message contain a string 
| -S, only show commits adding or removing code matching the string 

- undoing things 
	+ when you commit too early and possibly forget to add some files, or you mess up your commit message. if want to try that commit again by 
	$ git commit --amend 
	
	after this command git allow you edit or change the previous commit in the staging area 
	
- unstaging a staged file 
$ git reset HEAD <file-name> 

calling git reset without option will not touch your working directory only effect the stage 

- unmodifying a modified file, revert it to unchanged 
git checkout -- <file-name> 

it is a dangour operation 

- working with remotes 
	+ show remotes 
	$ git clone uri 
	default remote name is origin, and clone command will also auto set up your local master branch to track the remote master branch 
	
	$ git remote 
	
	$ git remote -v 
	will display the relative uri of the git repo 
	
	your git repo may have several remotes 
	
	+ adding remote repositories 
	$ git remote add remote-name uri 
	
	the name could be display by 
	$ git remote -v 
	
	update a remote by 
	$ git fetch remote-name

	+ pushing to your remotes 
	$ git push origin master 
	
	+ inspecting a remote, see more information about a particular remote 
	$ git remote show [remote-name] 
	
	+ remote and rename remote 
	$ git remote rename origin-name new-name 
	
	$ git remote rm remote-name 
	
- tagging 
	+ listing your tags 
	$ git tag 
	
	+ search for tag 
	$ git tag -l 'pattern'
    
    + check current tag 
    $ git tag --points-at HEAD
    http://git-blame.blogspot.com/2013/06/checking-current-branch-programatically.html
	
- create tags, support two main types, lightweight and annotated 
	+ lightweight is like a branch that doesn't change 
	
	+ annotated tags are checksummed, stored as full objects in git database. it can be signed and verified with GNU privacy guard 
	
	+ annotated tags 
	$ git tag -a v1.4 -m "message" [checksum]
	
	see the tag data along with the commit by 
	$ git show v1.4 
	
	+ lightweight tag, basically a commit checksum without other information 
	$ git tag v1.4-lw  [checksum]
	
	+ sharing tags 
	$ git push origin tag-name 
	
	push all tags at once 
	$ git push origin --tags 
	
	+ checkout tags 
	$ git checkout -b branch-name tag-name 
	
	will checkout and create a new branch for the specify tag 
	
	+ git aliases 
	$ git config --global alias.co checkout 
	$ git config --global alias.br branch 
	...
	
	for the previous unstage a file, you could create a custom alias by 
	$ git config --global alias.unstage 'reset HEAD --' 
	
	for last commit 
	$ git config --global alias.last 'log -1 HEAD'
	
- visual tool 
gitk 


# Git branching 
- create a new branch 
$ git branch branch-name 

- show where the branch pointers are pointing
$ git log --oneline --decorate 
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project

you can see the master and testing branch are right there next to the f30ab commit 

- switching branch 
$ git checkout branch-name 

- see where your branch pointers are and how your history has diverged 
$ git log --oneline --decorate --graph --all 

- basic branching and merging workflow 
	+ do your work 
	+ create a branch for a new story 
	+ do some work in that branch 
	
- you receive a call that another issue is critical and you need a hotfix you will do 
	+ switch to production branch 
	+ create a branch to add the hotfix 
	+ after it's tested, merge the hotfix branch and push to production 
	+ switch back to your original story and continue working 
	
- basic branching 
	+ checkout and create a branch in one line of command 
	$ git checkout -b branch-name 
	
	shorthand for 
	$ git branch branch-name 
	$ git checkout branch-name 
	
	+ merge a branch to current working branch 
	$ git merge branch-name 
	
	+ fast-forward merge is means no divergent work to merge together, git just need to move the commit object pointer 
	
	+ delete a branch 
	$ git branch -d 

- basic merging 
	+ simple merge branch 
	$ git merge branch-name 
	
	+ merge conflicts 
	
	conflict file content example:
	<<<<<<< HEAD:index.html
	<div id="footer">contact : email.support@github.com</div>
	=======
	<div id="footer">
	please contact us at support@github.com
	</div>
	>>>>>>> iss53:index.html

	this means the version in head is the top part of that block everything above the ====; everything in your branch iss53 is below 
	
	run git add on each file to mark it as resolved 
	
	+ use a graphic merge tool 
	$ git mergetool 
	
	$ git mergetool --tool=<tool>
	there are several built-in merge tool avaliable 
	
	check the avaliable tools by 
	$ git mergetool --tool-help 
	
	custom merge tool by git config 
	$ git config merge.tool <tool>
	
	if want to custom a non built-in merge by set the mergetool.<tool>.cmd 
	
- branch management 
	+ list branches 
	$ git branch 
	
	+ check branch with last commit 
	$ git branch -v 
	
	+ check which branches are already merged into the branch you're on 
	$ git branch --merged 
	
	not merged 
	$ git branch --no-merged 
	
	+ delete branch with -d will not delete the branch which is not complete merged. if want to delete force by -D 
	
- long-running branches 
master 
develop 
topic 

the basic idea of multiple long-running branches is seperate the stability level 

- remote branches, are the references to the state of branches in your remote repositories. 

- create a different default remote branch name, origin and master doesn't have special meaning in git. they are just default names for git clone from remote repo 

$ git clone -o booyah uri 
will have booyah/master branch created in the cloned local repo 

- pushing 
$ git push remote-name branch-name

	+ don't type your password every time, setup a credential cache 
	$ git config --global credential.helper cache 
	
- tracking branches, checkout a local branch from a remote branch automatically creates what is called a "tracking branch"

$ git checkout --track remote-name/branch-name 
switch tracking branch to a remote branch 

$ git checkout -b branch-name remote-name/branch-name 
set up local branch name which could be different from remote branch name 

$ git branch -u remote-name/branch-name
change the upsteam branch you're tracking, use -u or --set-upstream-to option 

	+ when you have an tracking branch, you can reference it with the @{upstream} or @{u}. you could use 
	$ git merge @{u}
	equal to 
	$ git merge remote-name/branch-name
	
	+ check what tracking branches you have setup with -vv 
	$ git branch -vv 
	
	+ update all the branches from remote 
	$ git fetch --all 
	
- pulling, is a shorthand for fetch and merge 
$ git pull 
equal to 
$ git fetch 
$ git merge 

- deleting remote branches 
$ git push remote-name --delete branch-name 

- rebasing, in git there are two main ways to integrate changes from one branch into an other, the merge and the rebase 

	+ merge is a three way merge between the two latest branches and create a new snapshot 
		c2<-
		/	   \
	  v		   \
	c0 <- c1<--C3 
	
	+ rebase, take a branch's commits and reapply each commit after another branch 
	
	c0<-C1<-c2<-c3 
	
	example 
	$ git checkout branch0
	$ git rebase branch1
	
	after rebasing we could swith to the branch1 then it is a after forward merge 
	$ git checkout branch1 
	$ git merge branch0 
	
	+ there is not different of the finally merged code but rebase make a clear history 
	
	often you'll do this to make sure your commits apply cleanly on a remote branch -perhaps in a project to which you're trying to contribute but that you don't maintain 
	
	+ more, you can have your rebase replay on something other than the rebase target branch. for example want to merge the client branch into master we could simply do 
	
	c0 <- c1 <- c2  master 
			  A
				\- c3 <- c4 <- c5  server 
							  A 
								\- c6 <- c7 client 
								
	$ git rebase --onto master server client 
	this command means check out the branch client and figure out the patches from the common ancestor of the client and server branches and then replay them on master. 
	after this we could do a rebase client on master branch to simply merge the remain client checkins 
	$ git checkout master 
	$ git merge client 
	
	+ the perils of rebasing, do not rebase commits that exist outside your repository 
	
	when rebase stuff, you are abandoning existing commits and creating new ones 
	
	example, if you push commits somewhere and other pull them, you rewrite those commits  with git rebase and push them to up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours 
	
	git could handle this kinds of issue by 
	$ git pull --rebase 
	this only work when the rebase check patches are almost the same 
	
	can set git config --global pull.rebase true to add --rebase parameter as default for pull command 
	
- rebase vs. merge 
	+ history 
	one point of view, it is a record of what actually happend, merge will give you this 
	
	the opposing point of view is that it's the story of how your project was made, you don't publish the first draft of a book, the manual for how to maintain your software deserve careful editing, rebase will give you this 
	
	
# Git on the server 
- running a git server 
	+ choose a protocol 
	+ a remote repo is generally a bare repository a git repository that has no working directory. it's the content of your project's .git directory and nothing else 
	
- protocol 
	+ local protocol, the most basic, it is a repo exist in another directory on disk 
	
	$ git clone /opt/git/project.git
	access by file path or add file:///
	$ git clone file:///opt/git/project.git
	
	add a local repository to an existing git project 
	$ git remote add local_proj /opt/git/project.git 
	
	+ http protocols
	smart http operates very similarly to the ssh or git protocols but runs over standard http/s ports. ca use various http authentication 
	git://, https://, http://
	
	+ ssh protocol it is common to use when self-hosting. ssh://url 
	$ git clone ssh://user@password:project.git 
	
	+ git protocol, listen on 9418, similar to ssh but no authentication. you must create the git-daemon-export-ok file or the daemon won't serve a repository without that file 
	
- getting git on server 
$ git clone --bare project-repo-uri project-name.git 

	+ put the .git bare repo on server 
	
- git protocol, you need to run this command in a daemonized manner git daemon --reuseaddr --base-path=/opt/git/ /opt/git/
	
- setup a simple webbased visualizer for git, git comes with a cgi script called gitweb 
	
	+ on mac with ruby 
	$ git instaweb --httpd=webrick 
	
	stop the gitweb 
	$ git instaweb --httpd=webrick --stop

- gitlab, https://bitnami.com/stack/gitlab 

- third party host options, https://git.wiki.kernel.org/index.php/GitHosting


# Distributed git 
- distributed git workflow. it is wide used in GitHub or GitLab 
	+ the project maintainer pushes to their public repository 
	+ a contributor clones that repository and makes changes 
	+ the contributor pushes to their own public copy 
	+ the contributor sends the maintainer an email asking them to pull changes 
	+ the maintainer adds the contributor's repo as a remote and merges locally 
	+ the maintainer pushes merged changes t the main repository 
	
- dictator and lieutenants workflow which is used in linux kernel development 
	+ regular deveopers work on their topic branch and rebase their work on top of master. the maste branch is that of the dictator 
	+ lieutenants merge the developers' topic branches into their master branch 
	+ the dictator merges the lieutenantss master branches into the dictator's master branch 
	+ the dictator pushes their master to the reerence repository so the other developers can rebase on it 
	
this kind of workflow isn't common but can be useful in very big projects 

- check whitespace errors before commit during collaboration 
$ git diff --check 
it will identify possible whitespace erros and lists them for you 

- push into another remote branch 
$ git push -u remote-name branch-name 

 push branch from featureB branch to remote featureBee branch by 
 $ git push -u origin featureB:featureBee 

- when your branch's work is finished you're ready to contribute it back to the maintainers. go to the origin project page and click the "fork" button, create your own writable fork of the project 

ad it in the new repository url 
$ git remote add myfork url 

push your work into the fork, it's easiest to push the topic branch you're working on up to your repository rather than merging into your master 

if the work isn't accepted or is cherry picked you don't have to rewind your master branch 
$ git push -u myfork featureA 

this is often called a pull request and you can either generate it via the website. git hub has it's own pull request or you can run the git request-pull command and email the output to the project maintner manually 

request-pull command takes the base branch into which you want your topic barnch pulled 
$ git request-pull orgin/master myfork 
The following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:
John Smith (1):
added a new function
are available in the git repository at:
git://githost/simplegit.git featureA
Jessica Smith (2):
add limit to log function
change log output to 30 from 25
lib/simplegit.rb | 10 +++++++++-
1 files changed, 9 insertions(+), 1 deletions(-)

- takes all work on the merged branch and squashes it into one non-merge commit on top of the branch you're on 
$ git checkout -b featureBv2 origin/master 
$ git merge --no-commit --squash featureB 

- public project over email 
$ git format-patch -M origin master 
prints out the names of the patch files it creates the -M switch tells Git to look for renames 
	
- maintain a project 
- applying patches from e-mail 
$ git apply /tmp/patch-ruby-client.patch 

- you can also use git apply to see if a patch applies cleanly before you try actually applying it 
$ git apply --check *.patch 

if someone uploaded a patch fle generated via format-patch to a ticketing system or something similar you can save the file locally and then pass the file saved on your disk to git am to apply it 
$ git am *.patch 

- determining what is introduced 
$ git log contrib --not master 

- figure out the common ancestor and then running your diff 
$ git merge-base contrib master 

- integrating contributed work 
- merging workflows 
	
- rebasing and cherry picking workflows, a cherry-pick in git is like a rebase for a single commit. it takes the patch that was introduced in a commit 

- rerere, git has a feature called "rerere" that can help you doing lots of merging and rebasing 

rerere is enabled git will keep a set of pre and post images from succeful merges and if it notices that there's a conflict that looks exactly like one you've already fixed, it'll just use the fix from last time 

    + configure setting and a command 
    $ git config --global rerere.enabled true 
    
    + interact with the rerere cache using the git rerere command 
    
- tagging your releases 
    + public PGP key used to sign your tag by including public key as a blob in the repository 
    
    figure out which key you want by running 
    $ gpg --list-keys 
    pub 1024D/F721C45A 2009-02-09 [expires: 2010-02-09]
    uid Scott Chacon <schacon@gmail.com>
    sub 2048g/45D02282 2009-02-09 [expires: 2010-02-09]
    
    $ gpg -a --export F721C45A|git hash-object -w --stdin 
    
    import the key by 
    
- generate a build number, git doesn't have monotoically increasing numbers like v123. 
$ git describe master 
git you the name of the nearest tag with the number of commits on top to that tag 

git describe command favors annotated tag 

- prepraing a release, create an archive of the latest snapshot of your code for those poor souls 
$ git archive master --prefix='project/' | gzip > `git describe master`.tar.gz 
$ ls *.tar.gz 

we could also create a zip by pass zip in --format option 
$ git archive master --prefix='project/' --format=zip > `git describe master`.zip

- the shortlog, email your mailing list of people who want to know what's happening in your project 

$ git shortlog --no-merges master --not v1.0.1 
it summarizes all the commits in the rang you give it 


# GitHub 
- account setup 
- ssh accesses using https://protocol support add ssh key in the github account management page 
- your avatar 
- your email 
- two factor authentication 
- contribute to a project 
    + forking projects 
- github flow 
    + create a topic branch from the master 
    + make some commits to improve the project 
    + push this branch to your github project 
    + open a pull request on github 
    + discuss and optionally continue committing 
    + the project owner merges or closes the pull request 
    
- creating a pull request 
    + fork a exsting project 
    + clone the fork 
    + make the changes 
    + commit 
    + push back to github fork repo 
    + open a pull request to the original project 
    + the maintainer could makes comment to the relative pull request 
    + eventually the request will be either closed or merged 
    
- github markdown 
    + coe snippet 
```
    codes....
```

    + quote 
>...
>...

- create a new project 
    + adding collaborators, it the other people which you give commit access to 
    + managing pull request 
    + email notification 

- special files 
README
CONTRIBUTING, it is used to specify things you want when people open a pull request 

- transferring a project to other people 
- managing an orgnization, have a namespace where all their projects exists. it is easy to create from your github account management page 
- teams 
- script github 
    + hooks, specify a url github will post an http payload to that url 
    + services 

- github api 
    + basic 
    $ curl https://api.github.com/users/schacon 
    

# Git tools 
- revision selection 
    + short SHA
    + SHA-1 
    
- commit ranges 
    + double dot, ask git to resolve a range of commits 
    $ git log master...experiment
    
    git master and experiment are different break this will show the non merged commits from experiment to master 
    
    equal to 
    $ git log refA...refB 
    $ git log ^refA refB 
    $ git log refB --not refA 
    
    + multiple point, if you want to see all commits that are reachable from refA or refB but not from refC 
    $ git log refA refB ^refC 
    
    + triple dot, reage-selection syntax, specifies all the commits that are reachable by either of two references but not by both of them 
    $ git log refA...refB 
    
    switch to use with log with --left-right show you which side of the rage each commit is 
    
- interactie staging 
- stash 
$ git stash 
$ git stash apply 
$ git stash --list 
$ git stash apply --index index 
$ git stash drop stash-name/index 

- create a branch from a stash 
$  git stash branch testchanges 

- clean working directory 
$ git clean -d -n 

- gpg introduction 
    + get gpg configured and your personal key installed 
    $ gpg --list-keys 
    $ gpg --gen-key 
    $ git config --global user.signingkey private-key 
    
    then git will use your private key to sign the tag 
    
    + verifying tags 
    $ git tag -v tag-name 

- everyone must sign 
- git grep allows you easily search through any committed tree or the working directory for a string or regular expression 
$ git grep -n string 

- git log searching, looking for a tern exists 
$ git log -L :function_in_source:source-file-name 
will check all the function change history in a relative file 

- changing the last commit 
    + git commit --amend 
    + changing multiple commit message by rebase 
    $ git rebase -i HEAD~3 
    
    use git rebase --continue 

    + reordering commits could also be complete by interactive rebase 
- squashing commits 
    + instead of pick or edit you specify squash to git will applies both changes and merge the messages 
    
pick 
reword 
edit 
squash 
fixup 
exec 
drop

- filter-branch, history-rewriting option that you can use if you need to rewrite a larger number of commits in some scriptable way. use filter-branch 

- abort merge 
$ git merge --abort 

- merge ignore whitespace 
$ git merge -Xignore-all-space whitespace 

- checking out conflicts 
- undo merging use reset --hard HEAD~
- reverse the commit
$ git revert -m 1 HEAD 

- git diff-tree 

- rerere functionality, it is standas for reuse recorded resolution 
$ git rerere status 

- debug with git 
$ git blame -L 12,22 simplegit.rb 
the parameter -L means line number 

- binary search 
$ git bisect start 
$ git bisect bad 
$ git bisect good v1.0 

git will figure out that how many commits came between the commit you marked as the last good commit 

git will checkout middle one for you and you could run your test and if it is good then you could use 
$ git bisect good 
to continue search 
if it is bad then use 
$ git bisect bad 
to continue until you find the bad commit 

after finish you could use 
$ git bisect reset 

- submodules, submodules allow you to keep a git repository as a subdirectory of another 

    + starting with submodules, it is easy to split up main project and a few sub-projects 
    $ git submodule add uri 
    
    check the module information from 
    $ cat .gitmodules 
    
    + cloning a project with submodules 
    $ git clone main-project-uri 
    
    the submodule directory will be create by keep emtyp untill run 
    $ git submodule update 
    to fetch all the data from that project and check out the commit listed 
    $ git submodule update 
    
    + simplify clone a project with several submodules 
    $ git clone --recursive uri 
    
- work with project with submodules 
    + pulling in upstream changes 
    $ git fetch 
    
    check difference 
    $ git diff --submodule 
    
    set the default format by setting diff.sumodule from git config to log 
    
    + easy way to do is 
    $ git submodule update --remote submodule-name 
    
    automatic update submodule and merge for you 
    
- working on a submodule 
$ git submodule update --remote --merge 

update submodule 
$ git submodule update --remote --rebase 

- publish submodule changes  
$ git push --recurse-submodules=check 

$ git push --recurse-submodules=on-demand 
will push submodule first 

- merge submodule changes 
$ git pull 

- submodule foreach to run some arbitrary command in each submodule 
$ git submodule foreach 'git stash'

- useful alias 
$ git config alias.sdiff '!'"git diff && git submodule foreach 'git diff'"
$ git config alias.spush 'push --recurse-submodules=on-demand'
$ git config alias.supdate 'submodule update --remote --merge'

- bundling, bundling it's data into single file 
$ git bundle create repo.bundle HEAD master 
you will have a file named repo.bundle which has all the data needed to recreate the repository's master branch 

- have a list of commits we want to include in the bundle 
$ git bundle create commits.bundle master ^9a466c5 

- validate bundle 
$ git bundle verify ../commits.bundle 

- replace, provide a way to pretend to replace objects in it's database with other objects 
$ git replace refA refB 
we could be able to replace one commit in our history with an entirely different commit.

- credential storage, use ssh transport for connecting to remote 
$ git config --global credential.helper cache 

$ git config --global credential.helper store --file ~/.my-credentials
save to file 

to prevent prompt ask for user/password when operate on a ssh connection 

- under the hood 
$ git credential fill 
git will try to find credentials for a host 


# Customizing git 
- git config 
$ git config --global 

- core.pager 
$ git config --global core.pager '' 

default is less

- user.signingkey 
$ git config --global user.signingkey <gpg-key-id> 

$ git tag -s <tag-name>

- git core.execludesfile, put pattern in .gitignore file 

- color in git 
$ git config --global color.ui false 

- merge tool 
$ git mergetool --help 

config mergetool 
$ git config --global merge.tool kdiff3 

- formatting and whitespace 
$ git config --global core.autocrlf  true 

$ git config --global core.autocrlf input

- server configuration 
    + receive.fsckobjects make sure each object received is match it's SHA-1 checksum 
$ git config --system receive.fsckObjects true

    + deny fast forward 
    $ git config --system receive.denyNonFastForwards true 
    
    force use rebase 
    
    + prevent delete 
    $ git config --system receive.denyDeletes true 
    
- git hooks 
    + install a hook 

    
# Git and Other systems 
- interactive with svn 
$ git svn 
- migrate from subversion to git 

# Git internals 
# Git in other environment 
# Embedding git in your app 
- git command line 
- Libgit2 is independent from git 
- JGit 

# Git commands 
- setup and config 
git config 
git help 

- getting and creating 
git init 
git clone

- basic snapshotting 
git add 
git status 
git diff 
git difftool 
git commit 
git reset, use to undo things it moves around the head pointer and optionally changes index or staging area and can also optionally change the working directory if you use the --hard 
git rm, use to remove file 
git mv 
git clean 

- branching and merging 
git branch 
git checkout 
git merge 
git mergetool 
git log 
git stash 
git tag 

- sharing and updating projects 
git fetch 
git pull
git push 
git remote 
git archive, used to create an archive file of a specific snapshot of the project such as tarball 
git submodule 

- inspection and comparison 
git show 
git shortlog 
git describe, used to take anything that resolves to a commit and produces a string that is somewhat human-readable and wil lnot change 

- debugging 
git bisect 
git blame 
git grep 

- patching 
git cherry-pick 
git rebase 
git revert, is essentially a reverse git cherry-pick it creates a new commit that applies the exact opposite of the change introduced in the commit you're targetting essentially undoing or reverting it 

- email 
git apply, applies a patch created with git diff or even gnu diff command 
git am, used to apply patches from an email box 
git format-patch, used to generate a series of patches in mbox format that you can use to send to a mailing list properly formatted 
git send-mail, used to send patches that are generated with git format-patch over email 
git request-pull, simply used to generate an example message body to mail to someone 

- external system 
git svn 
git fast-import, importing from nearly any format you can use git fast-import to quickly map the other format to something git can easily record 

- administration 
git gc, run garbase collection on your repository 
git fsck, command is used to check the internal database for problems or inconsistencies 
git reflog, goes through a log of where all the heads of your branches have been as you work to find commits you may have lost through rewriting histories 
git filter-branch, used to rewrete loads of commits according to certain patterns like removing a file everywhere or filtering the entire repository down to a single subdirectory for extracting a project 

- plumbing commands, lower level plumbing commands 
ls-remote in pull request refs 
ls-files in manual file remerging, rerere and the index to take more raw look at what your staging area looks like 



# Magic git, Stanford git tutorial 
http://www-cs-students.stanford.edu/~blynn/gitmagic/index.html



# Switch git to use lf ending on window 
git config core.autocrlf false
git config core.eof lf
git rm --cached -r .
git reset --hard



# Check branch upstream 
git branch -vv   # doubly verbose!



# Git delete remote branch 
$ git push --delete <remote-repository> <branch-name> 

# git list all branch include remote 
git branch -a


# git configure merge and diff to external tool such as beyond compare
- add configuration to global 
```
diff.tool=bc3
merge.tool=bc3
mergetool.bc3.path=C:\Program Files\Beyond Compare 4\BCompare.exe
difftool.bc3.path=C:\Program Files\Beyond Compare 4\BCompare.exe
```

$ git config --global diff.tool bc3 
$ git config --global difftool.bc3.path=<beyondcompare path>















