CSS MDN document;Note=Erxin

# Reference 
- mdn url 
https://developer.mozilla.org/en-US/docs/Web/CSS

# Introduction 
- Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML or XML

ou might have heard about CSS1, CSS2.1, CSS3. However, CSS4 has never become an official version

- last stable css 
https://www.w3.org/TR/css/

# Css basic 
- anatomy of a css ruleset 
Selector {
    rule_property:value_expression;
}

    + example 
p {
  color: red;
  width: 500px;
  border: 1px solid black;
}

- type of selectors 
    1. elementTagName

    2. #id 
    
    3. .className
    
    4. attribute with element, elementTagName[attribute]
    
    5. Pseudo-class selector
    
- fonts and text, find the output from google fonts

html {
  font-size: 10px; /* px means "pixels": the base font size is now 10 pixels high  */
  font-family: "Open Sans", sans-serif; /* this should be the rest of the output you got from Google fonts */
}

- css all about boxes 

padding, the space around the content 

border, the solid line that is outside the padding 

margin, the space around the outside of the border 

- position 

horizontal offset 

vertical offset 


# Get start with css 
- add css to dock 

<link rel="stylesheet" href="styles.css">

//file styles.css 
h1 {
    color: red
}

- change default behavior of element 

li {
  list-style-type: none;
}

- adding a class 
<li class="special">Item two</li>

- styling things based on their location in a document 

    + selector called the descendant combinator
li em {
  color: rebeccapurple;
}

    +  (an adjacent sibling combinator) 
    
h1 + p {
  font-size: 200%;
}

    + base on state 
    
a:link {
  color: pink;
}

    + combine multiple selectors and combinators together. 
body h1 + p .special {
  color: yellow;
  background-color: black;
  padding: 5px;
}

# Applying css to html 
- external file 
<link rel="stylesheet" href="styles.css">

- internal element 

    <style>
      h1 {
        color: blue;
        background-color: yellow;
        border: 1px solid black;
      }

      p {
        color: red;
      }
    </style>
    
- inline attribute 

<h1 style="color: blue;background-color: yellow;border: 1px solid black;">Hello World!</h1>


# How css works 
- process 
    1. the browser load the HTML 
    2. convert the html to DOM 
    3. fetches resources and than handle JS
    4. parser the fetched css and sorts the different rules by their selector types into different buckets 
    5. render tree is laid out in the structure 
    6. visual display of the page is shown on the screeen 

- browser will ignore the rules it is not understand 


# Cascade and inheritance
- cascade, and the closely-related concept of specificity, are mechanisms that control which rule applies when there is such a conflict.

when two rules apply that have equal specificity the one that comes last in the CSS is the one that will be used.

h1 { 
    color: red; 
}
h1 { 
    color: blue; 
}
    
//blue win 
- Specificity is how the browser decides which rule applies if multiple rules have different selectors
    + An element selector is less specific 
    + A class selector is more specific 
<h1 class="main-heading">This is my heading.</h1>

.main-heading { 
    color: red; 
}
        
h1 { 
    color: blue; 
}
   
//red win 
    
- inheritance, which means that some CSS properties by default inherit values set on the current element's parent element

some CSS property values set on parent elements are inherited by their child elements, and some aren't.

color and font-family on an element, every element inside it will also be styled with that color and font
    + inherited properties 
    https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance#Inherited_properties
    
    the element gets the computed value of that property on its parent element.
    
    + non-inherited properties 
    https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance#Non-inherited_properties
    
    the element gets the initial value of that property 

- controlling inheritance, CSS provides four special universal property values for controlling inheritance. Every CSS property accepts these values

    + inherit, Sets the property value applied to a selected element to be the same as that of its parent element. 
    + initial, selected element to the initial value of that property.  default value, as listed in its definition table in the specification. 
    + unset, Resets the property to its natural value, which means that if the property is naturally inherited it acts like inherit, otherwise it acts like initial.
    + Revert, some of the browser support this
    
body {
    color: green;
}
          
.my-class-1 a {
    color: inherit;
}
          
.my-class-2 a {
    color: initial;
}
          
.my-class-3 a {
    color: unset;
}

- resetting all property values, with all short hands

blockquote {
    background-color: red;
    border: 2px solid green;
}
        
.fix-this {
    all: unset;
}

- understanding the cascade
    + three factors to consider 
    
    source roder 
    
    specificity 
    
    importance 
    
    + source order, same rule, same weight then last in the css win 
    
    + higher specifity win, The amount of specificity a selector has is measured using four different values
    
    Thousands: Score one in this column if the declaration is inside a style attribute, aka inline styles
    
    Hundreds: Score one in this column for each ID selector contained inside the overall selector
    
    Tens: Score one in this column for each class selector, attribute selector, or pseudo-class
    
    Ones: Score one in this column for each element selector or pseudo-element contained inside the overall selector.
    
        * example evaluation process 
        
Selector	                                                    Thousands	Hundreds	Tens	Ones	Total specificity
h1	                                                            0	        0	        0	    1	        0001
h1 + p::first-letter	                                        0	        0	        0	    3	        0003
li > a[href*="en-US"] > .inline-warning	                        0	        0	        2	    2	        0022
,#identifier	                                                0	        1	        0	    0	        0100
No selector, with a rule inside an element's style attribute	1	        0	        0	    0	        1000
    
    + overrule all of the above calculations, however, you should be very careful with using it — !important
.better {
    background-color: gray;
    border: none !important;
}

- css override rules in browser 

Declarations in user agent style sheets (e.g. the browser's default styles, used when no other styling is set).
Normal declarations in user style sheets (custom styles set by a user).
Normal declarations in author style sheets (these are the styles set by us, the web developers).
Important declarations in author style sheets
Important declarations in user style sheets


# Css selectors  
- It is a pattern of elements and other terms that tell the browser which HTML elements should be selected
- selector list,  if any selector is invalid the whole rule will be ignored.

- type of selectors 
    + element type, class, id and universal selectors  
    h1 { }
    
    .box { }
    
    , #unique { }
    
    , * {}
    
    + attribute 
    a[title] { }
    
    a[href="https://example.com"] { }
    
        * presence and value selectors 
        
Selector	        Example	                            Description
[attr]	            a[title]	                        Matches elements with an attr attribute (whose name is the value in square brackets).
[attr=value]	    a[href="https://example.com"]	    Matches elements with an attr attribute whose value is exactly value — the string inside the quotes.
[attr~=value]	    p[class~="special"]	                Matches elements with an attr attribute whose value is exactly value, or contains value in its (space separated) list of values.
[attr|=value]	    div[lang|="zh"]	                    Matches elements with an attr attribute whose value is exactly value or begins with value immediately followed by a hyphen.
[attr^=value]	    li[class^="box-"]	                Matches elements with an attr attribute (whose name is the value in square brackets), whose value begins with value.
[attr$=value]	    li[class$="-box"]	                Matches elements with an attr attribute whose value ends with value.
[attr*=value]	    li[class*="box"]	                Matches elements with an attr attribute whose value contains value anywhere within the string.


li[class] we can match any selector with a class attribute
li[class="a"] matches a selector with a class of a, but not a selector with a class of a with another space-separated class as part of the value
li[class~="a"] will match a class of a but also a value that contains the class of a as part of a whitespace-separated list. It selects the second and third list items
li[class^="a"] matches any attribute value which starts with a, so matches the first two list items.
li[class$="a"] matches any attribute value that ends with a, so matches the first and third list item.
li[class*="a"] matches any attribute value where a appears anywhere in the string, so it matches all of our list items.


        * case sensitivity, If you want to match attribute values case-insensitively you can use the value i
//case sensitivity
li[class^="a"] {
    background-color: yellow;
}

//case insensitively
li[class^="a" i] {
    color: red;
}

    + pseudo-classes and pseudo-elements
    
        * A pseudo-class is a selector that selects elements that are in a specific state
    
    a:hover { }
    
        * Pseudo-elements behave in a similar way, however they act as if you had added a whole new HTML element into the markup
    
    p::first-line { }
    
        * Generating content with ::before and ::after, There are a couple of special pseudo-elements, which are used along with the content property to insert content into your document using CSS.
        
    .box::before {
        content: "This should show before the other content."
    }   
    
    .box::after {
        content: " ➥"
    } 
    
    <p class="box">Content in the box in my HTML page.</p>
    
    + combinators such as > 
    
    article > p { }
    
    article *:first-child { 
      font-weight: bold;
    } 
    
    a, li {
        padding: 5px;
    }
    
    article p:first-child::first-line { 
      font-size: 120%; 
      font-weight: bold; 
    }
    
        * desendant combinator 
        body article p
        
        * child combinator 
        article > p
        
        * adjacent sibling combinator 
        p + img
        
        * general sibling combinator 
        p ~ img
        
        * using combinators, we want to select list items with a class of "a", which are direct children of a <ul>, I could use the following.
        ul > li[class="a"]  {  }

- table of selectors 

Selector	                        Example	                Learn CSS tutorial
Type selector	                    h1 {  }	                Type selectors
Universal selector	                * {  }	                The universal selector
Class selector	                    .box {  }	            Class selectors
id selector	                        #unique { }	            ID selectors
Attribute selector	                a[title] {  }	        Attribute selectors
Pseudo-class selectors	            p:first-child { }	    Pseudo-classes
Pseudo-element selectors	        p::first-line { }	    Pseudo-elements
Descendant combinator	            article p	            Descendant combinator
Child combinator	                article > p	            Child combinator
Adjacent sibling combinator	        h1 + p	                Adjacent sibling
General sibling combinator	        h1 ~ p	                General sibling


# Box model 
- two types of boxes

    + block boxes 
The box will break onto a new line.

The box will extend in the inline direction to fill the space available in its container.

The width and height properties are respected.

Padding, margin and border will cause other elements to be pushed away

elements such as headings (e.g. <h1>) and <p> all use block as their outer display type by default

    + inline boxes
The box will not break onto a new line.

The width and height properties will not apply.

Vertical padding, margins, and borders will apply but will not cause other inline boxes to move away from the box

Horizontal padding, margins, and borders will apply and will cause other inline boxes to move away from the box.

<a> element, used for links, <span>, <em> and <strong> are all examples of elements that will display inline by default

    + type of box applied to an element is defined by display property values such as block and inline
    
- aside, inner and outer display types 

    + box also have a inner display type, however, which dictates how elements inside that box are laid out. the elements inside a box are laid out in normal flow
    
    + change the inner display type by using display values like flex. If we set display: flex; on an element, the outer display type is block, but the inner display type is changed to flex.
    
    + without any other instruction, our boxes lay out as block or inline boxes.
    
- css box model 

    + parts of a box 
    
    content box, where your content displayed 
    
    padding box, around the content as white space 
    
    border box, wraps the content and any padding 
    
    margin box, outermost layer, wrapping the content, padding and border as whitespace between this box and other elements 
    
- stand ard css box model (default), if you give a box width and height attribute, this defines the content box, add padding boarder will add to get the total size taken up by the box 

content-box? 

- alternative css box model, content area width and height will be minus the width for the padding and border 

.box { 
  box-sizing: border-box; 
} 

    + set all elements to alternative
html {
  box-sizing: border-box;
}
*, *::before, *::after {
  box-sizing: inherit;
}

- playing with box models in devtool 

- margins, padding, and borders 
    + margins, The margin is an invisible space around your box. It pushes other elements away from the box. negative margin on one side of your box can cause it to overlap other things on the page. margin is added after the box model is caculated
    
    margin-top 
    margin-left 
    margin-bottom 
    margin-left 
    
        * margin collapsing, two elements whose margins touch, and both margins are positive, those margins will combine to become one margin, which is the size of the largest individual margin
        
        nagative margin will substract from the total, we can control the margin collapse by css 
    + borders, draw between the margin and padding. 
    
    border-width
    border-style
    border-color

    + padding, sits between the border and the content area. cannot have negative amounts of padding, so the value must be 0 or a positive value. it is used to push the content away from the border 
    
- display inline-block, width and height are respected to avoid overlap, padding, margin and border will cause other elements to pushed away. it will not break into new line


# Backgrounds and borders 
- styling backgrounds in css, https://developer.mozilla.org/en-US/docs/Web/CSS/background

- background colors 
.box {
  background-color: #567895;
}

h2 {
  background-color: black;
  color: white;
}
span {
  background-color: rgba(255,255,255,.5);
}

- background images 
.a {
  background-image: url(balloons.jpg);
}


- background repeat 

no-repeat — stop the background from repeating altogether.
repeat-x — repeat horizontally.
repeat-y — repeat vertically.
repeat — the default; repeat in both directions.

- sizing the background image 

cover — the browser will make the image just large enough so that it completely covers the box area

contain — the browser will make the image the right size to fit inside the box. may not complete cover the area 

- positioning the background image like  top, right and center 

- gradient backgrounds 

.a {
  background-image: linear-gradient(105deg, rgba(0,249,255,1) 39%, rgba(51,56,57,1) 96%);
}

.b {
  background-image: radial-gradient(circle, rgba(0,249,255,1) 39%, rgba(51,56,57,1) 96%);
  background-size: 100px 50px;
}

- multiple background images 

background-image: url(image1.png), url(image2.png), url(image3.png), url(image4.png);
background-repeat: no-repeat, repeat-x, repeat;
background-position: 10px 20px,  top right;

- background attachment, specifying how they scroll when the content scrolls. 
sroll, causes the element's background to scroll when the page is scrolled, fixed to the same position on the page

fixed, causes an element's background to be fixed to the viewport 

local, added later on, fixes the background to the element set on, sroll the element the background scrolls with it 

- using the background shorthand property 

A background-color may only be specified after the final comma.

The value of background-size may only be included immediately after background-position, separate with '/' like center/80% 

- accesibility considerations with backgrounds 

- borders, 

.box { 
  border: 1px solid black; 
} 

.box { 
  border-top: 1px solid black; 
} 

- rounded corners 
.box { 
  border-radius: 10px; 
} 


# Handling different text directions 



# Overflowing content 
- Overflow happens when there is too much content to fit in a box. CSS provides various tools to manage overflow
- css tries to avoid "data loss"
- overflow property 

To crop content when it overflows, you can set overflow: hidden.

The default value of overflow is visible

Using overflow: scroll, browsers with visible scrollbars will always display them

overflow-x, overflow-y 

overflow:auto, to let the browser decide if should display the scrollbars 

.box {
  border: 1px solid #333333;
  width: 200px;
  height: 100px;
  overflow: hidden;
}
    
- Now you can recognize that this happens with overflow. Ideally, you will refactor the layout to not rely on fixed-height containers.



# CSS values and units 
- what is a css value 

You'll also see CSS values referred to as data types. The terms are basically interchangeable

Yes, CSS value types tend to be denoted using angle brackets, to differentiate them from CSS properties

h1 { 
  color: black; 
  background-color: rgb(197,93,161); 
} 

- numbers, lengths and percentages 

integer

number, 0.255 

dimension, 45deg, 5s or 10px 

percentage, 50% percentage values 

- lengths 

    + absolute lenght units 
    
unit        name 
cm      centimeters             1cm = 96px/2.54 
mm      millimeters             1mm = 1/10th of 1cm     
Q       quater-millimeters      1Q = 1/40th of 1cm 
in      inches                  1in = 2.54cm = 96px 
pc      picas                   1pc = 1/6th of 1in 
pt      points                  1pt = 1/72th of 1in 
px      pixels                  1px = 1/96th of 1in 

    + relative length units 
em      font size of the parent 
ex      x-height of the element's font 
ch      the advance measure of the glyph "0" of the element's font 
rem     Font size of the root element 
lh      line height of the element 
vw      1% of the viewport's width 
vh      1% of the viewport's height 
vmin    1% of the viewport's smaller dimension 
vmax    1% of the viewport's larger dimension 

- To recap, the em unit means "my parent element's font-size" in the case of typography.

1.3em — 1.3 times its parent's font size

- To recap, the rem unit means "The root element's font-size". 
html {
  font-size: 16px;
}

.ems li {
  font-size: 1.3em;
}

.rems li {
  font-size: 1.3rem;
}

- percentage, a percentage is treated in the same way as a length
li {
  font-size: 80%;
}

- number 
.box {
  opacity: 0.6;
}

- color, specify color in CSS, some of which are more recently implemented than others

.one {
  background-color: #02798b;
}

RGB. An RGB value is a function — rgb() — which is given three parameters that represent the red, green, and blue channel values of the colors,
    
RGBA colors — these work in exactly the same way as RGB colors, and so you can use any RGB values. However, there is a fourth value that represents the alpha channel of the color, which controls opacity.
.one {
  background-color: rgb(2, 121, 139);
}

.two {
  background-color: rgba(197, 93, 161, .7);
}

hsl() and hsla() (see below), became pure aliases of each other and started to behave exactly the same. hsl() function accepts hue, saturation, and lightness values
Hue: The base shade of the color. This takes a value between 0 and 360
Saturation: How saturated is the color? This takes a value from 0–100%, where 0 is no color
Lightness: How light or bright is the color? This takes a value from 0–100%, where 0 is no light

- images, The <image> value type is used wherever an image is a valid value. 
- position, The <position> value type represents a set of 2D coordinates, the first sets the position horizontally, the second vertically. if only specify one axis the other will default to center. It can take keywords such as top, left, bottom, right, and center to align items with specific bounds of a 2D box

.box {
  height: 300px;
  width: 400px;
  background-image: url(star.png);
  background-repeat: no-repeat;
  background-position: right 40px;
}

- strings and identifiers, keywords are used as a value (for example <color> keywords like red, black, rebeccapurple, and goldenrod).

- functions, rgb(), hsl(), etc. The value used to return an image from a file — url() — is also a function.

a traditional programming language is the calc() CSS function. This function gives you the ability to do simple calculations inside your CSS.

.wrapper {
  width: 400px;
}

.box {
  width: calc(20% + 100px);
}



# Sizing items in CSS 
- This size is described as the intrinsic size — which comes from the image itself.

img {
  border: 5px solid darkblue;
}

size of div will always decided by it's content 
- setting a specific size 

.box {
  border: 5px solid darkblue;
  height: 150px;
  width: 200px;
}

Due to this problem of overflow, fixing the height of elements with lengths or percentages is something we need to do very carefully on the web

- using percentage, percentages act like length units, and as we discussed in the lesson on values and units, they can often be used interchangeably with lengths

.box {
  border: 5px solid darkblue;
  width: 50%;
}

- percentage margins and padding, use margin and padding set in percentages, the value is calculated from the inline size of the containing block 
.box {
  border: 5px solid darkblue;
  width: 300px;
  margin: 10%;
  padding: 10%;
}

- min- and max-sizes, make images responsive
.box {
  border: 5px solid darkblue;
  min-height: 150px;
  width: 200px;
}

A common use of max-width is to cause images to scale down if there is not enough space to display them at their intrinsic width

set width: 100% on an image, and its intrinsic width was smaller than its container, the image would be forced to stretch and become larger

max-width: 100%, the image is able to become smaller than its intrinsic size, but will stop at 100% of its size

- viewport unit, visible area of your page in the browser you are using to view a site — also has a size. 1vh is equal to 1% of the viewport height, and 1vw is equal to 1% of the viewport width. it can be used to set boxes and text 

.box {
  border: 5px solid darkblue;
  width: 20vw;
  height: 20vh;
  font-size: 10vh;
}

making that part of your page 100vh high will push the rest of the content below the viewport



# Images media and form elements 
- adding max-width: 100% to the <img> element in the example above. You will see that the smaller image remains unchanged
- object-fit property can help you here. When using object-fit the replaced element can be sized to fit a box 

.box {
  width: 200px;
  height: 200px;
}

img {
  height: 100%;
  width: 100%;
}

.cover {
  object-fit: cover;
}

.contain {
  object-fit: contain;
}

<div class="wrapper">
  <div class="box"><img src="balloons.jpg" alt="balloons" class="cover"></div>
  <div class="box"><img src="balloons.jpg" alt="balloons" class="contain"></div>
</div>

- form elements, in some browsers, form elements do not inherit font styling by default 

button,
input,
select,
textarea {
  font-family : inherit;
  font-size : 100%;
} 
    
    + for consistency, it is a good idea to set margins and padding to 0 on all elements, then add these back in when styling particular controls
    
button,
input,
select,
textarea {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

    + stop ie showing a scrollbar 
    
textarea {
  overflow: auto;
}



# Styling tables 
- spacing and layout 

/* spacing */

table {
  table-layout: fixed;
  width: 100%;
  border-collapse: collapse;
  border: 3px solid purple;
}

thead th:nth-child(1) {
  width: 30%;
}

thead th:nth-child(2) {
  width: 20%;
}

thead th:nth-child(3) {
  width: 15%;
}

thead th:nth-child(4) {
  width: 35%;
}

th, td {
  padding: 20px;
}

- A border-collapse value of collapse is a standard best practice for any table styling effort.
- table-layout, fixed is generally a good idea to set on your table, as it makes the table behave a bit more predictably by default
- <thead> and <tfoot> elements, for a nice grungy, punky look.
- zebra stripes — alternating rows of color that make the different data rows in your table easier

/* zebra striping */

tbody tr:nth-child(odd) {
  background-color: #ff33cc;
}

tbody tr:nth-child(even) {
  background-color: #e495e4;
}

tbody tr {
  background-image: url(noise.png);
}

table {
  background-color: #ff33cc;
}

- styling the caption 

/* caption */

caption {
  font-family: 'Rock Salt', cursive;
  padding: 20px;
  font-style: italic;
  caption-side: bottom;
  color: #666;
  text-align: right;
  letter-spacing: 1px;
}

- text-align to line up your <th> and <td> text, to make things neater and easier to follow


# Debugging CSS 
- devtool panel 
You can toggle values in the Rules view on and off, when that panel is active 

- understand the box model, The Layout view shows you a diagram of the box model on the selected element, along with a description of the properties and values that change how the element is laid out.

- connect to iframes 

https://developer.mozilla.org/en-US/docs/Tools/Working_with_iframes

- tools of devtool in Firefox 

page inspect 

web console, ctrl+shift+k
    + console log 
assert()
clear()
count()
dir()
dirxml()
error()
exception()
group()
groupEnd()
info()
log()
table()
time()
timeEnd()
trace()
warn()

    log filter support regular expression 
    
    + log helpers 
$(selector, element)
Looks up a CSS selector string selector , returning the first node descended from element that matches. 

$$(selector, element)
Looks up a CSS selector string selector, returning an array of DOM nodes descended from element that match

$0
The currently-inspected element in the page.

$_
Stores the result of the last expression executed in the console's command line.

$x(xpath, element, resultType)
Evaluates the XPath xpath expression in the context of element and returns an array of matching nodes 

:block
(Starting in Firefox 80) Followed by an unquoted string, blocks requests where the URL contains that string.

clear()
Clears the console output area.

clearHistory()

copy() copies the argument to the clipboard 

:help, display help text 

keys(), returns a list of the keys on that objects 

:screenshot, with additional commands like --clipboard	to save clipboard, --delay, --dpr specify the device pixel, --file, --filename, --fullpage, --selector for a single element 

:unblock, removes blocking for URLs containing that string.

values()
Given an object, returns a list of the values on that object; serves as a companion to keys().

tempN
The "Use in Console" option in the Inspector generates a variable for a node named temp0, temp1, temp2, etc. referencing the node.
        * example 
inspect($("#title"))

    + javascript debugger 
multi-line mode, ctrl+b

You can open files when in multi-line mode, and save the current contents of the editing pane to a file. ctrl+0, ctrl+s to save the file 

        * reverse search expression history ctrl+R 
    
    + network monitor 

performance tools 

responsive design mode

accessibility inspector 

application panel 

memory 

style editor 

    + taking screenshots
visit the Settings page
find the section labeled "Available Toolbox Buttons"
check the box labeled "Take a screenshot of the entire page".
    
    + dom property viewer 
    Ctrl+Shift+c, inspect panel 

eyedropper, select "Eyedropper" under the "Web Developer" menu

measure portion of a page   

browser toolbox 

exnteding devtools 

addon debugger, tools > web developer > debugger, ctrl+shift+z

- develop, extension workshop 
https://extensionworkshop.com/documentation/develop/

- extension compatibility test 

https://www.extensiontest.com/



# Organizing your CSS 
- formatting readable css 

.box {
  background-color: #567895;
}

h2 {
  background-color: black;
  color: white;
}

- comment your css 
/* This is a CSS comment
It can be broken onto multiple lines. */

- create logical sections in your stylesheet

/* || GENERAL STYLES */

body { ... }

h1, h2, h3, h4 { ... }

ul { ... }

blockquote { ... }

- avoid overly-specific selectors 

//avoid 
article.main p.box {
  border: 1px solid #ccc;
}

could use the selector .box to apply your rule to any element that has the class box

.box {
  border: 1px solid #ccc;
}

- break large stylesheets into multiple smaller ones 

- css methodologies 
    + Object Oriented CSS (OOCSS), an approach made popular by the work of Nicole Sullivan
    
    
    + The Media Object is a pattern we see all over the web. Named by Nicole Sullivan it refers to a two-column box with an image on one side and descriptive text on the other
    
.media {
  display: grid;
  grid-template-columns: 1fr 3fr;
}

.media .content {
  font-size: .8rem;
}

.comment img {
  border: 1px solid grey;
}

.list-item {
  border-bottom: 1px solid grey;
} 

<div class="media comment">
  <img />
  <div class="content"></div>
</div>

- BEM stands for Block Element Modifier. In BEM a block is a standalone entity such as a button, menu, or logo. BEM — Block Element Modifier is a methodology that helps you to create reusable components

http://getbem.com/

<form class="form form--theme-xmas form--simple">
  <input class="form__input" type="text" />
  <input
    class="form__submit form__submit--disabled"
    type="submit" />
</form>

    + other css methodologies
        * Separating container and content with CSS “objects”m OOCSS 
        * Style-guide to write your CSS with five categories for CSS rules, SMACSS 
        * Structured class names and meaningful hyphens, SUITCSS 
        * Breaking down styles into atomic, or indivisible, pieces, Atomic 
    
    +  it is less confusing than the other methods (i.e. SMACSS) but still provides us the good architecture we want (i.e. OOCSS) and with a recognizable terminology.
    
    BEM is an abbreviation of the key elements of the methodology
    
    block, standalone entity that is meaningful on its own.         header, container, menu, checkbox, input 
    element, a part of block that has no standalone meaning.        menu item, list item, checkbox caption 
    modifier, a flag on a block or element.                         disabled, highlighted, checked, fixed, size, big, color yellow 

        * example 
        
<button class="button">
	Normal button
</button>
<button class="button button--state-success">
	Success button
</button>
<button class="button button--state-danger">
	Danger button
</button>

.button {
	display: inline-block;
	border-radius: 3px;
	padding: 7px 12px;
	border: 1px solid #D5D5D5;
	background-image: linear-gradient(#EEE, #DDD);
	font: 700 13px/18px Helvetica, arial;
}
.button--state-success {
	color: #FFF;
	background: #569E3D linear-gradient(#79D858, #569E3D) repeat-x;
	border-color: #4A993E;
}
.button--state-danger {
	color: #900;
}

    * example 
    
<section class="widget">
    <h1 class="widget__header">Sterling Calculator</h1>
    <form class="widget__form" action="process.php" method="post">
        <p>Please enter an amount: (e.g. 92p, &pound;2.12)</p>
        <p>
            <input name="amount" class="widget__input widget__input--amount"> 
            <input type="submit" value="Calculate" class="widget__input widget__input--submit">
        </p>
    </form>
</section>

.widget {
    background-color: #FC3;
}

.widget__header {
    color: #930;
    font-size: 3em;
    margin-bottom: 0.3em;
    text-shadow: #FFF 1px 1px 2px;
}

.widget__input {
    -webkit-border-radius: 5px;
       -moz-border-radius: 5px;
         -o-border-radius: 5px;
            border-radius: 5px;

    font-size: 0.9em;
    line-height: 1.3;
    padding: 0.4em 0.7em;
}

.widget__input--amount {
    border: 1px solid #930;
}

.widget__input--submit {
    background-color: #EEE;
    border: 0;
}

- general rules 

select what you want explicitly 

write selectors for resusability 

do not nest selectors unnecessarily 

do not qualify selectors unnecessarily 

keep selectors as short as possible 

- build systems for css

    + sass basics article, https://sass-lang.com/guide
    
    + compiling component stylesheets, @use role to load them into other stylesheets
    
// foundation/_index.sass
@use 'code'
@use 'lists'
@use 'footer'
@use 'links'



# Advanced styling effects 
- box-shadow allows you to apply one or more drop shadows to an element's box.
.simple {
  box-shadow: 5px 5px 5px rgba(0,0,0,0.7);
}

.multiple {
  box-shadow: 1px 1px 1px black,
              2px 2px 1px black,
              3px 3px 1px red,
              4px 4px 1px red,
              5px 5px 1px black,
              6px 6px 1px black;
}

- other box shadow features 

button {
  width: 150px;
  font-size: 1.1rem;
  line-height: 2;
  border-radius: 10px;
  border: none;
  background-image: linear-gradient(to bottom right, #777, #ddd);
  box-shadow: 1px 1px 1px black,
              inset 2px 3px 5px rgba(0,0,0,0.3),
              inset -2px -3px 5px rgba(255,255,255,0.5);
}

- filters 

.blur {
  filter: blur(10px);
}

https://developer.mozilla.org/en-US/docs/Web/CSS/filter

- CSS blend modes allow us to add blend modes to elements that specify a blending effect when two elements overlap

background-blend-mode, which blends together multiple background images and colors set on a single element.

mix-blend-mode, which blends together the element it is set on with elements it is overlapping — both background and content.

.multiply {
  background-blend-mode: multiply;
}

- css shapes, The CSS Shapes specification enables the wrapping of text around a non-rectangular shape.

img {
  float: left;
  shape-outside: circle(50%);
}

- -webkit-text-fill-color: transparent; feature, this allows you to clip background images to the shape of the element's text

html {
  font-family: impact, sans-serif;
}

h2 {
  width: 250px;
  height: 250px;
  text-align: center;
  line-height: 250px;
  font-size: 75px;
  display: inline-block;
  background: url(colorful-heart.png) no-repeat center;
}

.text-clip {
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}


# Styling text 
# Fundamental text and font styling 
- basic fundamentals of text/font styling in detail, including setting font weight, family and style, font shorthand, text alignment and other effects, and line and letter spacing.

- Text content effectively behaves like a series of inline elements, being laid out on lines adjacent to one another

- Font styles: Properties that affect the font that is applied to the text

big 
bold 
italic etc. 

- Text layout styles: Properties that affect the spacing and other layout features of the text, allowing manipulation

- fonts 
- color 
- font families, font-family property — this allows you to specify a font (or list of fonts) for the browser to apply to the selected elements. 

p {
  font-family: arial;
}

- web safe fonts, available on nearly all instances of the most used operating systems 

Arial 

Courier 

Georgia 

Times New Roman 

Trebuchet MS 

Verdana 

https://en.wikipedia.org/wiki/Core_fonts_for_the_Web

- default fonts, CSS defines five generic names for fonts:  serif, sans-serif, monospace, cursive and fantasy.

serif, fonts that have erifs, flourishes and other small details you see at the ends of the stroke in some typefaces 

sans-serif, fonts that don't have serifs 

monospace, fonts where every character has the same width 

cursive, fonts that are intended to emulate handwriting, with flowing, connected strokes 

fantasy, fonts that are intended to be decorative 

- font stacks, supply a font stack so that the browser has multiple fonts it can choose from

p {
  font-family: "Trebuchet MS", Verdana, sans-serif;
}

p {
  color: red;
  font-family: Helvetica, Arial, sans-serif;
}

- font style 

font-style 
font-weight 
text-transform, allows you to set your font to be transformed, uppercase, lowercase, capitalize, full-width 
text-decoration, sets/upsets text decorations on fonts, underline, overline, line-through 

- text drop shadows, text-shadow property, takes up to four values 

text-shadow: 4px 4px 5px red;

- multiple shadows 

text-shadow: 1px 1px 1px red; 

- text layout 

text-align, used to control how text is aligned with its containing content box 

left 
right 
center 
justify, makes the text spread out, varying the gaps in between the words 

- line height, sets the height of each line of text

line-height: 1.6;

the font-size is multiplied to get the line-height

- letter and word spacing 

p::first-line {
  letter-spacing: 4px;
  word-spacing: 4px;
}

- other properties woth looking at 

    + font styles 
font-variant: Switch between small caps and normal font alternatives.
font-kerning: Switch font kerning options on and off.
font-feature-settings: Switch various OpenType font features on and off.
font-variant-alternates: Control the use of alternate glyphs for a given font-face.
font-variant-caps: Control the use of alternate capital glyphs.
font-variant-east-asian: Control the usage of alternate glyphs for East Asian scripts, like Japanese and Chinese.
font-variant-ligatures: Control which ligatures and contextual forms are used in text.
font-variant-numeric: Control the usage of alternate glyphs for numbers, fractions, and ordinal markers.
font-variant-position: Control the usage of alternate glyphs of smaller sizes positioned as superscript or subscript.
font-size-adjust: Adjust the visual size of the font independently of its actual font size.
font-stretch: Switch between possible alternative stretched versions of a given font.
text-underline-position: Specify the position of underlines set using the text-decoration-line property underline value.
text-rendering: Try to perform some text rendering optimization.

    + text layout styles 
    
text-indent: Specify how much horizontal space should be left before the beginning of the first line of the text content.
text-overflow: Define how overflowed content that is not displayed is signaled to users.
white-space: Define how whitespace and associated line breaks inside the element are handled.
word-break: Specify whether to break lines within words.
direction: Define the text direction (This depends on the language and usually it's better to let HTML handle that part as it is tied to the text content.)
hyphens: Switch on and off hyphenation for supported languages.
line-break: Relax or strengthen line breaking for Asian languages.
text-align-last: Define how the last line of a block or a line, right before a forced line break, is aligned.
text-orientation: Define the orientation of the text in a line.
overflow-wrap: Specify whether or not the browser may break lines within words in order to prevent overflow.
writing-mode: Define whether lines of text are laid out horizontally or vertically and the direction in which subsequent lines flow.

- font shorthand 

font: font-style, font-variant, font-weight, font-stretch, font-size, line-height, and font-family

font: italic normal bold normal 3em/1.5 Helvetica, Arial, sans-serif;

- word wrap 

word-wrap: break-word;

normal|break-word|initial|inherit;
normal, breaks only at allowed break points 
break-word, allows unbreakable words to be broken 
initial, sets the property of its default value 
inherit, inherits this property from its parent element 



# Styling lists 
- a couple of styling defaults
- list spacing 
html {
  font-family: Helvetica, Arial, sans-serif;
  font-size: 10px;
}

h2 {
  font-size: 2rem;
}

ul,ol,dl,p {
  font-size: 1.5rem;
}

li, p {
  line-height: 1.5;
}

/* Description list styles */


dd, dt {
  line-height: 1.5;
}

dt {
  font-weight: bold;
}

- list specific styles 

list-style-type: Sets the type of bullets to use for the list
symbols()
@counter-style, matching the value or one of the predefined styles 
none 
disc, a filled circle, default 
circle, hollow circle 
decimal 
cjk-decimal, han decimal number 
decimal-leading-zero 
lower-roman 
upper-roman 
lower-greek 
lower-alhpa 
...

list-style-type: "\1F44D"; // thumbs up sign


list-style-position: Sets whether the bullets appear inside the list items, or outside them before the start of each item
inside, ::marker is the first element among the list item's contents
outside, ::marker is outside the principal block box


list-style-image: Allows you to use a custom image for the bullet, rather than a simple square or circle
url 
inerit 
initial 
unset 

list-style-image: url("https://mdn.mozillademos.org/files/11981/starsolid.gif");

- list style shorthand 

list-style: square url(example.png) inside;

- controlling list counting, starting from a number other than 1, or counting backwards, or counting in steps of more than 1

start, counting from a number other than 1 
<ol start="4">
  <li>Toast pita, leave to cool, then slice down the edge.</li>
  <li>Fry the halloumi in a shallow, non-stick pan, until browned on both sides.</li>
  <li>Wash and chop the salad.</li>
  <li>Fill pita with salad, hummus, and fried halloumi.</li>
</ol>


reversed,  start the list counting down instead of up.
<ol start="4" reversed>


value, allows you to set your list items to specific numerical values
<ol>
  <li value="2">Toast pita, leave to cool, then slice down the edge.</li>
  <li value="4">Fry the halloumi in a shallow, non-stick pan, until browned on both sides.</li>
  <li value="6">Wash and chop the salad.</li>
  <li value="8">Fill pita with salad, hummus, and fried halloumi.</li>
</ol>

- @counter-style CSS at-rule lets you define counter styles that are not part of the predefined set of styles
@counter-style thumbs {
  system: cyclic;
  symbols: "\1F44D";
  suffix: " ";
}

ul {
  list-style: thumbs;
}

set of descriptors 
system 
nagative 
prefix 

- counter-increment CSS property increases or decreases the value of a CSS counter by a given value

- counter-reset CSS property resets a CSS counter to a given value.



# Styling links 
- understand how to make use of pseudo-classes to style link states effectively
- link states 
link, a link which has a destination 
visited, a link when it has already been visited 
hover, a link when it is being hovered over by a user's mouse pointer 
focus, a link when it has been focused 
active, a link when it is being activated 

a {

}


a:link {

}

a:visited {

}

a:focus {

}

a:hover {

}

a:active {

}

- include icons in links 

a[href*="http"] {
  background: url('https://mdn.mozillademos.org/files/12982/external-link-52.png') no-repeat 100% 0;
  background-size: 16px 16px;
  padding-right: 19px;
}

- links as buttons 

a {
  outline: none;
  text-decoration: none;
  display: inline-block;
  width: 19.5%;
  margin-right: 0.625%;
  text-align: center;
  line-height: 3;
  color: black;
}

a:link, a:visited, a:focus {
  background: yellow;
}

a:hover {
  background: orange;
}

a:active {
  background: red;
  color: white;
}


# Web fonts 
- font families recap

font-family: Helvetica, "Trebuchet MS", Verdana, sans-serif;

- web fonts, @font-face block at the start of the CSS, which specifies the font file(s) to download: 

@font-face {
  font-family: "myFont";
  src: url("myFont.woff");
}

- font editor 

https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Edit_fonts

@font-face descriptor that loads the font into the page,

A free font distributor: This is a site that makes free fonts available for download

A paid font distributor: This is a site that makes fonts available for a charge, such as fonts.com or myfonts.com.

See the Using an online font service section for more details https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts#Using_an_online_font_service

- TTF (True Type Fonts) or OTF (Open Type Fonts)

https://www.fontsquirrel.com/

https://www.fontsquirrel.com/tools/webfont-generator

Multiple versions of each font: for example .ttf, .woff, .woff2, etc.; the exact fonts provided will be updated over time

- online font service 

https://fonts.adobe.com/
http://www.typography.com/cloud/welcome/
https://www.google.com/fonts

<link rel="preconnect" href="https://fonts.gstatic.com">
<link href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" rel="stylesheet">

font-family: 'Open Sans', sans-serif;

<style>
@import url('https://fonts.googleapis.com/css2?family=Zhi+Mang+Xing&display=swap');
</style>

font-family: 'Zhi Mang Xing', cursive;

- @font-face in more detail 

@font-face {
  font-family: 'ciclefina';
  src: url('fonts/cicle_fina-webfont.eot');
  src: url('fonts/cicle_fina-webfont.eot?#iefix') format('embedded-opentype'),
         url('fonts/cicle_fina-webfont.woff2') format('woff2'),
         url('fonts/cicle_fina-webfont.woff') format('woff'),
         url('fonts/cicle_fina-webfont.ttf') format('truetype'),
         url('fonts/cicle_fina-webfont.svg#ciclefina') format('svg');
  font-weight: normal;
  font-style: normal;
}

- variable fonts, allow many different variations of a typeface to be incorporated into a single file

https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide

- repeating track listings 


# CSS layout 
- CSS layout overview 
Normal flow 
the display property 
flexbox 
grid 
floats 
position, precisely control the box
table layout 
multiple column layout 

- methods can change how elements are laid out in CSS 

display property 

floats, can cause block level elements to wrap alongside one side of an element 

the position property, precisely control the placement of boxes inside other boxes 

table layout, designed for styling the parts of an HTML table , can be used on non-table elements, using display:table 

multi-column layout 

- display property, block, inline, flex, grid, can be apply to any element 

display:flex
display:grid

- flexbox, is the short name of the flexible box layout module, lay things out in one dimension, either as a row or as a column. 

They are displayed in a row, because the initial value of flex-direction set on their parent is row.

.wrapper {
  display: flex;
}

initial value of flex-direction set on their parent is row

initial value of the align-items property set on their parent is stretch

the flex property to all of our child items, with a value of 1. the items to grow and fill the container, rather than leaving space at the end

.wrapper {
    display: flex;
}

.wrapper > div {
    flex: 1;
}

- grid layout, Grid Layout is designed for two dimensions, the grid-template-rows and grid-template-columns properties respectively

.wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 100px 100px;
    grid-gap: 10px;
}

<div class="wrapper">
    <div class="box1">One</div>
    <div class="box2">Two</div>
    <div class="box3">Three</div>
    <div class="box4">Four</div>
    <div class="box5">Five</div>
    <div class="box6">Six</div>
</div>

    + start and end line of each item using the grid-column and grid-row properties

.wrapper {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 100px 100px;
    grid-gap: 10px;
}

.box1 {
    grid-column: 2 / 4;
    grid-row: 1;
}

.box2 {
    grid-column: 1;
    grid-row: 1 / 3;
}

.box3 {
    grid-row: 2;
    grid-column: 3;
}

grid-row/colum: start/end   , [start, end)
    + values 
none, no explicit grid 
[linename], specifying a name for the line in that location 
<length>, a non-negative length, giving the width of the column 
<percentage>, non-negative value
<flex>, non-negative dimension with the unit fr, Each <flex>-sized track takes a share of the remaining space in proportion to its flex factor. out of minmax() notation, it implies an automatic minium 
max-content, keyword representing the largest maximal content contribution of the grid items 
min-content, largest minimal content contribution of the grid items occupying the grid track 
minmax(min,max), notation that defines a size range greater than or equal to min and less than or equal to max 
auto, identical to maximal content if it's a maximum
fit-content([<length>|<percentage>]), formula min(max-content, max(auto, argument)), which is calculated similar to auto 
repeat([<positive-integer>|auto-fill|auto-fit], track-list), Represents a repeated fragment of the track list
The masonry value indicates that this axis should be laid out according to the masonry algorithm
The subgrid value indicates that the grid will adopt the spanned portion of its parent grid in that axis

,#grid {
  display: grid;
  width: 100%;
  grid-template-columns: 50px 1fr;
}

,#areaA {
  background-color: lime;
}

,#areaB {
  background-color: yellow;
}

- floats, . The element is moved to the left or right and removed from normal flow, and the surrounding content floats around the floated item

left, loats the element to left 
right 
none, specify no floating at all, default value 
inherit, the value of the float property should be inherited from the element's parent element 

- positioning techniques 

static positioining, it just means "put the element into its normal position in the document layout flow

relative positioning,  allows you to modify an element's position on the page, moving it relative to its position in normal flow. make it overlap other elements on the page. this doesn't do anything on its own, so we also add top and left properties. These serve to move the affected element down and to the right
.positioned {
  position: relative;
  background: rgba(255,84,104,.3);
  border: 2px solid rgb(255,84,104);
  top: 30px;
  left: 30px;
}


absolute posistioning, completely out of the page's normal layout flow, like it is sitting on its own separate layer.
.positioned {
    position: absolute;
    background: rgba(255,84,104,.3);
    border: 2px solid rgb(255,84,104);
    top: 30px;
    left: 30px;
}


fixed positioning, similar to absolute positioning, except that it fixes an element relative to the browser viewport, not another element. However, instead of the offsets being applied from the container, they are applied from the viewport.
.positioned {
    position: fixed;
    top: 30px;
    left: 30px;
}


stick positioning, makes an element act like position: static until it hits a defined offset from the viewport, at which point it acts like position: fixed. 

.positioned {
  position: sticky;
  top: 30px;
  left: 30px;
}

- table layout, lay out elements that are not tables, a use which is sometimes described as "using CSS tables".

    + nomral html table tag, table layouts are inflexible, very heavy on markup, difficult to debug, and semantically wrong

    + using CSS tables for layout should be considered a legacy method at this point, for those situations where you have very old browsers without support for Flexbox or Grid. 
    
    + example 
<form>
  <p>First of all, tell us your name and age.</p>
  <div>
    <label for="fname">First name:</label>
    <input type="text" id="fname">
  </div>
  <div>
    <label for="lname">Last name:</label>
    <input type="text" id="lname">
  </div>
  <div>
    <label for="age">Age:</label>
    <input type="text" id="age">
  </div>
</form>

html {
  font-family: sans-serif;
}

form {
  display: table;
  margin: 0 auto;
}

form div {
  display: table-row;
}

form label, form input {
  display: table-cell;
  margin-bottom: 10px;
}

form label {
  width: 200px;
  padding-right: 5%;
  text-align: right;
}

form input {
  width: 300px;
}

form p {
  display: table-caption;
  caption-side: bottom;
  width: 300px;
  color: #999;
  font-style: italic;
}

- multi-column layout, The multi-column layout module gives us a way to lay out content in columns, similar to how text flows in a newspaper.

To turn a block into a multicol container we use either the column-count property， or the column-width to fill the container with as many columns of at least that width 

.container {
    column-width: 200px;
}

<div class="container">
    <h1>Multi-column layout</h1>
    
    <p>Paragraph 1.</p>
    <p>Paragraph 2.</p>

</div>

    +  cause an element to span all of the columns use the column-span property set to all
.container {
  column-count: 3;
  column-gap: 20px;
  column-rule: 4px dotted rgb(79, 185, 227);
  column-span: all; //default is none 
}

//older property page-break-inside: avoid for best browser support.
.card {
  break-inside: avoid;
  page-break-inside: avoid;
  background-color: rgb(207,232,220);
  border: 2px solid rgb(79,185,227);
  padding: 10px;
  margin: 0 0 1em 0;
}



# Normal flow 
- a block level element's content is 100% of the width of its parent element, and as tall as its content. Inline elements are as tall as their content
- display:block, inline block 
- margin collapse 



# Flex box 
- Flexbox is a one-dimensional layout method for laying out items in rows or columns
- specify elements lay out as flexible boxes 

section {
  display: flex;
}

- flex model

main axis is the axis running in the direction the flex items are being laid out in 

the cross axis is the axis running perpendicular to the direction the flex items are being layout in 

the parent element that has display:flex 

the items being laid out as flexible boxes inside the flex container are called flex items 

|--------------------------------------------+
|              cross start       cross axis 
|flex container 
|
|<-------- main axis ------------------------> 
|flex item  |  flex item |  flex item 
|           |            |    
|           |            | 
|
|main start 
|
|          cross end               main end           
|----------------------------------------------

- columns or rows? 

flex-direction: column; 

lay out flex items in a reverse direction using the row-reverse and column-reverse values
 
flex-wrap: wrap;

flex: 200px;

- flex-flow shorthand 
flex-direction: row;
flex-wrap: wrap;

flex-flow: row wrap;

flex is a shorthand property that can specify up to three different values


- size of the flex item 

article {
  flex: 1;
}

- horinzontal and veritcal alignment 

div {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

- ordering flex items 

button:first-child {
  order: 1;
}

- nested flex boxes 

article {
  flex: 1 200px;
}

article:nth-of-type(3) {
  flex: 3 200px;
  display: flex;
  flex-flow: column;
}

article:nth-of-type(3) div:first-child {
  flex:1 100px;
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  justify-content: space-around;
}
 


# Grids 
- grid will typically have columns, rows

.container {
    display: grid;
    grid-template-columns: 200px 200px 200px;
}

- flexible grids with the fr unit 

.container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
}

fr unit distributes available space, not all space

- gaps between tracks 

.container {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr;
    grid-gap: 20px;
}


- the implicit and explicit grid 

.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-auto-rows: 100px;
  grid-gap: 20px;
}

- minmax function 
.container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: minmax(100px, auto);
    grid-gap: 20px;
}

- as many columns as will fit 

.container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  grid-auto-rows: minmax(100px, auto);
  grid-gap: 20px;
}

- line based placement 

grid-column-start
grid-column-end
grid-row-start
grid-row-end

header {
  grid-column: 1 / 3;
  grid-row: 1;
}

article {
  grid-column: 2;
  grid-row: 2;
}

aside {
  grid-column: 1;
  grid-row: 2;
}

footer {
  grid-column: 1 / 3;
  grid-row: 3;
}

- positioning with grid-template-areas 
.container {
  display: grid;
  grid-template-areas:
      "header header"
      "sidebar content"
      "footer footer";
  grid-template-columns: 1fr 3fr;
  grid-gap: 20px;
}

header {
  grid-area: header;
}

article {
  grid-area: content;
}

aside {
  grid-area: sidebar;
}

footer {
  grid-area: footer;
}

- a css grid, grid framework 
header {
  grid-column: 1 / 13;
  grid-row: 1;
}

article {
  grid-column: 4 / 13;
  grid-row: 2;
}

aside {
  grid-column: 1 / 4;
  grid-row: 2;
}

footer {
  grid-column: 1 / 13;
  grid-row: 3;
}



# Floats 
- element with the float set on is taken out of the normal layout flow. we can add a margin to the float to push the text away, we can't add a margin to the text to move it away from the float.  floated element is taken out of normal flow, and the boxes of the following items actually run behind the float.

- clearing floats, a class of cleared to the second paragraph below the floated item. Then add the following to your CSS

.cleared {
    clear: left;
}

clears the floated element and no longer comes up alongside it.

left: Clear items floated to the left.
right: Clear items floated to the right.
both: Clear any floated items, left or right.

- clearfix hack 

.wrapper::after {
  content: "";
  clear: both;
  display: block;
}

HTML element such as a <div> below the items and set it to clear: both

- using overflow, instead add overflow: auto to the rules for wrapper. Once again, the box should clear.

.wrapper {
  background-color: rgb(79,185,227);
  padding: 10px;
  color: #fff;
  overflow: auto;
}

block formatting context (BFC). This is like a mini layout inside your page, inside which everything is contained

- display: flow-root, This exists only to create a BFC without using hacks



# Positioning 
- prosition property 

- static positioning, default that every element gets — it just means "put the element into its normal position layout flow 

.positioned {
    position: static;
    background: yellow;
}

- relative positioning,  once the positioned element has taken its place in the normal layout flow, you can then modify its final position, including making it overlap other elements on the page with properties like left, top, bottom, right etc. 

position: relative;

- absolute positioning, An absolutely positioned element no longer exists in the normal document layout flow. Instead, it sits on its own layer separate from everything else

- positioning contexts, We can change the positioning context — which element the absolutely positioned element is positioned relative to.

done by setting positioning on one of the element's ancestors — to one of the elements it is nested inside (you can't position it relative to an element it is not nested inside)

position: relative;

- introducing z-index, You may recall from previous points in the course where we discussed web pages using horizontal (x-axis) and vertical (y-axis) coordinates to work

By default, positioned elements all have a z-index of auto, which is effectively 0.

- fixed positioning, usually fixes an element in place relative to the visible portion of the viewport

h1 {
  position: fixed;
  top: 0;
  width: 500px;
  margin-top: 0;
  background: white;
  padding: 10px;
}

- position: sticky, which is somewhat newer than the others. This is basically a hybrid between relative and fixed position, which allows a positioned element to act like it is relatively positioned until it is scrolled to a certain threshold point

- z-index, The box does not establish a new local stacking context. The stack level of the generated box in the current stacking context is the same as its parent's box. integer or auto 



# Multiple-Column layout 
- a basic example 

column-count, create specified columns 
column-width, create as many as width as possible 

.container {
  column-count: 3;
}

- styling the columns, multicol cannot be styled individually. column-gap, column-rule 

.container {
  column-width: 200px;
  column-gap: 20px;
  column-rule: 4px dotted rgb(79, 185, 227);
}

column-rule is a shorthand for column-rule-color, column-rule-style, and column-rule-width

- spanning columns, cause an element to span all of the columns use the column-span property set to all.

    column-span: all;
    
- columns and fragmentation, multi-column layout is fragmented.

.card {
  break-inside: avoid;
  page-break-inside: avoid;
  background-color: rgb(207,232,220);
  border: 2px solid rgb(79,185,227);
  padding: 10px;
  margin: 0 0 1em 0;
}

    + break-inside,  CSS property sets how page, column, or region breaks should behave inside a generated box.
auto;
avoid; Avoids any break
avoid-page; Avoids any page break 
avoid-column; Avoids any column break
avoid-region; Avoids any region break within the principal box

inherit;
initial;
unset;
        * example avoid figure element break 
        
<figure>
<img src="https://media.prod.mdn.mozit.cloud/attachments/2020/07/29/17350/3b4892b7e820122ac6dd7678891d4507/firefox.png">
<figcaption>The Firefox logo — fox wrapped around the world</figcaption>
</figure>
  
figure {
  break-inside: avoid;
}
  
    + CSS Fragmentation is a module of CSS that defines how content is displayed when it is broken across multiple pages, regions, columns 
    
box-decoration-break
break-after
break-before
break-inside
orphans
widows, The widows CSS property sets the minimum number of lines in a block container that must be shown at the top of a page



# Reponsive design 
- The liquid site resulted in a squashed design on smaller screens (as seen below) and unreadably long line lengths on larger ones

something like m.example.com, or example.mobi. This meant that two separate versions of the site had to be developed and kept up-to-date.

- responsive design components, https://alistapart.com/article/responsive-web-design/
    + The first was the idea of fluid grids, something which was already being explored by Gillenwater
    + fluid images, setting max-width to 100%, images would scale down smaller if their containing column narrower than the image's intrinsic size 
    + third key component was media query, Rather than having one layout for all screen sizes, the layout could be changed. Sidebars could be repositioned for the smaller screen
    
- media queries, https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries

- flexible grids, Responsive sites don't just change their layout between breakpoints, they are built on flexible grids. A flexible grid means that you don't need to target every possible device size that there is, and build a pixel perfect layout for it.

//target / context = result , target column size, content pixels to calculate the width of the col 
.col { 
  width: 6.25%; /* 60 / 960 = 0.0625 */ 
} 

- modern laytout technologies 

    + oldest of these layout is multicol, 
    
.container { 
  column-count: 3; 
} 

    if you specify a column-width, the browser will create as many colums you want your content to split into 
    
    + flexbox, flex items will shrink and distribute space between the items according to the space in their container
    
    https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox#Flexible_sizing_of_flex_items
    
.container { 
  display: flex; 
} 

.item { 
  flex: 1; 
} 

    + css grid, the fr unit allows the distribution of available space across grid tracks.
    
    https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Grids#Flexible_grids_with_the_fr_unit
    
.container { 
  display: grid; 
  grid-template-columns: 1fr 1fr 1fr; 
} 

- responsive image, https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images

img {
  max-width: 100%;
} 

- responsive typography 

html { 
  font-size: 1em; 
} 

h1 { 
  font-size: 2rem; 
} 

@media (min-width: 1200px) { 
  h1 {
    font-size: 4rem; 
  }
} 

- using viewport units for responsive typography, draw back, loses the ability to zoom any text set using the vw unit, as that text is always related to the size of the viewport

h1 {
  font-size: 6vw;
}

h1 {
  font-size: calc(1.5rem + 3vw);
}

- viewport meta tag, set the width of the viewport to the device width, and scale the document to 100% of its intended size

<meta name="viewport" content="width=device-width,initial-scale=1">

initial-scale: Sets the initial zoom of the page, which we set to 1.
height: Sets a specific height for the viewport.
minimum-scale: Sets the minimum zoom level.
maximum-scale: Sets the maximum zoom level.
user-scalable: Prevents zooming if set to no.

avoid using minimum-scale, maximum-scale, and in particular setting user-scalable to no. prevent user scale may cause accessibility problems 



# Beginner's guide to media queries 
- reference 
https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries

- media query syntax 

@media media-type and (media-feature-rule) {
  /* CSS rules go here */
}

A media type, which tells the browser what kind of media this code is for 

A media expression, which is a rule, or test that must be passed for the contained CSS to be applied.

A set of CSS rules that will be applied if the test passes and the media type is correct.

- media types 

all 
print 
screen 
speech 

    + only apply the property when the page is printed 

@media print {
    body {
        font-size: 12pt;
    }
}

- media type is different from the MIME type, A MIME type (now properly called "media type", but also sometimes "content type") is a string sent along with a file indicating the type of the file 

https://developer.mozilla.org/en-US/docs/Glossary/MIME_type

https://en.wikipedia.org/wiki/Media_type

https://www.iana.org/assignments/media-types/media-types.xhtml

- media feature rules 

    + width and height, create responsive designs (and that has widespread browser support) is viewport width, and we can apply CSS if the viewport is above or below a certain width

@media screen and (width: 600px) {
    body {
        color: red;
    }
}

@media screen and (max-width: 600px) {
    body {
        color: blue;
    }
}


- In JavaScript, you can use the Window.matchMedia() method to test the window against a media query.

- use MediaQueryList.addListener() to be notified whenever the state of a query changes

- programmatically using media queries in testing media queries 

https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Testing_media_queries

```
let mql = window.matchMedia('(max-width: 600px)');

document.querySelector(".mq-value").innerText = mql.matches;
```

```
const mediaQueryList = window.matchMedia("(orientation: portrait)");
if (mediaQueryList.matches) {
  /* The viewport is currently in portrait orientation */
} else {
  /* The viewport is not currently in portrait orientation, therefore landscape */
}
```

- meida queries in html,  CSS, use the @media at-rule to conditionally apply part of a style sheet based on the result of a media query. use @import to conditionally apply an entire style sheet 

    + <link> element's media attribute, define the media to which a linked resource should be applied 
    + <source> element's media attribute, the define the media to which that source should be applied 
    + <style> element's media attribute, they define the media to which the style should be applied 
    
- @import CSS at-rule is used to import style rules from other style sheets.

@import url;
@import url list-of-media-queries;
@import url supports( supports-query );
@import url supports( supports-query ) list-of-media-queries;

    + examples 
@import url("fineprint.css") print;
@import url("bluish.css") speech;
@import "common.css" screen;
@import url('landscape.css') screen and (orientation:landscape);

- The @media CSS at-rule can be used to apply part of a style sheet based on the result of one or more media queries

/* At the top level of your code */
@media screen and (min-width: 900px) {
  article {
    padding: 1rem 3rem;
  }
}

/* Nested within another conditional at-rule */
@supports (display: flex) {
  @media screen and (min-width: 900px) {
    article {
      display: flex;
    }
  }
}

- for security reason, if Firefox's "Resist Fingerprinting" setting is enabled, many media queries report default values rather than values representing the actual device state. 
@media print {
  body { font-size: 10pt; }
}

@media screen {
  body { font-size: 13px; }
}

@media screen, print {
  body { line-height: 1.2; }
}

@media only screen 
  and (min-width: 320px) 
  and (max-width: 480px)
  and (resolution: 150dpi) {
    body { line-height: 1.4; }
}

- more complex media queries 

    + "and" logic in media queries 
    
@media screen and (min-width: 600px) and (orientation: landscape) {
    body {
        color: blue;
    }
}    

    + "or" logic in media queries 
    
@media screen and (min-width: 600px), screen and (orientation: landscape) {
    body {
        color: blue;
    }
}

    + "not" logic in media queries
    
@media not all and (orientation: landscape) {
    body {
        color: blue;
    }
}

- how to choose breakpoints 

    + mobile first responsive design and is quite often the best approach to follow.

@media screen and (min-width: 40em) {
    article {
        display: grid;
        grid-template-columns: 3fr 1fr;
        column-gap: 20px;
    }

    nav ul {
        display: flex;
    }

    nav li {
        flex: 1;
    }
}

- the viewport meta tag, see the following element included in the head of the document:

<meta name="viewport" content="width=device-width,initial-scale=1">

- Flexbox, Grid, and multi-column layout all give you ways to create flexible and even responsive components without the need for a media query. 



# Legacy layout methods 
- a two column layout 
body {
  width: 90%;
  max-width: 900px;
  margin: 0 auto;
}

div:nth-of-type(1) {
  width: 48%;
}

div:nth-of-type(2) {
  width: 48%;
}


div:nth-of-type(1) {
  width: 48%;
  float: left;
}

div:nth-of-type(2) {
  width: 48%;
  float: right;
}

- creating simple legacy grid frameworks, behavior of the float property to float one column up next to another in order to create something that looks like a grid.

<div class="wrapper">
  <div class="row">
    <div class="col">1</div>
    <div class="col">2</div>
    <div class="col">3</div>
    <div class="col">4</div>
    <div class="col">5</div>
    <div class="col">6</div>
    <div class="col">7</div>
    <div class="col">8</div>
    <div class="col">9</div>
    <div class="col">10</div>
    <div class="col">11</div>
    <div class="col">12</div>
  </div>
  <div class="row">
    <div class="col span1">13</div>
    <div class="col span6">14</div>
    <div class="col span3">15</div>
    <div class="col span2">16</div>    
  </div>
</div>

* {
  box-sizing: border-box;
}
    
body {
  width: 980px;
  margin: 0 auto;
}

.wrapper {
  padding-right: 20px;
}

.row {
  clear: both;
}

.col {
  float: left;
  margin-left: 20px;
  width: 60px;
  background: rgb(255, 150, 150);
}

/* Two column widths (120px) plus one gutter width (20px) */
.col.span2 { width: 140px; }
/* Three column widths (180px) plus two gutter widths (40px) */
.col.span3 { width: 220px; }
/* And so on... */
.col.span4 { width: 300px; }
.col.span5 { width: 380px; }
.col.span6 { width: 460px; }
.col.span7 { width: 540px; }
.col.span8 { width: 620px; }
.col.span9 { width: 700px; }
.col.span10 { width: 780px; }
.col.span11 { width: 860px; }
.col.span12 { width: 940px; }

- easier calculations using the calc() function

.col.span4 {
  width: calc((6.25%*4) + (2.08333333%*3));
}

the upper .col.span# can be replaced to 
.col.span2 { width: calc((6.25%*2) + 2.08333333%); }
.col.span3 { width: calc((6.25%*3) + (2.08333333%*2)); }
.col.span4 { width: calc((6.25%*4) + (2.08333333%*3)); }
.col.span5 { width: calc((6.25%*5) + (2.08333333%*4)); }
.col.span6 { width: calc((6.25%*6) + (2.08333333%*5)); }
.col.span7 { width: calc((6.25%*7) + (2.08333333%*6)); }
.col.span8 { width: calc((6.25%*8) + (2.08333333%*7)); }
.col.span9 { width: calc((6.25%*9) + (2.08333333%*8)); }
.col.span10 { width: calc((6.25%*10) + (2.08333333%*9)); }
.col.span11 { width: calc((6.25%*11) + (2.08333333%*10)); }
.col.span12 { width: calc((6.25%*12) + (2.08333333%*11)); }

- sementic versus "unsemantic" grid systems 

.content {
  width: calc((6.25%*8) + (2.08333333%*7));
}

- enabling offset containers in our grid 

.offset-by-one {
  margin-left: calc(6.25% + (2.08333333%*2));
}

//calculae the percentages yourself 

.offset-by-one {
  margin-left: 10.41666666%;
}

- floated grid limitations, if the content of the elements gets wider than the rows they occupy, it will overflow and look a mess 
- flex grids? flexbox, you might think that flexbox is the ideal solution for creating a grid system. 
body {
  width: 90%;
  max-width: 980px;
  margin: 0 auto;
}

.wrapper {
  padding-right: 2.08333333%;
}


.row {
  display: flex;
}

.col {
  margin-left: 2.08333333%;
  margin-bottom: 1em;
  width: 6.25%;
  flex: 1 1 auto;
  background: rgb(255,150,150);
}

The flex CSS shorthand property sets how a flex item will grow or shrink to fit the space available in its flex container. shorthand for the following CSS properties 

flex-grow, flex-shrink, flex-basis 

/* Keyword values */
flex: auto;
flex: initial;
flex: none;

/* One value, unitless number: flex-grow */
flex: 2;

/* One value, width/height: flex-basis */
flex: 10em;
flex: 30%;
flex: min-content;

/* Two values: flex-grow | flex-basis */
flex: 1 30px;

/* Two values: flex-grow | flex-shrink */
flex: 2 2;

/* Three values: flex-grow | flex-shrink | flex-basis */
flex: 2 2 10%;

/* Global values */
flex: inherit;
flex: initial;
flex: unset;

    + flex basis 
/* Specify <'width'> */
flex-basis: 10em;
flex-basis: 3px;
flex-basis: auto;

/* Intrinsic sizing keywords */
flex-basis: fill;
flex-basis: max-content;
flex-basis: min-content;
flex-basis: fit-content;

/* Automatically size based on the flex item’s content */
flex-basis: content;

/* Global values */
flex-basis: inherit;
flex-basis: initial;
flex-basis: unset;

- third party grid systems, Bootstrap, Foundation,  skeleton.css http://getskeleton.com/


# Support older browsers 
- Therefore, a well-structured HTML document should always be your starting point. If you remove your stylesheet, does your content make sense?
- create fallback in css 
- feature queries 


@supports (display: grid) {
  .item {
      width: auto;
  }
}

- cross browser testing 

https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing


# references 
- pseudo-classes 
:active	Matches when the user activates (for example clicks on) an element.
:any-link	Matches both the :link and :visited states of a link.
:blank	Matches an <input> element whose input value is empty.
:checked	Matches a radio button or checkbox in the selected state.
:current	Matches the element, or an ancestor of the element, that is currently being displayed.
:default	Matches the one or more UI elements that are the default among a set of similar elements.
:dir	Select an element based on its directionality (value of the HTML dir attribute or CSS direction property).
:disabled	Matches user interface elements that are in an disabled state.
:empty	Matches an element that has no children except optionally white space.
:enabled	Matches user interface elements that are in an enabled state.
:first	In Paged Media, matches the first page.
:first-child	Matches an element that is first among its siblings.
:first-of-type	Matches an element which is first of a certain type among its siblings.
:focus	Matches when an element has focus.
:focus-visible	Matches when an element has focus and the focus should be visible to the user.
:focus-within	Matches an element with focus plus an element with a descendent that has focus.
:future	Matches the elements after the current element.
:hover	Matches when the user hovers over an element.
:indeterminate	Matches UI elements whose value is in an indeterminate state, usually checkboxes.
:in-range	Matches an element with a range when its value is in-range.
:invalid	Matches an element, such as an <input>, in an invalid state.
:lang	Matches an element based on language (value of the HTML lang attribute).
:last-child	Matches an element which is last among its siblings.
:last-of-type	Matches an element of a certain type that is last among its siblings.
:left	In Paged Media, matches left-hand pages.
:link	Matches unvisited links.
:local-link	Matches links pointing to pages that are in the same site as the current document.
:is()	Matches any of the selectors in the selector list that is passed in.
:not	Matches things not matched by selectors that are passed in as a value to this selector.
:nth-child	Matches elements from a list of siblings — the siblings are matched by a formula of the form an+b (e.g. 2n + 1 would match elements 1, 3, 5, 7, etc. All the odd ones.)
:nth-of-type	Matches elements from a list of siblings that are of a certain type (e.g. <p> elements) — the siblings are matched by a formula of the form an+b (e.g. 2n + 1 would match that type of element, numbers 1, 3, 5, 7, etc. All the odd ones.)
:nth-last-child	Matches elements from a list of siblings, counting backwards from the end. The siblings are matched by a formula of the form an+b (e.g. 2n + 1 would match the last element in the sequence, then two elements before that, then two elements before that, etc. All the odd ones, counting from the end.)
:nth-last-of-type	Matches elements from a list of siblings that are of a certain type (e.g. <p> elements), counting backwards from the end. The siblings are matched by a formula of the form an+b (e.g. 2n + 1 would match the last element of that type in the sequence, then two elements before that, then two elements before that, etc. All the odd ones, counting from the end.)
:only-child	Matches an element that has no siblings.
:only-of-type	Matches an element that is the only one of its type among its siblings.
:optional	Matches form elements that are not required.
:out-of-range	Matches an element with a range when its value is out of range.
:past	Matches the elements before the current element.
:placeholder-shown	Matches an input element that is showing placeholder text.
:playing	Matches an element representing an audio, video, or similar resource that is capable of being “played” or “paused”, when that element is “playing”.
:paused	Matches an element representing an audio, video, or similar resource that is capable of being “played” or “paused”, when that element is “paused”.
:read-only	Matches an element if it is not user-alterable.
:read-write	Matches an element if it is user-alterable.
:required	Matches form elements that are required.
:right	In Paged Media, matches right-hand pages.
:root	Matches an element that is the root of the document.
:scope	Matches any element that is a scope element.
:valid	Matches an element such as an <input> element, in a valid state.
:target	Matches an element if it is the target of the current URL (i.e. if it has an ID matching the current URL fragment).
:visited	Matches visited links.

- pseudo-elements 
::after	Matches a stylable element appearing after the originating element's actual content.
::before	Matches a stylable element appearing before the originating element's actual content.
::first-letter	Matches the first letter of the element.
::first-line	Matches the first line of the containing element.
::grammar-error	Matches a portion of the document containing a grammar error as flagged by the browser.
::marker	Matches the marker box of a list item, which typically contains a bullet or number.
::selection	Matches the portion of the document that has been selected.
::spelling-error	Matches a portion of the document containing a spelling error as flagged by the browser.

- replaced elements, such as <iframe> elements, may have stylesheets of their own, but they don't inherit the styles of the parent document.


# References 
- https://developer.mozilla.org/en-US/docs/Web/CSS/Reference

- basic rule syntax 

style-rule ::=
    selectors-list {
      properties-list
    }

selectors-list ::=
    selector[:pseudo-class] [::pseudo-element]
    [, selectors-list]

properties-list ::=
    [property : value] [; properties-list]

- At-rules are CSS statements that instructs CSS how to behave. They begin with an at sign, '@' (U+0040 COMMERCIAL AT), followed by an identifier and includes everything up to the next semicolon, ';' (U+003B SEMICOLON), or the next CSS block

/* General structure */
@IDENTIFIER (RULE);

 
    + @charset 
    + @counter-style,  counter styles that are not part of the predefined set of styles. A @counter-style rule defines how to convert a counter value into a string representation
@counter-style thumbs {
  system: cyclic;
  symbols: "\1F44D";
  suffix: " ";
}

ul {
  list-style: thumbs;
}

    + @media
all 
print 
screen 
speech 
    
/* At the top level of your code */
@media print {
  body { font-size: 10pt; }
}

@media screen {
  body { font-size: 13px; }
}

@media screen, print {
  body { line-height: 1.2; }
}

@media only screen
  and (min-width: 320px)
  and (max-width: 480px)
  and (resolution: 150dpi) {
    body { line-height: 1.4; }
}

    
    + @font-face, The @font-face CSS at-rule specifies a custom font with which to display text; the font can be loaded from either a remote server or a locally-installed font on the user's own computer
    
    Web fonts are subject to the same domain restriction, unless HTTP access controls are used to relax this restriction.
    
@font-face {
  font-family: "Open Sans";
  src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2"),
       url("/fonts/OpenSans-Regular-webfont.woff") format("woff");
}


@font-face {
  font-family: MyHelvetica;
  src: local("Helvetica Neue Bold"),
       local("HelveticaNeue-Bold"),
       url(MgOpenModernaBold.ttf);
  font-weight: bold;
}

    + @font-feature-values, lets you use a common name in the font-variant-alternates property for features activated differently in OpenType
@swash
Specifies a feature name that will work with the swash() functional notation    

@annotation
Specifies a feature name that will work with the annotation() functional

@ornaments
Specifies a feature name that will work with the ornaments() functional

@stylistic
Specifies a feature name that will work with the stylistic() functional

@styleset
Specifies a feature name that will work with the styleset() functional

@character-variant
Specifies a feature name that will work with the character-variant()

        * example 
/* At-rule for "nice-style" in Font One */
@font-feature-values Font One {
  @styleset {
    nice-style: 12;
  }
}

/* At-rule for "nice-style" in Font Two */
@font-feature-values Font Two {
  @styleset {
    nice-style: 4;
  }
}

…

/* Apply the at-rules with a single declaration */
.nice-look {
  font-variant-alternates: styleset(nice-style);
}

    + @import, Imported rules must precede all other types of rules, except @charset rules; as it is not a nested statement
    
@import url;
@import url list-of-media-queries;
@import url supports( supports-query );
@import url supports( supports-query ) list-of-media-queries;

@import 'custom.css';
@import url("chrome://communicator/skin/");
@import url('landscape.css') screen and (orientation:landscape);

    + @keyframes steps in a CSS animation sequence by defining styles for keyframes,  gives more control over the intermediate steps of the animation sequence than transitions.
    
p {
  animation-duration: 3s;
  animation-name: slidein;
}

@keyframes slidein {
  from {
    margin-left: 100%;
    width: 300%;
  }

  to {
    margin-left: 0%;
    width: 100%;
  }
}
<custom-ident>, @keyframes rule with a name that is then used by the animation-name property to match an animation
from 
to 
<percentage>
    
    + @namespace defines xml namespaces to be used in a css style sheet 
    
/* Default namespace */
@namespace url(XML-namespace-URL);
@namespace "XML-namespace-URL";

@namespace url(http://www.w3.org/1999/xhtml);
@namespace svg url(http://www.w3.org/2000/svg);

/* This matches all XHTML <a> elements, as XHTML is the default unprefixed namespace */
a {}

/* This matches all SVG <a> elements */
svg|a {}

/* This matches both XHTML and SVG <a> elements */
*|a {}

    + @page, modify page style when print document 
    
@page {
  margin: 1cm;
}

@page :first {
  margin: 2cm;
}

size 
marks 
bleed, specifies the extent beyond the page box 
    + @property, The @property CSS at-rule is part of the CSS Houdini umbrella of APIs, it allows developers to explicitly define their css custom properties

    The @property rule represents a custom property registration directly in a stylesheet
    
@property --my-color {
  syntax: '<color>';
  inherits: false;
  initial-value: #c0ffee;
}

window.CSS.registerProperty({
  name: '--my-color',
  syntax: '<color>',
  inherits: false,
  initialValue: '#c0ffee',
});

use the customized property 
--somekeyword: left;
--somecolor: #0000ff;
--somecomplexvalue: 3px 6px rgb(20, 32, 54);
https://developer.mozilla.org/en-US/docs/Web/CSS/--*

    + @supports 
@supports (display: grid) {
  div {
    display: grid;
  }
}

@supports not (display: grid) {
  div {
    float: right;
  }
}



# CSS functional notation 
- CSS functional notation is a type of CSS value that can represent more complex data types or invoke special data processing or calculations.

selector {
  property: functional-notation( [argument]? [, argument]! );
}

- index 
abs() (math) 
acos() (math) 
annotation() (font)
asin() (math) 
atan() (math) 
atan2() (math) 
attr() (math) 

blur() (filter)
brightness() (filter)

calc() (math)
character-variant() (font)
circle() (shape)
clamp() (math)
color() (colors) 
conic-gradient()
cos() (math) 
counter()
counters(), enables nested counters, returning a concatenated string representing the current values of the named counters, if there are any
    * example 
ol {
  counter-reset: listCounter;
}
li {
  counter-increment: listCounter;
}
li::marker {
   content:  counters(listCounter, '.', upper-roman) ') ';
}

contrast() (filter)
cross-fade() 
cubic-bezier()

device-cmyk() (colors) 
drop-shadow() (filter)

element() 
env() 
ellipse() (shape)
exp() (math) 

fit-content()
format()

grayscale() (filter)

hsl() (colors)
hsla() (colors)
hue-rotate() (filter)
hwb() (colors) 
hypot() (math) 

image() 
image-set() 
inset() (shape)
invert() (filter)

lab() (colors) 
lch() (colors) 
leader()
linear-gradient()
local() 
log() (math) 

matrix() (transform)
matrix3d() (transform)
max() (math)
min() (math)
minmax() (math)
mod() (math) 

opacity() (filter)
ornaments() (font)

paint() , 
path() (shape),  SVG path string, and is used in CSS Shapes and CSS Motion Path to enable a shape to be drawn.
    * example 
path("M 10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80");
path(evenodd,"M 10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80");

perspective() (transform)
polygon() (shape)
pow() (math) 

radial-gradient()
rem() (math) 
repeat()
repeating-linear-gradient()
repeating-radial-gradient()
repeating-conic-gradient()
rgb() (colors)
rgba() (colors)
rotate() (transform)
rotate3d() (transform)
rotateX() (transform)
rotateY() (transform)
rotateZ() (transform)
round() (math) 

saturate() (filter),  super-saturates or desaturates the input image.
scale() (transform)
scale3d() (transform), The scale3d() CSS function defines a transformation that resizes an element in 3D space. Because the amount of scaling is defined by a vector
scaleX() (transform)
scaleY() (transform)
scaleZ() (transform)
sepia() (filter)
sign() (math) 
sin() (math) 
skew() (transform)
skewX() (transform)
skewY() (transform)
sqrt() (math) 
steps()
styleset() (font)
stylistic() (font)
swash() (font)
symbols()

tan() (math) 
target-counter() 
target-counters() 
target-text() 
toggle() 
translate() (transform)
translate3d() (transform)
translateX() (transform)
translateY() (transform)
translateZ() (transform)

url()

var(), The var() CSS function can be used to insert the value of a custom property
    * example 
border-color: var(--color-b);
:root {
  --main-bg-color: pink;
}

body {
  background-color: var(--main-bg-color);
}


# Block formatting context 
- A block formatting context is a part of a visual CSS rendering of a web page. It's the region in which the layout of block boxes occurs and in which floats interact with other elements.

- block format context is created by at least one of the following 
root <html>
float 
position, abosolute or fixed 
display, table-cell 
display, table-caption 
display, table-row, table-row-group, table-header-group, table-footer-group 
display, flow-root 
display, flex or inline-flex 
display, grid or inline-grid 
column-count, column-width 
column-span 

- <ruby> element represents small annotations that are rendered above
- display css property,  block or inline element and the layout used for its children, such as flow layout, grid or flex.

block, The element generates a block element box

inline, The element generates one or more inline element boxes that do not generate line breaks

run-in, The element generates a run-in box. If the adjacent sibling of the element defined as display: run-in box is a block box
    
    + display-inside,  inner display type

flow, lays out its contents using flow layout (block-and-inline layout).

flow-root, The element generates a block element box that establishes a new block formatting context
        * example 
.box {
    background-color: rgb(224, 206, 247);
    border: 5px solid rebeccapurple;
    display: flow-root;
}

.float {
    float: left;
    width: 200px;
    height: 150px;
    background-color: white;
    border:1px solid black;
    padding: 10px;
}

table, These elements behave like HTML <table> elements

flex, The element behaves like a block element and lays out its content according to the flexbox mode

grid, The element behaves like a block element and lays out its content according to the grid model

ruby, The element behaves like an inline element and lays out its content according to the ruby formatting model

    + display-listitem The element generates a block box for the content and a separate list-item inline box.
    
    + display-internal, table and ruby have a complex internal structure, with several different roles that their children and descendants can fill
table-row-group

table-header-group

table-footer-group
    + display-box, These values define whether an element generates display boxes at all.

    + global 
/* Global values */
display: inherit;
display: initial;
display: unset;

    + display 
display:flex 
display:grid 

//accessibility concerns 
display:none  //removed from screen reading 

display:contents, most browsers will remove from the accessibility tree any element with a display value of contents

display:table 

    + syntax 
    
[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>
where 
<display-outside> = block | inline | run-in
<display-inside> = flow | flow-root | table | flex | grid | ruby
<display-listitem> = <display-outside>? && [ flow | flow-root ]? && list-item
<display-internal> = table-row-group | table-header-group | table-footer-group | table-row | table-cell | table-column-group | table-column | table-caption | ruby-base | ruby-text | ruby-base-container | ruby-text-container
<display-box> = contents | none
<display-legacy> = inline-block | inline-list-item | inline-table | inline-flex | inline-grid



# Animation 
- animation shorthand,  applies an animation between styles

/* @keyframes duration | easing-function | delay |
iteration-count | direction | fill-mode | play-state | name */
animation: 3s ease-in 1s 2 reverse both paused slidein;

- animation is shorthand for 

animation-delay
animation-direction
animation-duration
animation-fill-mode
animation-iteration-count
animation-name,  specifies the names of one or more @keyframes at-rules 
animation-play-state
animation-timing-function

zero or one occurrences of the following values:
<single-transition-easing-function>
<single-animation-iteration-count>
<single-animation-direction>
normal 
reverse
alternate, reverse direction in each cycle 
alternate-reverse 

<single-animation-fill-mode>
<single-animation-play-state>
running 
paused 
inherit 
initial 
unset 

an optional name for the animation, which may be none, a <custom-ident>, or a <string>
zero, one, or two <time> values

- example 

.cylon_eye {
  -webkit-animation: 4s linear 0s infinite alternate move_eye;
          animation: 4s linear 0s infinite alternate move_eye;
}

@-webkit-keyframes move_eye { from { margin-left: -20%; } to { margin-left: 100%; }  }
        @keyframes move_eye { from { margin-left: -20%; } to { margin-left: 100%; }  }
        
- syntax 

<single-animation>#
where 
<single-animation> = <time> || <timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state> || [ none | <keyframes-name> ]