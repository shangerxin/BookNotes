Powershell for beginners=Ian Waters;Note=Erxin

# Reference 
https://learning.oreilly.com/library/view/powershell-for-beginners/9781484270646/html/508376_1_En_BookFrontmatter_OnlinePDF.xhtml


# Introduction
- terminology

    + variables 
    
    + cmdlets are commands that are built into powershell to interactive with ms products such as office, azure etc. 
    
    + scripts 
    
    + functions 
    
    + classes 
    
    + modules 
    
    + objects, everything in powershell is an object 
    
    + pipeline, |, operator 
    
    + .net framework 
    
- In this book, we are going to be focusing on PowerShell 7 because it’s the first release that really focuses on the future direction of PowerShell to be open source

- tools 

https://github.com/PowerShell/PowerShell/releases

vscode 

https://code.visualstudio.com/

- update cmdlets

run the cmdlet like this to get everything updated:
$ Update-Help -UICulture en-US

- get help 

run 
$ Get-Help Get-Process

- install vscode 

install powershell extension

    + Simply highlight a single line or multiple lines of code, right-click, and select “Run Selection” 
    
*.ps1
```
Write-Host "hello"
Write-Host "how are you?"
```

- comment-based help 

returned as output.
<#
  .SYNOPSIS
   Says hello to anyone who runs this script.
  .DESCRIPTION
   The Hello.ps1 script prints our Hello how are you to the screen.
  .PARAMETER Name
   Specifies the name of the person running the script.
  .INPUTS
   None. You cannot pipe objects to Hello.ps1.
  .OUTPUTS
   Writes two string objects "Hello" and "How are you?" to the console.
  .EXAMPLE
   C:\PS> .\Hello.ps1
  .EXAMPLE
   C:\PS> .\Hello.ps1 -Name Ian
#>

- single line comment 

```
# This is a single line comment
```

- multiline comment 

<#
...
#>


# Variables 
- example 

```
# Common Variable Types
[string]$name       = "Peter"                                   # strings are a 'string of' characters making a word or sentance.
[char]$letter       = 'A'                                       # char type are single characters.
[bool]$isEnabled    = $false                                    # bool type can be $true or $false.
[int]$age           = 37                                        # int type is a whole number.
[decimal]$height    = 12345.23                                  # decimal type allows large numbers with decimals.
[double]$var        = 54321.21                                  # similar to decimal but is a 8 byte decimal floating point number.
[single]$var        = 76549.11                                  # similar to decimal but is a 32 bit floating point number.
[long]$var          = 2382.22                                   # similar to decimal bus is a 64 bit integer.
[DateTime]$birthday = "Feburary 12, 1982"                       # Date and time value.
[array]$var         = "itemone", "itemtwo"                      # Indexed list of objects, in this case an array of string values but they can be any other object type.
[hashtable]$var     = @{Name = "Ian"; Age = 37; Height = 5.9 }  # Name and Value pairs. You can mix variable types.
# If you dont specify the variable type PowerShell will determine the best fit.
$myVariable = "hello this is a string variable"
# It's best practice to always specify the variable type
[string]$myVariable = "hello this is a string variable"
# Assigning the number 5 to the int variable $numberVariable
[int]$numberVariable = 5
# Assigning $true value to the $booleanVariable
[bool]$booleanVariable = $true
# If you create a variable of a specific type then try assigning an incompatiable value it will result in an error.
[int]$age = 3
$age = "old"
# You can overwrite existing values by assigning a new one at any time.
$age = 38
$age = 83
$age = 23
# You can display the value of a variable to the console buy simply typeing the variable name.
[int]$age = 37
$age
# If you want to write text to the console in a flexiable way use the Write-Host cmdlet.
Write-Host "It's my birthday and i'm " $age
#Global variables can be used to allow access to them across your script#Player position
[int]$global:xPosition = 4
[int]$global:yPosition = 3
$global:xPosition
````

- variable scope 

local, current script, function, or class only.

global, any where 

private, cannot be seen from other scope  


# Condition statements
- example 

```
# If the values in the if statement are equal then the result of the statement results in a true condition.
# If a statement results in a true condition then the code within the {} brackets is run.
if (4 -eq 4) {
    Write-Host "4 is equal to 4"
}
if ("hello" -eq "hello") {
    Write-Host "Both strings are equal to each other"
}
# If you change the value of one of the variables they won't equal each other so the else clause will run.
[int]$x = 10
[int]$y = 10
if ($x -eq $y) {
    Write-Host "the x and y variables are equal to each other"
}
else {
    Write-Host "The x and y variables are NOT equal to each other"
}
# Is "Ian" equal to "Ian"? yes they are so the result is true and code within the if statement runs.
$yourName = "Ian"
if ($yourName -eq "Ian") {
    Write-Host "Hay my name is Ian too!"
}
else {
    Write-Host "Hi $yourName, nice to meet you!"
}
# An example of reading input from the console and using an if, elseif, else statements.
# Using just this code you can expand it to write your own text based adventure game in PowerShell!
#Variables
[string]$playerInput = ""
#Get input from player
$playerInput = Read-Host -Prompt "You walk into a room with two doorways. One to the left and one to the right. Type 'left' or 'Right' to walk through one of the doors."
if ($playerInput -eq "left") {
    Write-Host "Player typed left"
}
elseif ($playerInput -eq "right") {
    Write-Host "Player typed right"
}
else {
    Write-Host "Player typed something we didn't understand"
}
# Comparison Operators
# -eq     Equals.
if (5 -eq 5) {
    #5 is equal to 5
}
# -ne Not equals.
if (3 -ne 4) {
    #3 is not equal to 4
}
# -gt Greater than.
if (4 -gt 2) {
    #4 is greater than 2
}
# -ge Greater than or equal.
if (2 -ge 1) {
    #2 is greater than or equal to 1
}
# -lt Less than.
if (1 -lt 2) {
    #1 is less than 1
}
# -le Less than or equal.
if (1 -le 2) {
    #1 is less than or equal to 2
}
# -like Results in a true condition when a string matches based on a wildcard character *.
# The string "hello*" says if this string matches the other by starting with the word hello followed by any other words.
# If we used "*hello*" it would mean result in true if hellow appears in the other string because we are using a wildcard at the start and end.
if ("hello how are you?" -like "hello*") {
    #use a wildcard character * to match strings
}
# -notlike     Results in a true condition when two strings don't match.
if ("HELLO" -notlike "BYE") {
    #HELLO is not like BYE
}
# -match     Results in true when a string matches a regex pattern. In its simplest form it can be used to check if a word or character exists in a string. Its well worth reading more on regex patterns as we wont be using many of these in the exapmples in this book.
if ("HELLO" -match "H") {
    #H exists in the
    string "HELLO"
}
# -notmatch     Results in true when a string doesn't match a regex pattern.
if ("HELLO" -notmatch "A") {
    #A does not match in the
    string "HELLO"
}
# -contains     Results in true when a value is found within another collection.
$list = @(1, 2, 3, 4, 5)
if ($list -contains 3) {
    #the list does contain a 3
}
# -notcontains     Results in true when a value is not found within a collection.
$list = @(1, 2, 3, 4, 5)
if ($list -notcontains 8) {
    #$list does not contain 8
}
# -in     Results in true when a value is found in a collection.
$list = @(1, 2, 3, 4, 5)
if (3 -in $list) {
    #the list does contain a 3
}
# -notin     Results in true when a value is not found in a collection.
$list = @(1, 2, 3, 4, 5)
if (6 -notin $list) {
    #6 is not in the list
}
# -is     Results in true when a variable or value matches the specified type.
$var = "This is a string"
if ($var -is [string]) {
    #The variable is a string
}
# -isnot     Results in true when a variable or value is not equal to the specified type.
$var = "This is a string"
if ($var -isnot [bool]) {
    #The variable is a string and not a Boolean value so results in true.
}
# Switch Statements
# In this example we set up a number variables and pass it into the switch.
# On each line we place the value to compare against.
# In this case the numbers 1 and 2 and after each value we use {} brackets to define the code to run when that value matches.
[int]$number = 2
switch ($number) {
    1 { "The number is one" }
    2 { "The number is two" }
    default { "I dont know what the number is" }
}
# This is to show within each clause you can run multiple lines of code not just one.
# The final clause is default which will run if none of the values match.
[string]$favouriteColour = "Blue"
switch ($favouriteColour) {
    "Red" {
        "Your favourite colour is Red"
        "I like red too."
    }
    "Blue" {
        "Your favourite colour is Blue"
        "I like Blue too."
    }
    default { "I dont recognise that colour" }
}
```

- if statements 

[int]$x = 10
[int]$y = 10
if ($x -eq $y) {
 Write-Host "the x and y variables are equal to each other"
}
else {
 Write-Host "The x and y variables are NOT equal to each other"
}

if ($playerInput -eq "left") {
 Write-Host "Player typed left"
}
elseif ($playerInput -eq "right") {
 Write-Host "Player typed right"
}
else {
 Write-Host "Player typed something we didn't understand"
}

- comparison operators 

```
-eq 

-ne 

-gt 

-ge 

-lt 

-le 

-like #Results in a true condition when a string matches based on a wildcard character *

-not-like 

-match #Results in true when a string matches a regex pattern

-not-match 

-contains 

-not-contains 

-in 

-is #Results in true when a variable or value matches the specified type

-isnot 
```

- switch statement 

[int]$number = 2
switch ($number) {
 1 { "The number is one" }
 2 { "The number is two" }
 default { "I dont know what the number is" }
}

[string]$favouriteColour = "Blue"
switch ($favouriteColour) {
    "Red" {
        "Your favourite colour is Red"
        "I like red too."
    }
    "Blue" {
        "Your favourite colour is Blue"
        "I like Blue too."
    }
        default { "I dont recognise that colour" }
}


# Loops 
- example 

```
# Each time around the loop the code in the brackets will run while $counter is less than than $repeat.
# Each time around the loop the ++ symbols tell the variable to increment by one each time.
[int]$repeat = 5
for ($counter = 0; $counter -lt $repeat; $counter++) {
    Write-Host "hello"
}
# The while loop will continue until $counter is less than (-lt) the value 5 held in the $repeat variable.
[int]$repeat = 5
[int]$counter = 0
while ($counter -lt $repeat) {
    Write-Host "hello"
    $counter++
}
# Do While Loop is a variant of the while loop except the code is executed before the condition is checked to see if it repeats.
[int]$repeat = 5
[int]$counter = 0
do {
    Write-Host "hello"
    $counter++
}
while ($counter -lt $repeat)
# ForEach Loop
# Each time around the loop the $character variable becomes the next character in the list until there are no characters left.
[string]$stringOfCharacters = "PowerShell for Beginners"
foreach ($character in $stringOfCharacters.ToCharArray()) {
    Write-Host $character
}
# ForEach-Object loops
[string]$stringOfCharacters = "PowerShell for Beginners"
$stringOfCharacters.ToCharArray() | ForEach-Object { Write-Host "$_" }
```

- for loops 

$repeat:
[int]$repeat = 5
for ($counter = 0; $counter -lt $repeat; $counter++) {
    Write-Host "hello"
}

- while loops 

[int]$repeat  = 5
[int]$counter = 0
while ($counter -lt $repeat) {
    Write-Host "hello"
    $counter++
}

- do while loops 

[int]$repeat = 5
[int]$counter = 0
do {
    Write-Host "hello"
    $counter++
}
while ($counter -lt $repeat)

- foreach 

[string]$stringOfCharacters = "PowerShell for Beginners"
foreach ($character in $stringOfCharacters.ToCharArray()) {
    Write-Host $character
}

- foreach object loop

ForEach-Object loops work in a similar way to foreach loops except they require the input to be piped to them.

[string]$stringOfCharacters = "PowerShell for Beginners"
$stringOfCharacters.ToCharArray() | ForEach-Object { Write-Host "$_" }


# Arrays 
- examples 

```
# You can define an array by using the type Array and setting its initial value to @().
# This means create an empty array but you can also initiliase the array with an initial set of values.
[Array]$myArray = @(1, 2, 3, 5, 6, 7, 8, 9, 10)
$myArray

# Filling an array with strings.
[Array]$names = @("Ian", "Steve", "Rebecca", "Claire")
$names

# Creating a mixed object array.
[Array]$mixedArray = @("Ian", 4, 45.6, "Rebecca", 'A')
$mixedArray

# Accessing array properties such as count (number of itmes in the array).
[Array]$myArray = @(1, 2, 3, 4, 6, 7, 8, 9, 10)
Write-Host "Count:" $myArray.Count
Write-Host "IsFixedSize:" $myArray.IsFixedSize

# Accessing an entry in the Array. Remember the array starts at 0 where the first item is located.
[System.Collections.ArrayList]$names = @("Ian", "Steve", "Rebecca", "Claire")
Write-Host "Object from index 2:" $names[2]

# Looping through an array using a for loop.
[System.Collections.ArrayList]$names = @("Ian", "Steve", "Rebecca", "Claire")
for ($index = 0; $index -lt $names.Count; $index++) {
    Write-Host "Object from index $index" $names[$index]
}

# Looping through an array using a foreach loop.
[System.Collections.ArrayList]$names = @("Ian", "Steve", "Rebecca", "Claire")
foreach ($var in $names) {
    Write-Host "Current object in the array:" $var
}

# Removing an item from an array.
[System.Collections.ArrayList]$names = @("Ian", "Steve", "Rebecca", "Claire")
Write-Host "Original list of names:"
$names
$names.Remove("Claire")
Write-Host "New list of names:"
$names

# Removing an entry from the array using the index position in the array.
[System.Collections.ArrayList]$names = @("Ian", "Steve", "Rebecca", "Claire")
Write-Host "Original list of names:"
$names
$names.RemoveAt(0)
Write-Host "New list of names:"
$names
```

- initializing an array 

[Array]$myArray = @(1, 2, 3, 5, 6, 7, 8, 9, 10)
$myArray

- array properties and methods 

[Array]$myArray = @(1, 2, 3, 4, 6, 7, 8, 9, 10)
Write-Host "Count:" $myArray.Count
Write-Host "IsFixedSize:" $myArray.IsFixedSize

    + methods 
    
Int .Add( System.Object ) – Adds the new object to the ArrayList and returns the new length of the list.

Void .Clear() – Clears all objects from the ArrayList but keeps its size.

Bool .Contains( System.Object ) – Used to check if a collection contains a specified object.

Void .Insert( int, System.Object ) – Used to place a new object at a specified position.

Void .Remove( System.Object ) – Used to remove a matching object from the list.

Void .RemoveAt( int ) – Used to remove the object at the specified position. Remember the first position in a list is zero.

    + first entry in a list starts at 0.
    
[System.Collections.ArrayList]$names = @("Ian", "Steve", "Rebecca", "Claire")
Write-Host "Object from index 2:" $names[2]


# Functions 
- example 

```
#Beginners Guide to Functions
function Show-Menu
{
    #Display menu options
    Write-Host "------------"
    Write-Host "Menu Options"
    Write-Host "------------"
    Write-Host "Press P to play"
    Write-Host "Press Q to Quit"
}

#Function which adds two int values and returns the results
function Add-Numbers([int]$numberA, [int]$numberB){
    $sumOfNumbers = $numberA + $numberB
    #Display results to console
 Write-Host "Adding 5 and 10 equals: $sumOfNumbers"
}

#Function which adds two int values and returns the results
function Add-Numbers([int]$numberA, [int]$numberB){
    $sumOfNumbers = $numberA + $numberB
    #return the value of the results variable
    return $sumOfNumbers
}
```


# classes 
- define 

Class Person {
     #Define variables
    [string]$name
    [int]$positionX
    [int]$positionY
    [int]$health
    [int]$speed

    [string]$name
    Person() {
    }
    
    Person([string]$name){
        $this.name = $name
    }
    
    #Define methods
    DisplayPlayerStats(){
        Write-Host "Name:" $this.name
        Write-Host "Position X:" $this.positionX
        Write-Host "Position Y:" $this.positionY
        Write-Host "Health:" $this.health
        Write-Host "Speed:" $this.speed
    }
    
    SetPosition([int]$x, [int]$y) {
        $this.positionX = $x
        $this.positionY = $y
    }
    
    [bool]IsDead()
    {
        if ($this.health -le 0) {
            return $true
        }
        else {
            return $false
        }
    }
}

- create instance 

To create a new object from the class, we need to use the New-Object cmdlet and save the object into a variable, in our case $friend:

$friend = New-Object Person


# Customize the console 
- set properties 
```
#Get the console window
$psHost = Get-Host
$window = $psHost.ui.rawui
#Set the window properties
$window.WindowTitle = "My PowerShell Game"
$window.ForegroundColor = "Red"
$window.BackgroundColor = "Black"
#Clear the console
Clear-Host
Write-Host "Wow this is fun!"
```


# User input 
-  check if a key press is available and return the character if there is one and a $null if not:
function Read-Character() {
    if ($host.ui.RawUI.KeyAvailable) {
        return $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown").Character
    }
    return $null
}

PowerShell console via $host.ui.RawUI. From here, we can see if the KeyAvailable property is equal to $true or $false. 

- When the user presses the “Q” key, the script exists.
```
#Variables
$done = $false
function Read-Character() {
    if ($host.ui.RawUI.KeyAvailable) {
        return $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown").Character
    }
    return $null
}

#Clear console
Clear-Host

#Clear any pre existing key presses
$host.ui.RawUI.FlushInputBuffer()
Write-Host "Press any key or q to quit"

#Keep looping round checking for new key presses
#Loop round while done is not (!) equal to true
while (!$done) {
    #Check for new key presses
    $char = Read-Character
    if ($char -ne $null) {
        Write-Host "You pressed $char"
        #If the key press equals q then exit the loop
        if ($char -eq 'q') {
            $done = $true
        }
    }
}
```

- read a line of text 

```
#Clear console
Clear-Host
#Ask questions using -Prompt
$userResponse = Read-Host -Prompt 'What is your name? '
Write-Host "Hi $userResponse nice to meet you!"
#Read input from next line
Write-Host "Where are you from?"
$userResponse = Read-Host
```


# Dragon slayer
- color output 

Write-Host "This text is Black" -ForegroundColor Black

Write-Host "This text is displayed using..." -BackgroundColor DarkMagenta

- change default foreground and background color 

$psHost = Get-Host
$window = $psHost.ui.rawui
$window.BackgroundColor = "Red"
Clear-Host



# Ascii table
- output character 

for loop and writing the numerical value and ASCII symbol using Write-Host as shown in the following:
```
for ($i = 0; $i -le 255; $i++) {
    Write-Host $i "= $([char]$i)"
}
```

- add content 

Add-Content $fileName "<!DOCTYPE html><html><body><style>table 



# Cursor control 
- move cursor 

function Move-Cursor([int]$x, [int] $y) {
    $host.UI.RawUI.CursorPosition = New-Object System.Management.Automation.Host.Coordinates $x , $y
}
Clear-Host
Move-Cursor 5 2
Write-Host "X" -NoNewLine



# Background processing 
- To spawn a job, you first need to define a script block, which is essentially a small script, which will be passed into the Start-Job cmdlet.

```
$scriptBlock =
{
    param($countTo)
    for ($i = 0; $i -le $countTo; $i++) {
        Write-Host "Counter:$i"
        Start-Sleep -Seconds 1
    }
}
Start-Job $scriptBlock -ArgumentList 100
```

When you start a job, you can retrieve a reference to the job and use that to capture its ID

```
$job1 = Start-Job $scriptBlock -ArgumentList 50, 100
```

- receive job notification 

We can capture the new output into a variable and process the output in our script as required:
$results = Receive-Job -Job $job1
foreach ($res in $results) {
    Write-Host $res
}

- stopping jobs 

```
$scriptBlock =
{
    param($countFrom, $countTo)
    for ($i = 0; $i -le $countTo; $i++) {
        Write-output "Counter:$i"
        Start-Sleep -Seconds 1
    }
}
Write-Host "Starting Job"
$job = Start-Job $scriptBlock -ArgumentList 0, 100
Write-Host "Job Started ID:$($job.Id)"
Write-Host "Getting Job Status"
Get-Job -id $job.Id
Write-Host "Stopping Job"
Stop-Job -Id $job.Id
Write-Host "Getting Job Status"
Get-Job -id $job.Id
```

- removing jobs 

you may want to remove stopped and completed jobs. Leaving jobs in a stopped or completed state can use up system resources

Remove-Job -id $job.Id
Get-Job -Status "Completed" | Remove-Job


# Networking 
- creating a basic server 

tablished network services, so it’s best to choose a number above this range.

```
$port = 2000
$endPoint = new-object System.Net.IPEndPoint ([system.net.ipaddress]::any, $port)
$listener = new-object System.Net.Sockets.TcpListener $endPoint
$listener.start()
$client = $listener.AcceptTcpClient()

# Once we have a client connected to our server service, we need to open up a stream/connection through which they can exchange messages with each other. Then we can use the .NET object System.IO.StreamReader to handle the reading of new messages from the stream:

$stream = $client.GetStream()
```

- reading new messages 

$reader = New-Object System.IO.StreamReader $stream
$line = ""
while ($line -ne "QUIT") {
    $line = $reader.ReadLine()
    if ($line -ne $null) {
        Write-Host "Message Recieved:" $line
    }
}

- tcp socket 

Clear-Host
$port = 2000
$endPoint = new-object System.Net.IPEndPoint ([system.net.ipaddress]::any, $port)
$listener = new-object System.Net.Sockets.TcpListener $endPoint
$listener.Start()
Write-Host "Server Running"
$client = $listener.AcceptTcpClient()
Write-Host "Client Connected"
$stream = $client.GetStream();
$reader = New-Object System.IO.StreamReader $stream
$line = ""
while ($line -ne "QUIT") {
    $line = $reader.ReadLine()
    if ($line -ne $null) {
        Write-Host "Message Recieved:" $line
    }
}
Write-Host "Shutting Down"
$reader.Dispose()
$stream.Dispose()
$client.Dispose()
$listener.Stop()

- creating the tcp client 

$port = 2000
$server = "localhost"
$client = New-Object System.Net.Sockets.TcpClient $server, $port

- sending messages 

$stream = $client.GetStream()
$writer = New-Object System.IO.StreamWriter $stream
$writer.AutoFlush = $true
do {
    $message = Read-Host -prompt "Send Message"
    $writer.WriteLine($message)
}
while ($message -notlike "QUIT")


# Working with files 
- checking file exist 
```
Clear-Host
#Save file name and path to a variable
$file = "c:\scripts\testfile.txt"

#Call Test-Path cmdlet and pass in the full file path
#It will return $True if the file exists and $False if not
$fileExists = Test-Path $file

#Test if the $fileExists variable is true which means the file does exist
if ($fileExists -eq $True) {
    Write-Host "c:\scripts\Testfile.txt exists"
}else {
    Write-Host "c:\scripts\Testfile.txt does not exist"
}
```

- reading files 

```
#Clear the console
Clear-Host

#Save full file path to variable
$filePath = "c:\scripts\testfile.txt"

#Check if file exists
$fileExists = Test-Path $filePath
if ($fileExists -eq $True) {
    #Read lines in one go and access lines
    $lines = Get-Content $filePath
    Write-Host "Number of lines in the file:" $lines.Count
    
    #Loop throught the $lines array of string values
    Foreach ($line in $lines) {
        Write-Host $line
    }
}else {
    Write-Host "$filePath is missing"
}
```

- writing to files 

Add-Content can be used to create a file if it doesn’t exist, but if it does, it will add text to the end of it.

Set-Content, which will also create a file if it doesn’t exist, only this time if there is already an existing file, it overwrites that file


```
#Clear the console
Clear-Host

#File content
$fileContent = @("Line 1", "Line 2", "Line 3")

#Save full file path to variable
$filePath = "c:\scripts\testfile.txt"
Add-Content -Path $filePath -Value $fileContent
Write-Host "File has been created and the new file content has been added to it."
```

```

#Clear the console
Clear-Host

#File content
$fileContent = @("Line 1", "Line 2", "Line 3")

#Save full file path to variable
$filePath = "c:\scripts\testfile.txt"
Set-Content -Path $filePath -Value $fileContent
Write-Host "File has been created or overwritten and the new file content has been added to it."
```


# Sound 
- play beep 

```
[console]::beep(440, 200)
[console]::beep(340, 200)
[console]::beep(240, 200)
[console]::beep(149, 200)

# mixed with sleep to play more interesting tune 
Start-Sleep -m 300

```

- play wav files 

```
$sound = New-Object System.Media.SoundPlayer
$sound.SoundLocation = "C:\scripts\sound.wav"
$sound.Play()
$sound.Dispose()
```

- making powershell speak 

```
#Define .Net Class to use in session
Add-Type -AssemblyName System.speech

#Instanciate an object from the SpeechSynthesizer class
$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer

#Speak the text from the speakers
$speak.Speak("Would you like to play a game?")

#Clean up used memory
$speak.Dispose()
```

- pretty useful method to take advantage of.

```
#Define .Net Class to use in session
Add-Type -AssemblyName System.speech

#Instanciate an object from the SpeechSynthesizer class
$speak = New-Object System.Speech.Synthesis.SpeechSynthesizer

#Change the output to a local wav file
$speak.SetOutputToWaveFile("C:\scripts\sound.wav")

#Speak the text to the wav file
$speak.Speak("Would you like to play a game?")

#Clean up used memory
$speak.Dispose()
```


# Game engine 
- game loop, each of these steps to keep the code well organized:

1. Draw the level background to the display.
 
2. Draw the game objects to the screen.
 
3. Detect if any objects hit each other.
 
4. Run each object’s “behavior script.”
 
5. Detect key presses from the player and move the character on the screen.

- Draw the game over screen and wait for the player to press a key and then loop back to the title screen.

- load game configure file 



# Creating game artwork 
-  lots of others you can use and experiment with:

https://asciiartgen.now.sh

www.ascii-art-generator.org/

www.network-science.de/ascii/

- ascii images 

ASCII artwork generator for images:

http://sporkforge.com/imaging/ascii.php































