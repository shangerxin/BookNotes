Modern CSS, Master the Key Concepts of CSS for Modern Web Development=Joe;Note=Erxin


# Introduction to css 
- The website CanIUse.com (https://caniuse.com)

- preprocessors 

    + sass, for example, variables are declared and referenced starting with a $ character, as shown in Listing 1-11.
$header-color: red;
.header {
  background-color: $header-color;
}

    + A mixin allows you to write a set of CSS properties and values, then apply that entire set of properties to another CSS rule without having to repeat all the code

@mixin flexbox {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}
.header {
  @include flexbox;
}

    + THE CSS OBJECT MODEL (CSSOM) Similar to the DOM, there is also a CSS Object Model, or CSSOM. This is another tree structure that represents the hierarchy of styles in the document
    
    
    
# Selectors 



# Basic concepts 
- block 
- inline 
- inline-block,  An inline-block element flows with the text like an inline element, but the width and height properties are respected
- units 


# Basic styling 
- global keywords 

initial: Uses the initial value set by the browser’s built-in style sheet.

inherit: Takes the value used by the element’s parent.

unset: If the property naturally inherits from its parent, such as font-size, it is set to the inherited value. Otherwise, it is set to the initial value from the browser’s style sheet.

- shorthands and multi values 



# Backgrounds and gradients 
- example 
.gradient {
    background-image: linear-gradient(red, blue);
    width: 10rem;
    height: 5rem;
}


# text styling 


# Layout and positioning 
- padding 
- margin 
- stack z-index 


# Transforms 
- perspective transform activates 3D space for an element.
- rotation 

deg: Degrees. A full circle is 360deg.

grad: Gradians. A full circle is 400grad.

rad: Radians. A full circle is approximately 2π radians, or approximately 6.28rad.

turn: Number of turns. A full circle is 1turn.

- axis 

X-axis: Goes from left to right across the page

Y-axis: Goes from the top of the page to the bottom

Z-axis: 3D axis, goes from the “surface” of the page out toward you

- origin 

  .rotate {
    width: 10rem;
    height: 5rem;
    background: skyblue;
    margin: 5rem;
    transform: rotate(45deg);
  }

  .rotate {
    width: 10rem;
    height: 5rem;
    background: skyblue;
    margin: 5rem;
    transform: perspective(200px)
               rotateX(45deg);
  }
  
- scaling 

  .scale {
    background: skyblue;
    text-align: center;
    transform: scale(2, 5);
    margin: 5rem auto;
    width: 10rem;
  }

- skewing, These functions distort an element by a given angle in the X and Y directions.
  .skew {
    background: skyblue;
    transform: skew(45deg, 20deg);
    width: 10rem;
    font-size: 2rem;
    text-align: center;
    margin: 5rem;
  }

- multiple transform 

transform: translateX(100px) rotate(45deg);

- heart example 

.heart {
    background: red;
    transform: rotate(45deg);
    width: 10rem;
    height: 10rem;
    margin: 10rem auto;
}

.heart::after,

.heart::before {
    border-radius: 50%;
    content: '';
    width: 10rem;
    height: 10rem;
    position: absolute;
    background: red;
}

.heart::before {
    transform: translateX(-5rem);
}

.heart::after {
    transform: translateY(-5rem);
}

<div class="heart"></div>

- cube example 

<style>
  .container {
    width: 10rem;
    height: 10rem;
    perspective: 500px;
    margin: 5rem;
  }
  .cube {
    position: relative;
    width: 10rem;
    height: 10rem;
    transform-style: preserve-3d;
    transform: rotate3d(1, 1, 0, 45deg);
  }
  .face {
    width: 10rem;
    height: 10rem;
    background: skyblue;
    border: 2px solid black;
    position: absolute;
    opacity: 0.5;
    text-align: center;
  }
  .front {
    transform: translateZ(5rem);
  }
  .back {
    transform: translateZ(-5rem) rotateY(180deg);
  }
  .left {
    transform: translateX(-5rem) rotateY(-90deg);
  }
  .right {
    transform: translateX(5rem) rotateY(90deg);
  }
  .top {
    transform: translateY(-5rem) rotateX(90deg);
  }
  .bottom {
    transform: translateY(5rem) rotateX(-90deg);
  }
</style>
<div class="container">
  <div class="cube">
    <div class="face top">Top</div>
    <div class="face bottom">Bottom</div>
    <div class="face left">Left</div>
    <div class="face right">Right</div>
    <div class="face front">Front</div>
    <div class="face back">Back</div>
  </div>
</div>


# Transition and animations 
- transitions provide an animated transition from a start state to an end state 

button.fancy-button {
  background: blue;
  transition-property: background-color, transform;
  transition-duration: 500ms, 500ms;
  transition-delay: 0ms, 500ms;
}

- easing functions 

linear 
ease 
ease-in 
ease-out 
ease-in-out 

https://matthewlein.com/tools/ceaser

https://cubic-bezier.com/

- animations provide animated transitions between any arbitrary number of states.

<style>
  @keyframes colors {
    0% {
      background: red;
    }
    50% {
      background: blue;
    }
    100% {
      background: green;
    }
  }
  .box {
    animation: colors 2s;
    width: 10rem;
    height: 10rem;
  }
</style>
<div class="box"></div>

- conditional display animation 
We can conditionally disable the animation by using the prefers-reduced-motion media query.
@media (prefers-reduced-motion: reduce) {
  .loader {
    animation: none;
  }
}


# Flexbox 
- direction 

flex-direction property. It can be either a row (horizontal) or column (vertical). This is shown in Figure 10-1. There are actually four values for the flex-direction property: row, row-reverse, column, and column-reverse.

- example 
<style>
  .container {
    display: flex;
    flex-direction: row;
    border: 1px solid black;
  }
  .item,
  .item2,
  .item3 {
    background: rebeccapurple;
    font-size: 3rem;
    padding: 2rem;
    color: white;
  }
  .item2 {
    background: skyblue;
  }
  .item3 {
    background: orangered;
  }
</style>
<div class="container">
  <div class="item">1</div>
  <div class="item2">2</div>
  <div class="item3">3</div>
</div>

- The writing mode is defined by the writing-mode property . This property determines the way block elements are laid out, and how inline elements flow inside them.

default value is horizontal-tb. For LTR languages

 vertical-rl and vertical-lr

- align-items property
stretch
flex-start 
flex-end 
center 
baseline 


# Responsive design 
- viewport meta tag 

<meta
  name="viewport"
  content="width=device-width, initial-scale=1.0">

- media queries 
h1 {
  color: red;
}
@media screen and (max-width: 400px) {
  h1 {
    color: blue;
  }
}

@media screen and (max-width: 785px) {
  h1 {
    font-size: 3rem;
  }
}

@media screen and (max-width: 785px) {
  h1 {
    font-size: 3rem;
  }
}
@media screen and (max-width: 480px) {
  h1 {
    font-size: 2rem;
  }
}

- responsive layout flexbox, example 

<style>
  body {
    margin: 0;
  }
  .container {
    display: flex;
    flex-direction: column;
    height: 100vh;
  }
  .header {
    background: orange;
    padding: 1rem;
  }
  .main {
    display: flex;
    flex-direction: row;
    flex-grow: 1;
  }
  .content {
    background: salmon;
    padding: 1rem;
    flex-grow: 1;
  }
  .sidebar {
    display: flex;
    flex-direction: column;
    background: skyblue;
    padding: 1rem;
  }
  .sidebar a {
    margin: 1rem;
    padding: 0.5rem 2rem;
    border: 1px solid black;
  }
  .sidebar2 {
    background: lime;
    padding: 1rem;
  }
  .footer {
    background: beige;
    padding: 1rem;
  }
  
  @media screen and (max-width: 700px) {
      .main {
        flex-direction: column;
      }
  }
  
  @media screen and (max-width: 700px) {
      .main {
        flex-direction: column;
      }
      .sidebar {
        flex-direction: row;
        justify-content: center;
      }
    }
</style>
<div class="container">
  <header class="header">Header</header>
  <main class="main">
    <nav class="sidebar">
      <a href="/home">Home</a>
      <a href="/about">About</a>
      <a href="/photos">Photos</a>
    </nav>
    <div class="content">
      Hello world!
    </div>
    <div class="sidebar2">
      Sidebar 2
    </div>
  </main>
  <footer class="footer">Footer</footer>
</div>



# CSS grid 
- CSS Grid is a relatively new feature that allows you to create two-dimensional grid layouts with rows and columns.

 a grid container, set its display property to grid or inline-grid. 
 
 units, px, em, rem, even percentages. CSS Grid introduces a new unit, the fr unit
 
- explicit grid 
- impplicit grid 

- example 

<style>
  .container {
    display: grid;
    grid-template-columns: 10rem 10rem;
    grid-template-rows: 5rem 5rem;
    gap: 5px;
  }
  .item {
    background: lightgray;
    text-align: center;
  }
</style>
<div class="container">
  <div class="item">1</div>
  <div class="item">2</div>
  <div class="item">3</div>
  <div class="item">4</div>
</div>


# Wrap up 
- CSS methodologies
As a CSS codebase grows, it can quickly get out of control. There are many solutions out there for organizing and architecting CSS code, and here are just a few of them:
BEM (Block Element Modifier): Uses strict naming rules. Each element’s name has a block, element, and modifier. An example of this is form__button--red. In this example form is the block, button is the element, and red is the modifier.

OOCSS (Object-Oriented CSS): Applies object-oriented principles to CSS. Separates container elements, or “skins,” from content.

SMACSS (Scalable and Modular Architecture for CSS): Categorizes CSS rules into five categories: base, layout, module, state, and theme.

- Utility-first CSS frameworks, such as Tailwind, are fairly new but are a very different way of thinking about CSS. Instead of writing your own CSS rules that apply styles to elements, there are predefined “utility” rules

- Houdini Houdini is a work-in-progress set of APIs that expose various parts of the CSS Object Model, and new APIs, to the developer



# CSS in depth 
- A vertical-align declaration only affects inline and table-cell elements. With inline elements, it controls alignment among other elements on the same line. You can use it to control how an inline image aligns with the neighboring text, for example.

- Bootstrap (http://getbootstrap.com/), Foundation (http://foundation.zurb.com/), and Pure (http://purecss.io/). There are countless others as well

- gradient 

.fade {
  height: 1em;
  width: 400px;
  background-image: repeating-linear-gradient(-45deg,      1
    #57b, #57b 10px, #148 10px, #148 20px);                1
  border-radius: 0.3em;
}

basic 

circle 

radial-gradient 

- shadow 

.button:active {
  box-shadow: inset 0 0 0.5em #124,                               3
              inset 0 0.5em 1em rgba(0,0,0,0.4);                  3
}

- flatten design 

.button {
  padding: 1em;
  border: 0;
  color: white;
  background-color: #57b;                           1
  font-size: 1rem;
  padding: 0.8em;
  box-shadow: 0 0.2em 0.2em rgba(0, 0, 0, 0.15);    2
}
.button:hover {
  background-color: #456ab6;                        3
}
.button:active {
  background-color: #148;                           3
}

- blend modes 

background-image: url(bear.jpg), linear-gradient(to bottom, #57b, #148);

darken 
lighten 
contrast 
composite 
comparative 

    + adding texture into image 
    
.blend {
  min-height: 400px;
  background-image: url("images/scratches.png"), url("images/bear.jpg");   1
  background-size: 200px, cover;                                           2
  background-repeat: repeat, no-repeat;                                    2
  background-position: center center;
  background-blend-mode: soft-light;                                       3
}

  mix-blend-mode: hard-light;            1
  background-color: #c33;                2
  color: #808080;                        2

- webfonts 

Typekit (www.typekit.com/)
Webtype (www.webtype.com)
Google Fonts (https://fonts.google.com/)

    + how font works 
    
1 The @font-face ruleset, defining a single font for use elsewhere in your page’s CSS
2 Declares the name for this font
3 Defines which font style and font weight this @font-face applies to
4 Location(s) where the font file can be found
5 The unicode character ranges this @font-face applies to

@font-face {
  font-family: "Roboto";
  font-style: normal;
  font-weight: 300;
  src: local("Roboto Light"), local("Roboto-Light"),
       url(https://example.com/roboto.woff2) format('woff2'),      1
       url(https://example.com/roboto.woff) format('woff');        2
}

- test font-loading behavior
If you’re developing over a fast network connection, it can be difficult to test your site’s font-loading behavior

-  a FOUT is less noticeable. The tool at https://meowni.ca/font-style-matcher/ can help with this.

- fallback 

@font-face {
  font-family: "Roboto";
  font-style: normal;
  font-weight: 300;
  src: local("Roboto Light"), local("Roboto-Light"),
       url(https://example.com/roboto.woff2) format('woff2'),
       url(https://example.com/roboto.woff) format('woff');
  font-display: swap;                                           1
}

auto—The default behavior (a FOIT in most browsers).
swap—Displays the fallback font, then swaps in the web font when it’s ready (a FOUT).
fallback—A compromise between auto and swap. For a brief time (100 ms), the text will be invisible. If the web font isn’t available at this point, the fallback font is displayed. Then, once the web font is loaded, it’ll be displayed.
optional—Similar to fallback, but allows the browser to decide whether to display the web font based on the connection speed. Typically, this means the web font may not appear at all on slower connections.

- https://sass-lang.com/documentation/syntax
- less, http://lesscss.org/


- custom properties 


:root {
    --footer-link-hover: #0cg; /* Not a valid color value. */
}
a:link {
     color: blue;
}
a:hover {
    color: red;
}
footer a:hover {
    color: var(--footer-link-hover);
}

document.body.style.setProperty('--bg-home', 'whitesmoke');

    + with media query 
:root {
    --button-padding: .5rem 1rem;
}
@media screen and (pointer: coarse) {
    :root {
        --button-padding: 1rem 2rem;
    }
}
button {
    padding: var(--button-padding);
}

- csso, CSSO will rearrange parts of your CSS

$ npm install -g csso

csso style.css style.min.css

- stylelint 

https://github.com/stylelint/stylelint

- uncss 

$ npm install -g uncss

- using css with svg 

<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0
➥ 200 200" enable-background="new 0 0 200 200">
    <style type="text/css">
        circle {
            fill: #0c0;
        }

    </style>
    <circle cx="101.3" cy="96.8" r="79.6" />
</svg>

<defs>
    <link href="style.css" type="text/css" rel="stylesheet"
➥ xmlns="http://www.w3.org/1999/xhtml"/>
</defs>