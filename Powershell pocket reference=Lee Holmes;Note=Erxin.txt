Powershell pocket reference=Lee Holmes;Note=Erxin


# A guided tour of powershell 
- Structured Commands (Cmdlets)

Verb-Noun pattern, such as Get-Process, Get-Content, and Stop-Process:

- Get-Process cmdlet) along with parameter shortening, you can instead type:

PS> gps -n lsass

- deep integration of objects 

the following command stores a reference to it:

ps> $process = Get-Process notepad

ps> $process.Kill()

- administrators as first class users 

- composable commands 

use a pipeline character (|) to pass that output directly to another command as input

- command discovery 

Get-Command cmdlet. For example, by entering the following, you can find out which PowerShell commands 

ps> get-command *process* 


- add up the handle count for all running processes:

PS > $handleCount = 0
PS > foreach($process in Get-Process) {
    $handleCount += $process.Handles }
PS > $handleCount

- Working with Active Directory in PowerShell
PS > [ADSI] "WinNT://./Administrator" | Format-List *

- Working with COM objects in PowerShell
PS > $firewall = New-Object -com HNetCfg.FwMgr
PS > $firewall.LocalPolicy.CurrentProfile

- namespace navigation through providers 

Navigating the filesystem
PS > Set-Location c:\
PS > Get-ChildItem


- download at https://github.com/LeeHolmes/PowerShellCookbook.



# Powershell language environment 
- evaluation controls 

Precedence control ()
$ 5 * (1 + 2)

Expression subparse $() 
$ "The answer is $(2+2)"

list evaluation @() 

$ @("Hello").Length

- comments 

```
# This is a regular comment

<# This is a block comment

function MyTest
{
    "This should not be considered a function"
}

$myVariable = 10;

Block comment ends
#>
```

- help comments 

```
all case-insensitive:

.SYNOPSIS
A short summary of the command, ideally a single sentence.

.DESCRIPTION
A more detailed description of the command.

.PARAMETER name
A description of parameter name, with one for each parameter you want to describe. 

.EXAMPLE
An example of this command in use, with one for each example you want to provide

.INPUTS
A short summary of pipeline input(s) supported by this command


.OUTPUTS
A short summary of items generated by this command. 

.LINK
A link to a related help topic or command, with one .LINK tag per link.
```

- variables 

$simpleVariable = "Value"

A simple variable name

$variable1, $variable2 = "Value1", "Value2"

Multiple variable assignment.


${ arbitrary!@#@\#{var}iable } = "Value"

An arbitrary variable name. 

${c:\filename. extension}

Variable “Get and Set Content” syntax.


[datatype] $variable = "Value"

Strongly typed variable. 

[constraint] $variable = "Value"

Constrained variable.

$SCOPE:variable

Gets or sets the variable at that specific scope. 

New-Item Variable:\variable -Value value

Creates a new variable using the variable provider


Get-Item Variable:\variable

Get-Variable variable

Gets the variable using the variable provider or Get-Variable cmdlet. 

- booleans 

Result	                            Boolean representation
$true                               True

$false                              False

$null                               False

Nonzero number                      True   

Zero                                False

Nonempty string                     True

Empty string                        False

Empty array                         False

Single-element array                The Boolean representation of its single element

Multi-element array                 True

Hashtable (either empty or not)     True

- string 

single quotes:

$myString = 'hello `t $ENV:SystemRoot'



expanding string in double quotes:

$myString = "hello `t $ENV:SystemRoot"



here strings 

$myHereString = @"
This text may span multiple lines, and may
contain "quotes."
"@

- escape sequences 

`0  The null character. Often used as a record separator.

`a  The alarm character. Generates a beep when displayed on the console.

`b  The backspace character. 

`e  The escape character. Marks the beginning of an ANSI escape sequence such as "`e[2J“.

`f  A form feed. Creates a page break when printed on most printers.

`n  A newline.

`r  A carriage return. Newlines in PowerShell are indicated entirely by the `n character

`t  A tab.

`u{hex-code}     A unicode character literal. Creates a character represented by the specified hexadecimal

`v  A vertical tab.

'' (two single quotes)  A single quote, when in a literal string.

"" (two double quotes)  A double quote, when in an expanding string.

`any other character    That character, taken literally.


- Script header. we always start with the following fields:

Author
Version
Date
Description
Usage

- simple assignment 

$myByte = 127y
$myByte = [byte] 127
$myUnsignedByte = 127uy


- administrative numeric constants 

$downloadTime = (1gb + 250mb) / 120kb

hex 
$myErrorCode = 0xFE4A

octal 
$myBinary = 0b101101010101

toString 
$myBinaryString = [Convert]::ToString(12345, 2)

- Large number 

BigInt class.

[BigInt]::Pow(12345, 123)

- image and complex numbers 

maginary and complex numbers, use the System.Numerics.Complex

- array definitions 

$myArray = @()

$mySimpleArray = 1,"Two",3.14

$myList = ,"Hello"

$myList = @("Hello")

    + jagged arrays (arrays within arrays):

$multiDimensional = @(
  (1,2,3,4),
  (5,6,7,8)
)

$myArray[-1..2]

$myArray[0]

- hashtable 

$myHashtable = @{}

$myHashtable = @{ Key1 = "Value1"; "Key 2" = 1,2,3; 3.14 = "Pi" }

$myHashtable["Key1"]

$myHashtable["New Item"] = 5

- xml

To create an XML variable, cast a string to the [xml] type:
 
```
$myXml = [xml] @"
<AddressBook>
   <Person contactType="Personal">
      <Name>Lee</Name>
      <Phone type="home">555-1212</Phone>
      <Phone type="work">555-1213</Phone>
   </Person>
   <Person contactType="Business">
      <Name>Ariel</Name>
      <Phone>555-1234</Phone>
   </Person>
</AddressBook>
"@
```

- simple operators 

    + arithmetic operators 
    
$ [Math]::Pow([Math]::E, [Math]::Pi)

```
+ - * / % += -= *= /= %= 

-and -or -xor -not ! 

# binary 
-band -bor -bxor -bnot -shl -shr 

# shift left shl, shift right shr  

# other operators 
-repace 

-f format 

-as type covnersion 

-split 
$ -split "hello world"

-join 

# comparison operators 
-eq -ne -ge -gt -in -notin -le -like -notlike -match -notmatch -contains -notcontains -is -isnot 
$ $leftValue -like Pattern

like, Evaluates the pattern against the target, returning $true if the simple match is successful. support pattern 
?: Any single unspecified character
*: Zero or more unspecified characters
[a-b]: Any character in the range of a–b
[ab]: The specified characters a or b

match, "Target" -match Regular Expression Evaluates the regular expression against the target

```

- condition statements 

if(condition)
{
   statement block
}
elseif(condition)
{
   statement block
}
else
{
   statement block
}

- ternary operator 

$result = condition ? true value : false value

- null assignment 
$ nullable value ?? default value

$ result ??= default value


- switch 

switch options expression
{
   comparison value           { statement block }
   -or-
   { comparison expression }  { statement block }
   (...)
   default                    { statement block }
}

    + switch statement 
    
```
-c -casesensitive 
-e -exact 
-r -regex 
-w -wildcard ?, * [a-b] [ab..] a or b 
```

The { comparison expression } statements let you process the current input item, which is stored in the $_ (or $PSItem) variable, in an arbitrary script block


```
$myPhones = "(555) 555-1212","555-1234"

switch -regex ($myPhones)
{
  { $_.Length -le 8 }  { "Area code was not specified"; break }
  { $_.Length -gt 8 }  { "Area code was specified" }
  "\((555)\).*"        { "In the $($matches[1]) area code" }
}
```

- looping statement 

:loop_label for (initialization; condition; increment)
{
   statement block
}

for($counter = 0; $counter -lt 10; $counter++)
{
    Write-Host "Processing item $counter"
}

:loop_label foreach(variable in expression)
{
   statement block
}

$handleSum = 0
foreach($process in Get-Process |
    Where-Object { $_.Handles -gt 500 })
{
   $handleSum += $process.Handles
}
$hand

$handleSum = 0
(Get-Process).foreach( { $handleSum += $_.Handles } )

- while statement 

:loop_label while(condition)
{
   statement block
}

$command = "";
while($command -notmatch "quit")
{
   $command = Read-Host "Enter your command"
}

- do ... while statement/do ... unitl statement 

:loop_label do
{
   statement block
} while(condition)


:loop_label do
{
   statement block
} until(condition)

- flow contorl break 

for($counter = 0; $counter -lt 5; $counter++)
{
    for($counter2 = 0; $counter2 -lt 5; $counter2++)
    {
        if($counter2 -eq 2)
        {
            break
        }

        Write-Host "Processing item $counter,$counter2"
    }
}

:outer_loop for($counter = 0; $counter -lt 5; $counter++)
{
    for($counter2 = 0; $counter2 -lt 5; $counter2++)
    {
        if($counter2 -eq 2)
        {
            break outer_loop
        }

        Write-Host "Processing item $counter,$counter2"
    }
}

:outer_loop for($counter = 0; $counter -lt 5; $counter++)
{
    for($counter2 = 0; $counter2 -lt 5; $counter2++)
    {
        if($counter2 -eq 2)
        {
            continue outer_loop
        }

        Write-Host "Processing item $counter,$counter2"
    }
}

- classes 

## A class called "Example" that inherits from "BaseClass"
## and implements the "ImplementedInterface" interface
class Example : BaseClass, ImplementedInterface
{
    ## Default constructor, which also invokes the constructor
    ## from the base class.
    Example() : base()
    {
        [Example]::lastInstantiated = Get-Date
    }

    ## Constructor with parameters
    Example([string] $Name)
    {
        $this.Name = $Name
        [Example]::lastInstantiated = Get-Date
    }

    ## A publicly visible property with validation attributes
    [ValidateLength(2,20)]
    [string] $Name

    ## A property that is hidden from default views
    static hidden [DateTime] $lastInstantiated

    ## A publicly visible method that returns a value
    [string] ToString()
    {
        ## Return statement is required. Implicit / pipeline output
        ## is not treated as output like it is with functions.
        return $this.ToString( [Int32]::MaxValue )
    }

    ## A publicly visible method that returns a value
    [string] ToString([int] $MaxLength)
    {
        $output = "Name = $($this.Name);"
            "LastInstantiated = $([Example]::lastInstantiated)"
        $outputLength = [Math]::Min($MaxLength, $output.Length)
        return $output.Substring(0, $outputLength)
    }

}

- custom enumerations 

enum MyColor {
  Red = 1
  Green = 2
  Blue = 3
}

[Flags()] enum MyColor : uint {
  Red = 1
  Green = 2
  Blue = 4
}

- workflow specific statement, InlineScript, Parallel, Sequence 

    + InlineScript, defines an island of PowerShell script that will be invoked as a unit, and with traditional PowerShell scripting semantics

workflow MyWorkflow
{
    ## Method invocation not supported in a workflow
    ## [Math]::Sqrt(100)

    InlineScript
    {
        ## Supported in an InlineScript
        [Math]::Sqrt(100)
    }
}

    + parallel/sequence
    
workflow MyWorkflow
{
    Parallel
    {
        InlineScript { Start-Sleep -Seconds 2;
            "One thing run in parallel" }
        InlineScript { Start-Sleep -Seconds 4;
            "Another thing run in parallel" }
        InlineScript { Start-Sleep -Seconds 3;
            "A third thing run in parallel" }

        Sequence
        {
            Start-Sleep -Seconds 1
            "A fourth"
            "and fifth thing run as a unit, in parallel"
        }
    }
}

- call a static .net method 

ps> [System.Diagnostics.Process]::GetProcessById(0)

- instance method 

ps> $objectReference.MethodName(parameter list)

- explicitly implemented interface methods 

PS > ([IConvertible] 123).ToUint16($null)

- static properties 

[ClassName]::PropertyName

- instance propewrties 

$objectReference.PropertyName

- learning about types 

[typename] | Get-Member-Static

$objectReference | Get-Member-Static

$objectReference | Get-Member

[typename] | Get-Member

- .net document 

https://docs.microsoft.com/

- type shortcuts 

[Adsi]     [System.DirectoryServices.​DirectoryEntry]

[AdsiSearcher] [System.DirectoryServices.​DirectorySearcher]

[Float]        [System.Single]

[Hashtable]    [System.Collections.Hashtable]

[Int]          [System.Int32]

[IPAddress]    [System.Net.IPAddress]

[Long]         [System.Collections.Int64]

[PowerShell]   [System.Management.Automation.​PowerShell]

[PSCustomObject] [System.Management.Automation.​PSObject]

[PSModuleInfo]   [System.Management.Automation.​PSModuleInfo]

[PSObject]       [System.Management.Automation.​PSObject]

[Ref]            [System.Management.Automation.​PSReference]

[Regex]          [System.Text.RegularExpressions.​Regex]

[Runspace]       [System.Management.Automation.​Runspaces.Runspace]

[Runspace​Factory] [System.Management.Automation.​Runspaces.RunspaceFactory]

[ScriptBlock]     [System.Management.Automation.​ScriptBlock]

[Switch]          [System.Management.Automation.​SwitchParameter]

[Wmi]             [System.Management.ManagementObject]

[WmiClass]        [System.Management.ManagementClass]

[WmiSearcher]      [System.Management.​ManagementObjectSearcher]

[Xml]              [System.Xml.XmlDocument]

[TypeName]         [System.TypeName]

- creating instances of types 

$objectReference = New-Object TypeName parameters
$objectReference = [TypeName]::new(parameters)

- interactive com object 

PS > $shell = New-Object -Com Shell.Application
PS > $shell.Windows() | Select-Object LocationName,LocationUrl

interact with a COM object, use its ProgId with the -ComObject parameter (often shortened to -Com) on New-Object:


- extending types, add-member cmdlet and custom types extension file 

AliasProperty  A property defined to alias another property

CodeProperty   A property defined by a System.Reflection.​Meth⁠odInfo.

NoteProperty   A property defined by the initial value you provide

ScriptProperty  A property defined by the script block you provide.

PropertySet   A property defined as a shortcut to a set of properties

CodeMethod    A method defined by a System.Reflection.​Meth⁠odInfo.

ScriptMethod   A method defined by the script block you provide.

    + use Update-TypeData cmdlet to load customization 
    
$typesFile = Join-Path (Split-Path $profile) "Types.Custom.Ps1Xml"
Update-TypeData -PrependPath $typesFile

- Wring scripts 

    + functions 
function SCOPE:name(parameters)
{
   statement block
}

filter SCOPE:name(parameters)
{
   statement block
}

- call a function 

$result = GetMyResults($item1, $item2)

- script block, script blocks, which act exactly like unnamed functions and scripts. Like both scripts and functions, the content of a script block’s statement block follows the same rules as the content of a function 

$objectReference =
{
   statement block
}

- running command, Invoking a command runs the commands inside it. 

Set-ExecutionPolicy RemoteSigned

c:\temp\Invoke-Commands.ps1 parameter1 parameter2 ...
Invoke-MyFunction parameter1 parameter2 ...

run as a background job 
$ c:\temp\Invoke-Commands.ps1 parameter1 parameter2 ... &

- dot-sourcing 

dot operator (.) and providing the command name as the parameter:

. "C:\Script Directory\Invoke-Commands.ps1" Parameters
. Invoke-MyFunction parameters
. $scriptBlock parameters


$module = Get-Module PowerShellCookbook
. $module Invoke-MyFunction parameters
. $module $scriptBlock parameters

- Get-Command cmdlet to see the parameters supported by a command

$ Get-Command Stop-Process -Syntax

Stop-Process [-Id] <int[]> [-PassThru] [-Force] [-WhatIf] [...]
Stop-Process -Name <string[]> [-PassThru] [-Force] [-WhatIf] [...]
Stop-Process [-InputObject] <Process[]> [-PassThru] [-Force] [...]

- providing input to commands 

$firstArgument = $args[0]
$secondArgument = $args[1]
$argumentCount = $args.Count

param(
    [TypeName] $VariableName = Default,
    ...
)

[CmdletBinding(cmdlet behavior customizations)]
param(
    [Parameter(Mandatory = $true, Position = 1, ...)]
    [Alias("MyParameterAlias"]
    [...]
    [TypeName] $VariableName = Default,
    ...
)

- Command behavior customizations, 

ConfirmImpact = "High"
Defines this command as one that should have its confirmation messagesnteracts with the system:

SupportsShouldProcess = $true

DefaultParameterSetName = name

ConfirmImpact = "High"
Defines this command as one that should have its confirmation messages


- Parameter attribute 

Mandatory = $true 

Postion=position 

ParameterSetName

ValueFromPipeline = $true 

ValueFromRemainingArguments = $true 

    + parameter validation attribute 
    
[Alias("name")]
Defines an alternate name for this parameter. 

[AllowNull()]
Allows this parameter to receive $null

[AllowEmptyString()]
Allows this string parameter to receive an empty string as its value. 

[AllowEmptyCollection()]
Allows this collection parameter to receive an empty collection as its value.

[ValidateCount(lower limit, upper limit)]
Restricts the number of elements that can be in a collection supplied

[ValidateLength(lower limit, upper limit)]
Restricts the length of strings that this parameter can accept.

[ValidatePattern("regular expression")]
Enforces a pattern that input to this string parameter must match. 

[ValidateRange(lower limit, upper limit)]
Restricts the upper and lower limit of numerical arguments that this parameter can accept. 

[ValidateSet("First Option", "Second Option", …, "Last Option")]
Ensures that input supplied to this parameter is equal to one of the options in the set. 

[ValidateNotNull()]
Ensures that input supplied to this parameter is not null.

[ValidateScript( { script block } )]
Ensures that input supplied to this parameter satisfies the condition that you supply in the script block.

[ValidateNotNullOrEmpty()]
Ensures that input supplied to this parameter is not null or empty. 

- Pipeline input 

$input special variable:

foreach($element in $input)
{
   "Input was: $element"
}

- Cmdlet keywords in command 

begin, process, and end:

param(...)

begin
{
   ...
}
process
{
   ...
}
end
{
   ...
}

- return statement 
- exit statement 

Exit statement
exit errorlevel

- Managing errors 

The environment $ErrorActionPreference automatic variables 
Ignore, SlientlyContinue, Stop, Continue, Inquire which means display a promp 

error using the Write-Error cmdlet

check current 
ps> write-host $ErrorActionPreference

- Terminating errors 

ps> throw message

```
try
{
    statement block
}
catch [exception type]
{
    error handling block
}
catch [alternate exception type]
{
    alternate error handling block
}
finally
{
    cleanup block
}
```

trap statement before PowerShell encounters that error, trap statement applies only to terminating errors of that type.

```
trap [exception type]
{
   statement block
   [continue or break]
}
```

- Pipeline | Formatting Command

Format-Table  Formats the properties of the input objects as a table

Format-List   Formats the properties of the input objects as a list

Format-Wide   Formats the properties of the input objects in an extremely terse summary view. 

- Custom Formatting Files  All the formatting defaults in PowerShell

$formatFile = Join-Path (Split-Path $profile)
    "Format.Custom.Ps1Xml"
Update-FormatData -PrependPath $formatFile

The Update-FormatData cmdlet applies your changes to the current instance of PowerShell.

- Capture output 

$variable = Command

Stores the objects produced by the PowerShell command into $variable.



$variable = Command | Out-String

Stores the visual representation of the PowerShell command into $variable.



$variable = NativeCommand

Stores the (string) output of the native command into $variable



Command -OutVariable variable

For most commands, stores the objects produced by the PowerShell command into $variable. 



Command > File

Redirects the visual representation of the PowerShell (or standard output of a native command) into File



Command >> File

Redirects the visual representation of the PowerShell (or standard output of a native command) into File, appending to File



Command 2> File

Redirects the errors from the PowerShell or native command into File



Command n>File

Redirects stream number n into File, overwriting File if it exists. Supported streams are 2 for error, 3 for warning, 4 for verbose, 5 for debug, 6 for the structured information stream, and * for all.



Command > File 2>&1

Redirects both the error and standard output streams of the PowerShell or native command into File, overwriting File if it exists.


- common customization pionts 

    + console setting 
    
    {
        "guid": "...",
        "name": "PowerShell (Demos)",
        "fontSize": 18,
        "colorScheme": "Campbell Powershell",
        "source": "Windows.Terminal.PowershellCore"
    },
    
    https://learn.microsoft.com/en-us/windows/terminal/customize-settings/startup
    
    https://learn.microsoft.com/en-us/windows/terminal/customize-settings/profile-general
    
    + shortcut 
    
Ctrl+Shift+F  In the Windows Terminal application, searches for text in the screen buffer
Ctrl+Shift+T  In the Windows Terminal application, opens a new tab. 
Ctrl+Break    In the Windows Console, breaks the PowerShell debugger into the currently running script.
Ctrl+Z, Ctrl+Y   Undo and Redo.
Ctrl+R        Begins an interactive search backward through your command history

    + profiles 

PS > $profile | Format-List -Force

AllUsersAllHosts       : C:\...Microsoft.PowerShell..\profile.ps1
AllUsersCurrentHost    : C:\...\Microsoft.PowerShell_profile.ps1
CurrentUserAllHosts    : D:\Lee\PowerShell\profile.ps1
CurrentUserCurrentHost : D:\...\Microsoft.PowerShell_profile.ps1

    + prompts 
    
function prompt
{
    "PS [$env:COMPUTERNAME] >"
}

    + tab completion, definition as a starting point:

Get-Content function:\TabExpansion2

    + command resolution  Command​LookupEventArgs:

$executionContext.SessionState.
    InvokeCommand.CommandNotFoundAction = {
        param($CommandName,
    $CommandLookupEventArgs)
        (...)
}



# Regular expression reference 
- patterns which different from python 

\p{character class}   Any character in the Unicode group or block range specified by {character class}.

\P{character class}   Any character not in the Unicode group or block range specified by {character class}.


{n}            Exactly n matches. 
PS > "TTTTT" -match '^T{5}$'

??    Zero or one matches, matching as little as possible.

{n}?   Exactly n matches.


(text)     Captures the text matched inside the parentheses.

(?<name>)  Captures the text matched inside the parentheses. These captures are named by the name given in name.
PS > "Hello" -match '^(?<One>.*)llo$';
    $matches.One
    
(?:)       Noncapturing group.

(?=)       Zero-width positive lookahead assertion. Ensures that the given pattern matches to the right, without actually performing the match.

(?!)       Zero-width negative lookahead assertion.

\A        The match must occur at the beginning of the string.
"The`nTest" -match '(?m:\ATest)'
False

\Z        The match must occur at the end of the string

\G

The match must occur where the previous match ended. Used with  System.Text.RegularExpressions.Match.NextMatch()

\b       The match must occur on a word boundary
PS > "Testing" -match 'ing\b'
True

- pattern substitution 

$number  The text matched by group number number.
PS > "Test" -replace "(.*)st",'$1ar'
Tear

$$       A literal $.

$&       A copy of the entire match.

PS > "Test" -replace "^.*$",'Found: $&'
Found: Test


$'       The text of the input string that follows the match.
PS > "Test" -replace "^Tes",'Res$'''
Restt


$_        The entire input string.
PS > "Testing" -replace "(.*)ing",'String: $_'
String: Testing

- alternation construct 

PS > "Test" -match '(B|T)est'
True

(?(expression) yes|no)       Matches the yes term if expression matches at this point.
PS > "3.14" -match '(?(\d)3.14|Pi)'
True

(?(name)yes|no)    Matches the yes term if the capture group named name has a capture at this point. 


- backreference 

\number      Group number number in the expression.
PS > "|Text|" -match '(.)Text\1'


\k<name>     The group named name in the expression.
PS > "|Text|" -match '(?<Symbol>.)Text\k<Symbol>'
True

(?# )        Inline comment.

(?imnsx-imnsx)     Applies or disables the given option for the rest of this expression.
i   case-insensitive
m   multiline
n   explicit capture
s   singleline
x   ignore whitespace
PS > "Te`nst" -match '(?sx)T e.st'
True




# XPath quick reference 
- navigation and selection 

/                   root 
/Node               Navigates to the node named Node from the root 
/Node/*/Node2       Navigates to the node named Node2 via Node
//Node              Finds all nodes named Node
..                  Retrieves the parent node of the given node.
@ Attribute         Accesses the value of the attribute named
[ ]                 Filtering, similar to the Where-Object cmdlet.

- operators 
and 
or 
not()
equal =, inequality !=




# .net string formating 
- format (-f) operator format item takes the form of:

{index[,alignment][:formatString]}

- format numeric strings 

C or c currency 

D or d decimal 

E or e Sicentific 

F or f fixed point 

P or p percent 

R or r roundtrip 

X or x hexadecimal 

- custom numeric format strings

0 zero palce hoder 

digit place holder # 

. decimal point 

, thousands separator 

, number scaling 

E0 E+ E-0 scientific notation 

; section seprarator 


PS > "{0:##.#E000}" -f 2.71828
27.2E-001




# .net date time formating 
- format string 

d short date 

D long data 

f full date 

F full date long time 

g general date short time 

G general date long time 


PS > "{0:G}" -f [DateTime] "01/23/4567"
1/23/4567 12:00:00 AM

...

- Custom datetime format string 

d 

dd 

ddd

f 

ff

...

PS > "{0:dddd!}" -f [DateTime]::Now
Monday!



# Selected .net classes and their uses 
- offcial document 
https://docs.microsoft.com/en-us

System.DateTime
...



# Wmi reference 
- wmi document 
https://aka.ms/wmi

Computer system hardware

Cooling device, input device, mass storage, motherboard, controller and port, networking device, power, printing, telephony, video, and monitor

- operating system 

- wmi service management 

- general 

CIM_DataFile

Represents a named collection of data or executable code. Currently, the provider returns files on fixed and mapped logical disks. In the future, only instances of files on local fixed disks will be returned.

Win32_BaseBoard

Represents a baseboard, which is also known as a motherboard or system board.

Win32_BIOS

Represents the attributes of the computer system’s basic input/output services (BIOS) that are installed on a computer.

Win32_BootConfiguration

Represents the boot configuration of a Windows system.

Win32_CacheMemory

Represents internal and external cache memory on a computer system.

Win32_CDROMDrive

Represents a CD-ROM drive on a Windows computer system. Be aware that the name of the drive does not correspond to the logical drive letter assigned to the device.

Win32_ComputerSystem

Represents a computer system in a Windows environment.

Win32_ComputerSystemProduct

Represents a product. This includes software and hardware used on this computer system.

Win32_DCOMApplication

Represents the properties of a DCOM application.

Win32_Desktop
...



# Selected COM objects and their uses 
- COM identifiers and descriptions
Identifier	Description
Access.Application    Allows for interaction and automation of Microsoft Access.

Agent.Control         Allows for the control of Microsoft Agent 3D animated characters.

AutoItX3.Control      (nondefault) Provides access to Windows Automation via the AutoIt administration tool.

CEnroll.CEnroll       Provides access to certificate enrollment services.

Certificate Authority.Request   Provides access to a request to a certificate authority.

...

WScript.Network      Provides access to aspects of a networked Windows environment, such as printers and network drives, as well as computer and domain information.

WScript.Shell        Provides access to aspects of the Windows Shell
...




# Selected Events and their uses 
- WMI events 

System.AppDomain

AssemblyLoad

Occurs when an assembly is loaded.

- Generic wmi events 

```
$query = "SELECT * FROM __InstanceCreationEvent " +
            "WITHIN 5 " +
            "WHERE targetinstance is a
            'Win32_UserAccount'
Register-CimIndicationEvent -Query $query
```



# Standard powershell verbs 
- common verb 
add, clear, close, copy, enter, exit, find, format, get, hide, join, lock, move, new, open, optimize, pop, push, redo, resize, remove, rename, select, search, set, show, skip, split, step, switch, undo, unlock, use, watch

- communication verbs 
connect, disconnect, read, receive, send, write

- powershell data verb 
backup, checkpoint, compare, compress, convert, convertfrom, convertto, dismount, edit, expand, export, group, import, initialize, limit, merge, mount, out, publish, restore, save, sync, unpublish, update

- diagnostic verb 
debug, measure, ping, repair, resolve, test, trace 

- lifecycle verb 
approve, assert, build, complete, confirm, deny, deploy, disable, enable, install, invoke, register, request, restart, resume, start, stop, submit, suspend, uninstall, unregister, wait

- security verb 
block, grant, protect, revoke, unlock unprotect