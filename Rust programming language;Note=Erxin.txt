Rust programming language;Note=Erxin

# Foreword
- https://doc.rust-lang.org/book/foreword.html


# Getting started
- installation 

    + linux or macos 
    $ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh
    
    + on windows 
    
    https://www.rust-lang.org/tools/install
    https://visualstudio.microsoft.com/visual-cpp-build-tools/
    Windows 10 SDK and the English language pack components are included
    
    + update and uninstalling 
    $ rustup update
    
    + uninstall 
    $ rustup self uninstall
    
- hello world project 
    + create directory 
    + add main.rs 
    + add content 
    
```
fn main() {
    println!("Hello, world!");
}
```

    + run shell
```
$ rustc main.rs
$ ./main
Hello, world!
```

- an automatic formatter tool called rustfmt is under development. If you want to stick to a standard style across Rust projects, rustfmt will format your code in a particular style.

- hello cargo 

    + Cargo is Rust’s build system and package manager.

    $ cargo new hello_cargo
    
    + Cargo.toml, TOML (Tom’s Obvious, Minimal Language) format
    
```
[package]
name = "hello_cargo"
version = "0.1.0"
authors = ["Your Name <you@example.com>"]
edition = "2018"

[dependencies]
```

    Cargo expects your source files to live inside the src directory. The top-level project directory is just for README files, license information, configuration files, and anything else not related to your code. 

    + build 

    $ cargo build
    
    + check code 
    $ cargo check
    
    + release build and benchmark 
    $ cargo build --release 
    
    and benchmark with the executable in target/release

- programming a guessing game 

    + setup new project 
    
    + main.rs 
```
use std::io;

fn main() {
    println!("Guess the number!");

    println!("Please input your guess.");

    let mut guess = String::new();

    io::stdin()
        .read_line(&mut guess)
        .expect("Failed to read line");

    println!("You guessed: {}", guess);
}
```

bring the io (input/output) library into scope

an expect method that you can call. If this instance of io::Result is an Err value, expect will cause the program to crash and display the message 

    + default prelude types, prelude is the list of things that Rust automatically imports into every Rust program

    standard library, such as std::io::prelude


    std::marker::{Copy, Send, Sized, Sync, Unpin}. The marker traits indicate fundamental properties of types.
	
    std::ops::{Drop, Fn, FnMut, FnOnce}. Various operations for both destructors and overloading ().
	
    std::mem::drop, a convenience function for explicitly dropping a value.
	
    std::boxed::Box, a way to allocate values on the heap.
	
    std::borrow::ToOwned, The conversion trait that defines to_owned, the generic method for creating an owned type from a borrowed type.
	
    std::clone::Clone, the ubiquitous trait that defines clone, the method for producing a copy of a value.
	
    std::cmp::{PartialEq, PartialOrd, Eq, Ord }. The comparison traits, which implement the comparison operators and are often seen in trait bounds.
	
    std::convert::{AsRef, AsMut, Into, From}. Generic conversions, used by savvy API authors to create overloaded methods.
	
    std::default::Default, types that have default values.
	
    std::iter::{Iterator, Extend, IntoIterator, DoubleEndedIterator, ExactSizeIterator}. Iterators of various kinds.
	
    std::option::Option::{self, Some, None}. A type which expresses the presence or absence of a value. This type is so commonly used, its variants are also exported.
	
    std::result::Result::{self, Ok, Err}. A type for functions that may succeed or fail. Like Option, its variants are exported as well.
	
    std::string::{String, ToString}, heap allocated strings.
	
    std::vec::Vec, a growable, heap-allocated vector.

    + read line of code 
    io::stdin()
        .read_line(&mut guess)

- run the program 
$ cargo run 

- using a crate to get more functionality 

Cargo’s use of external crates is where it really shines.

Cargo.toml
```
[dependencies]
rand = "0.5.5"
```

https://crates.io/

Crates.io. Crates.io is where people in the Rust ecosystem post their open source Rust projects for others to use

Cargo.lock file, which was created the first time you ran cargo build and is now in your guessing_game directory. It required to explicitly upgrade the package in Cargo.lock file 

- updating a crate to get a new version 
$ cargo update 

- generating a random number 
after add dependency to rand crate to Cargo.toml

```
use rand::Rng;
use std::cmp::Ordering;
use std::io;

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng().gen_range(1, 101);

    loop {
        println!("Please input your guess.");

        let mut guess = String::new();

        io::stdin()
            .read_line(&mut guess)
            .expect("Failed to read line");

        let guess: u32 = match guess.trim().parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        println!("You guessed: {}", guess);

        match guess.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}
```

Cargo is that you can run the cargo doc --open command, which will build documentation provided by all of your dependencies 


# Common programming concepts 
- variable with mut keyword 
- data types 
    + A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. 
    
        * number 
    
8-bit	i8	u8
16-bit	i16	u16
32-bit	i32	u32
64-bit	i64	u64
128-bit	i128	u128
arch	isize	usize

Decimal	98_222
Hex	0xff
Octal	0o77
Binary	0b1111_0000
Byte (u8 only)	b'A'

        * float point 
        
fn main() {
    let x = 2.0; // f64

    let y: f32 = 3.0; // f32
}

according to the IEEE-754 standard. The f32 type is a single-precision float, and f64 has double precision.

        * bool type 
        
let t = true;

let f: bool = false; 

        * character type, four types in size and represents a unicode scalar value 
let c = 'z';

from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive

    + compound types, can group multiple value into one type 
    
        * tuple 
let tup: (i32, f64, u8) = (500, 6.4, 1);

//pattern matching destruct 
let tup = (500, 6.4, 1);

let (x, y, z) = tup;

let x: (i32, f64, u8) = (500, 6.4, 1);

let five_hundred = x.0;

let six_point_four = x.1;

        * array type, every element should have the same type, on stack, want to ensure you always have a fixed number of elements.

let a = [1,2,3,5];

    + array type, have fixed length 
    
let a = [1, 2, 3, 4, 5];
    

let a: [i32; 5] = [1, 2, 3, 4, 5];

let a: [type:length] = [...];

let a = [3;5];
let a = [init_value;times];

    + accessing array elements, 

    let a = [1, 2, 3, 4, 5];

    let first = a[0];
    let second = a[1];

- functions 
fn main() {
    println!("Hello, world!");

    another_function();
}

rust don't care the define sequence of the function 

    + function parameters 

fn another_function(x: i32) {
    println!("The value of x is: {}", x);
}

    + function body contain statements and expression 
Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, {}, is an expression

Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement. statement don't return a value;

fn main() {
    let x = 5;

    let y = {
        let x = 3;
        x + 1           //<- expression 
    };

    println!("The value of y is: {}", y);
}

    + function with return value 
fn five() -> i32 {
    5
}

fn main() {
    let x = plus_one(5);

    println!("The value of x is: {}", x);
}

fn plus_one(x: i32) -> i32 {
    x + 1
}
- comments 

//single comment 

- control flow 

    + if expression 
fn main() {
    let number = 3;

    if number < 5 {
        println!("condition was true");
    } else {
        println!("condition was false");
    }
}

    + return value from a loop

fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };

    println!("The result is {}", result);
}

the break keyword with the value counter * 2. After the loop, we use a semicolon to end the statement that assigns the value to result.

    + loops with while 
while number != 0 {
    println!("{}!", number);

    number -= 1;
}

    + loop through a collection with for 
let a = [10, 20, 30, 40, 50];

for element in a.iter() {
    println!("the value is: {}", element);
}


for number in (1..4).rev() {
    println!("{}!", number);
}
println!("LIFTOFF!!!");


# Understanding ownership 
- understand stack and heap, stack is fast than heap 
- string type 


let s = String::from("hello");

A String is made up of three parts, a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. The data is saved in the memory on the heap that holds the contents.

- In C++, this pattern of deallocating resources at the end of an item’s lifetime is sometimes called Resource Acquisition Is Initialization (RAII)

- ways variables and data interact, move 

let x = 5;
let y = x;

- Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.

- by default the assignment is shadow copy
let s1 = String::from("hello");
let s2 = s1;   //shadow copy 

- deap copy 
let s1 = String::from("hello");
let s2 = s1.clone();

println!("s1 = {}, s2 = {}", s1, s2);
    
- types that are Copy on stack:

All the integer types, such as u32.
The Boolean type, bool, with values true and false.
All the floating point types, such as f64.
The character type, char.
Tuples, if they only contain types that are also Copy. For example, (i32, i32) is Copy, but (i32, String) is not.

- ownership and functions 

```
fn main() {
    let s = String::from("hello");  // s comes into scope

    takes_ownership(s);             // s's value moves into the function...
                                    // ... and so is no longer valid here

    let x = 5;                      // x comes into scope

    makes_copy(x);                  // x would move into the function,
                                    // but i32 is Copy, so it’s okay to still
                                    // use x afterward

} // Here, x goes out of scope, then s. But because s's value was moved, nothing
  // special happens.

fn takes_ownership(some_string: String) { // some_string comes into scope
    println!("{}", some_string);
} // Here, some_string goes out of scope and `drop` is called. The backing
  // memory is freed.

fn makes_copy(some_integer: i32) { // some_integer comes into scope
    println!("{}", some_integer);
} // Here, some_integer goes out of scope. Nothing special happens.
```

- return values and scope 

```
fn main() {
    let s1 = gives_ownership();         // gives_ownership moves its return
                                        // value into s1

    let s2 = String::from("hello");     // s2 comes into scope

    let s3 = takes_and_gives_back(s2);  // s2 is moved into
                                        // takes_and_gives_back, which also
                                        // moves its return value into s3
} // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was
  // moved, so nothing happens. s1 goes out of scope and is dropped.

fn gives_ownership() -> String {             // gives_ownership will move its
                                             // return value into the function
                                             // that calls it

    let some_string = String::from("hello"); // some_string comes into scope

    some_string                              // some_string is returned and
                                             // moves out to the calling
                                             // function
}

// takes_and_gives_back will take a String and return one
fn takes_and_gives_back(a_string: String) -> String { // a_string comes into
                                                      // scope

    a_string  // a_string is returned and moves out to the calling function
}
```

    + return multiple value 
fn main() {
    let s1 = String::from("hello");

    let (s2, len) = calculate_length(s1);

    println!("The length of '{}' is {}.", s2, len);
}

fn calculate_length(s: String) -> (String, usize) {
    let length = s.len(); // len() returns the length of a String

    (s, length)
}

- references and borrowing 

```
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}.", s1, len);
}

fn calculate_length(s: &String) -> usize {
    s.len()
}
```

we pass &s1 into calculate_length and, in its definition, we take &String rather than String.

s {name:ptr, value} -> s1 { name:ptr, len:5, capacity:5} -> heap data {index:0, h, index:1, e...}

reference allow you to refer to some value without taking ownership of it.
The &s1 syntax lets us create a reference that refers to the value of s1

we cannot change the referenced value 

- mutable references 
```
fn main() {
    let mut s = String::from("hello");

    change(&mut s);
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
}
```
change s to be mut

restriction, you can have only one mutable reference to a particular piece of data in a particular scope
```
let mut s = String::from("hello");

{
	let r1 = &mut s;
} // r1 goes out of scope here, so we can make a new reference with no problems.

let r2 = &mut s;
```

we also cannot have a mutable reference while we have an immutable one

- dangling reference 

In Rust, by contrast, the compiler guarantees that references will never be dangling references

- the slice type 

Slices let you reference a contiguous sequence of elements

```
    let s = String::from("hello world");

    let hello = &s[0..5];
    let world = &s[6..11]
	let slice = &s[0..2];
	let slice = &s[..2];
	let all = &s[..]
```

[starting_index..ending_index]


```
fn first_word(s: &String) -> &str {
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}
```

```
let a = [1, 2, 3, 4, 5];

let slice = &a[1..3];

assert_eq!(slice, &[2, 3]);
```


# Using structs to structure related data 
- define 
```
struct User {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool,
}

//create instance 
let user1 = User {
	email: String::from("someone@example.com"),
	username: String::from("someusername123"),
	active: true,
	sign_in_count: 1,
};

//mutable instance 
let mut user1 = User {
	email: String::from("someone@example.com"),
	username: String::from("someusername123"),
	active: true,
	sign_in_count: 1,
};

user1.email = String::from("anotheremail@example.com");

//return a struct instance 
fn build_user(email: String, username: String) -> User {
    User {
        email: email,
        username: username,
        active: true,
        sign_in_count: 1,
 
   }
}

//shorthand variables with the same name of the fields 
fn build_user(email: String, username: String) -> User {
    User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
}

//create instance with other instance 
let user2 = User {
	email: String::from("another@example.com"),
	username: String::from("anotherusername567"),
	..user1
};

//using tuple structs without named fields to create different types 
struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

let black = Color(0, 0, 0);
let origin = Point(0, 0, 0);
```

- define structs that don’t have any fields! These are called unit-like structs because they behave similarly to (), the unit type. Used to implement a trait on some type but have no data 

- Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is

- example using structs 

fn main() {
    let rect1 = (30, 50);

    println!(
        "The area of the rectangle is {} square pixels.",
        area(rect1)
    );
}

fn area(dimensions: (u32, u32)) -> u32 {
    dimensions.0 * dimensions.1
}

- print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the annotation #[derive(Debug)]

#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!("rect1 is {:?}", rect1);
}

- When we have larger structs, it’s useful to have output that’s a bit easier to read; in those cases, we can use {:#?} instead of {:?} in the println! string. like pretty print 

- method syntax, methods are different from functions in that they’re defined within the context of a struct (or an enum or a trait object)

	+ define 
	
```
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
	
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The area of the rectangle is {} square pixels.",
        rect1.area()
    );
}
```

we use &self instead of rectangle: &Rectangle because Rust knows the type of self is Rectangle due to this method’s being inside the impl Rectangle context. 
 
we’d use &mut self as the first parameter

with object.something(), Rust automatically adds in &, &mut, or * so object matches the signature of the method.
 
- associated functions 

associated functions because they’re associated with the struct. They’re still functions, not methods, because they don’t have an instance of the struct to work with. without the parameter self.

```
impl Rectangle {
    fn square(size: u32) -> Rectangle {
        Rectangle {
            width: size,
            height: size,
        }
    }
}

let sq = Rectangle::square(3);
```

- multipe impl blocks 

impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
}

impl Rectangle {
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
}


# enums and pattern matching 
- define 

enum IpAddrKind {
    V4,
    V6,
}

let four = IpAddrKind::V4;
let six = IpAddrKind::V6;

struct IpAddr {
	kind: IpAddrKind,
	address: String,
}

let home = IpAddr {
	kind: IpAddrKind::V4,
	address: String::from("127.0.0.1"),
};

- customize type 

enum IpAddr {
	V4(String),
	V6(String),
}

let home = IpAddr::V4(String::from("127.0.0.1"));

let loopback = IpAddr::V6(String::from("::1"));


enum IpAddr {
	V4(u8, u8, u8, u8),
	V6(String),
}

let home = IpAddr::V4(127, 0, 0, 1);

let loopback = IpAddr::V6(String::from("::1"));


struct Ipv4Addr {
    // --snip--
}

struct Ipv6Addr {
    // --snip--
}

enum IpAddr {
    V4(Ipv4Addr),
    V6(Ipv6Addr),
}

- able to define methods on enums.

enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

impl Message {
	fn call(&self) {
		// method body would be defined here
	}
}

let m = Message::Write(String::from("hello"));
m.call();

- option enum 

Null is a value that means there is no value there. In languages with null, variables can always be in one of two states: null or not-null.

This enum is Option<T>, and it is defined by the standard library as follows:

```
enum Option<T> {
    None,
    Some(T),
}

    let some_number = Some(5);
    let some_string = Some("a string");

    let absent_number: Option<i32> = None;
```

The <T> syntax is a feature of Rust we haven’t talked about yet. It’s a generic type parameter

	+ advantage 
	
```
let x: i8 = 5;
let y: Option<i8> = Some(5);

let sum = x + y; //error 
```

convert an Option<T> to a T before you can perform T operations with it

- match control flow operator 

```
enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter,
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
```
the => operator that separates the pattern and the code to run

the match expression executes, it compares the resulting value against the pattern of each arm, in order
```
fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => {
            println!("Lucky penny!");
            1
        }
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
```
 
- patterns that bind to values 


match expression for this code, we add a variable called state to the pattern that matches values of the variant Coin::Quarter. When a Coin::Quarter matches, the state variable will bind to the value of that quarter’s state.


```
#[derive(Debug)] // so we can inspect the state in a minute
enum UsState {
    Alabama,
    Alaska,
    // --snip--
}

enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(UsState),
}

fn value_in_cents(coin: Coin) -> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter(state) => {
            println!("State quarter from {:?}!", state);
            25
        }
    }
}
```

- matching with Option<T>

all the avaliable option fields should have a match 

```
fn plus_one(x: Option<i32>) -> Option<i32> {
	match x {
		None => None,
		Some(i) => Some(i + 1),
	}
}

let five = Some(5);
let six = plus_one(five);
let none = plus_one(None);
```

- the _ placeholder for unlisted fields 

let some_u8_value = 0u8;
match some_u8_value {
	1 => println!("one"),
	3 => println!("three"),
	5 => println!("five"),
	7 => println!("seven"),
	_ => (),
}

The () is just the unit value, so nothing will happen in the _ case

- concise control flow with if let 

The if let syntax lets you combine if and let into a less verbose way to handle values that match one pattern while ignoring the rest

```
    let mut count = 0;
    match coin {
        Coin::Quarter(state) => println!("State quarter from {:?}!", state),
        _ => count += 1,
    }
```

equal to 

```
    let mut count = 0;
    if let Coin::Quarter(state) = coin {
        println!("State quarter from {:?}!", state);
    } else {
        count += 1;
    }
```


# Managing growing projects with packages 
- module system include 

Packages: A Cargo feature that lets you build, test, and share crates
Crates: A tree of modules that produces a library or executable
Modules and use: Let you control the organization, scope, and privacy of paths
Paths: A way of naming an item, such as a struct, function, or module

- packages and crates 

	+  create a package.
	
	$ cargo new package-name 
	
	Cargo passes the crate root files to rustc to build the library or binary.

- defining modules to control scope and privacy 

use keyword that brings a path into scope; and the pub keyword to make items public.

Modules let us organize code within a crate into groups for readability and easy reuse. 

	+ organize the functions into nested modules. Create a new library named restaurant

```
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}

        fn seat_at_table() {}
    }

    mod serving {
        fn take_order() {}

        fn serve_order() {}

        fn take_payment() {}
    }
}
```

mod keyword and then specify the name of the module

we can create a module tree 

- paths for referring to an item in the module tree 

two forms
	+ starts from a crate root by using a crate name or a literal crate
	+ A relative path starts from the current module and uses self, super, or an identifier in the current module
	
example 

```
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}
```

Items in a parent module can’t use the private items inside child modules, but items in child modules can use the items in their ancestor modules. 

expose inner parts of child modules' code to outer ancestor modules by using the pub keyword. making the module public doesn’t make its contents public.

```
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}
```

- starting relative paths with super 

```
fn serve_order() {}

mod back_of_house {
    fn fix_incorrect_order() {
        cook_order();
        super::serve_order();
    }

    fn cook_order() {}
}
```
- making structs and enums public 

We can make each field public or not on a case-by-case basis. default for enum variants is to be public. struct fields follow the general rule of everything being private by default

```
mod back_of_house {
    pub struct Breakfast {
        pub toast: String,
        seasonal_fruit: String,
    }

    impl Breakfast {
        pub fn summer(toast: &str) -> Breakfast {
            Breakfast {
                toast: String::from(toast),
                seasonal_fruit: String::from("peaches"),
            }
        }
    }
}

pub fn eat_at_restaurant() {
    // Order a breakfast in the summer with Rye toast
    let mut meal = back_of_house::Breakfast::summer("Rye");
    // Change our mind about what bread we'd like
    meal.toast = String::from("Wheat");
    println!("I'd like {} toast please", meal.toast);

    // The next line won't compile if we uncomment it; we're not allowed
    // to see or modify the seasonal fruit that comes with the meal
    // meal.seasonal_fruit = String::from("blueberries");
}
```

- bringing paths into scope with the use keyword 

```
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
```

- creating idomatic use paths 

```
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting::add_to_waitlist;

pub fn eat_at_restaurant() {
    add_to_waitlist();
    add_to_waitlist();
    add_to_waitlist();
}

use std::fmt;
use std::io;

fn function1() -> fmt::Result {
    // --snip--
}

fn function2() -> io::Result<()> {
    // --snip--
}
```

- providing new names with the as keyword 

use std::io::Result as IoResult;

- re-exporting names with pub use 

```
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist(); #use hosting to reference the function 
}
```

- using external packages 

an external package is called rand 

add Cargo.toml to the project to reference it 

```
rand = "0.8.3"
```

tells Cargo to download the rand package and any dependencies from crates.io and make rand available to our project

- using nested paths to clean up large use lists 

// --snip--
use std::cmp::Ordering;
use std::io;
// --snip--

equal to 
// --snip--
use std::{cmp::Ordering, io};
// --snip--

use std::io;
use std::io::Write;

//equal to 

use std::io::{self, Write};

- glob operator 

use std::collections::*;


# Separating modules into different files 
- Using a semicolon after mod front_of_house rather than using a block tells Rust to load the contents of the module from another file
//src/front_of_house.rs 
pub mod hosting; 

//src/front_of_house/hosting.rs 
pub fn add_to_waitlist() {}


# Common collections 
- vector 
let v: Vec<i32> = Vec::new();

//Rust provides the vec! macro for convenience. The macro will create a new vector

let v = vec![1, 2, 3];

- updating a vector 

v.push(1);

- reading elements of vectors 

accessing a value in a vector, either with indexing syntax or the get method.

```
    let v = vec![1, 2, 3, 4, 5];

    let third: &i32 = &v[2];
    println!("The third element is {}", third);

    match v.get(2) {
        Some(third) => println!("The third element is {}", third),
        None => println!("There is no third element."),
    }
	
	let v = vec![1, 2, 3, 4, 5];

    let does_not_exist = &v[100];
    let does_not_exist = v.get(100);
```

the get method is passed an index that is outside the vector, it returns None without panicking

```
    let mut v = vec![1, 2, 3, 4, 5];

    let first = &v[0];

    v.push(6); #error, not allowed to modify the collection when holding a reference 

    println!("The first element is: {}", first);
```

- iterate mutable reference to update the items 

    let mut v = vec![100, 32, 57];
    for i in &mut v {
        *i += 50;
    }
	
- using an enum to store multiple types 
	
	enum SpreadsheetCell {
        Int(i32),
        Float(f64),
        Text(String),
    }

    let row = vec![
        SpreadsheetCell::Int(3),
        SpreadsheetCell::Text(String::from("blue")),
        SpreadsheetCell::Float(10.12),
    ];



# storing UTF-8 encoded text with strings 
- Rust’s standard library also includes a number of other string types, such as OsString, OsStr, CString, and CStr. Library crates can provide even more options for storing string data

- new string 

let mut s = String::new();

let data = "initial contents";

//to_string, available on any type that implements the Display trait
let s = data.to_string();

// the method also works on a literal directly:
let s = "initial contents".to_string();
	
	

























