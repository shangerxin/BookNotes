Learning DevOps=Mikael Krief;Note=Erxin

# reference 
https://learning.oreilly.com/library/view/learning-devops/9781801818964/


# provisioning cloud infrastructure with Terraform 
- staging. This process is called continuous delivery (CD).

- A package manager: This constitutes the storage space of the packages generated by CI and recovered by CD.

- A configuration manager: This allows you to manage configuration changes during CD

- DevOps practice, known as IaC.

- IaC also brings benefits to a DevOps team by allowing Ops to be more efficient in terms of infrastructure improvement tasks

- script types 

Using the Azure CLI (the documentation is available at https://bit.ly/2V1OfxJ), we have the following

- programmatic types 

have Pulumi (https://www.pulumi.com/) and Terraform CDK (https://github.com/hashicorp/terraform-cdk).

- Terraform CDK, I suggest reading the following blog posts and watching the following video:

https://www.hashicorp.com/blog/cdk-for-terraform-enabling-python-and-typescript-support

https://www.hashicorp.com/blog/announcing-cdk-for-terraform-0-1

https://www.youtube.com/watch?v=5hSdb0nadRQ

- Configuration and deployment in Kubernetes
Kubernetes is a container orchestrator – it is the technology that most embodies IaC (in my opinion) because of the way it deploys containers

Managing Containers Effectively with Kubernetes.

{"Action":"robotic\/proxy\/reset","Args":{"bypass":"<local>","proxyPort":913,"proxyUrl":"http:\/\/child-prc.intel.com"}}



# Provisioning cloud infrastructure with terraform 
- Infrastructure as Code (IaC) and its impact on DevOps culture
- Terraform, HashiCorp Configuration Language (HCL), is declarative, and is relatively easy to read. 

https://www.terraform.io/docs/providers/.

- preceding diagram:

Code development
Code formatting with terraform fmt
Initialization with terraform init
Code validation with terraform validate
Planning with terraform plan
Manual verification of Terraform changes on the infrastructure

- a remote backend in three steps:

The creation of the storage account
The Terraform configuration for the remote backend
The execution of Terraform with the use of this remote backend

- using ansible for configuring IaaS infrastructure 

Red Hat (https://www.ansible.com/overview/it-automation) stands out for its many assets

- install the Windows Subsystem for Linux (WSL); refer to the documentation at https://docs.microsoft.com/en-us/windows/wsl/install-win10.

- ansible artifacts
The hosts: These are target systems that Ansible will configure; 

The inventory: This is a file in INI or YAML format that contains the list of target hosts that Ansible will perform configuration actions on. 

The playbook: This is the Ansible configuration script that will be executed to configure hosts.

- ansible inventory 

Static inventory: Hosts are listed in a text file in INI (or YAML) format; this is the basic mode of Ansible inventory

Dynamic inventory: The list of hosts is dynamically generated by an external script (for example, with a Python script). 

- - main configuration parameters that can be overridden are as follows:

ansible_user: This is the user who connects to the remote host.
ansible_port: It is possible to change the default value of the SSH port.
ansible_host: This is an alias for the host.
ansible_connection: This is the type of connection to the remote host and can be Paramiko, SSH, or local.
ansible_private_key_file: This is the private key that's used to connect to the remote host.

- playbook is a execution flow. it is written in YAML 

- different tasks of this role are as follows:

Updating packages
Installing the MySQL server and Python MySQL packages
Creating a MySQL user
IMPORTANT NOTE

The complete source code for this role is available at https://github.com/PacktPublishing/Learning-DevOps-Second-Edition/tree/main/CHAP03/devopsansible/roles/mysql.


# Optimizing infrastructure deployment with Packer 
- Configuring a VM can be very time-consuming because it depends on its hardening as well as the middleware
- Among the Infrastructure as Code (IaC) tools, there is Packer from the HashiCorp tools, which allows us to create VM images from a file

- DevOps process and integrates very well with Terraform.

In this chapter, we will cover the following:

An overview of Packer
Creating Packer templates using scripts
Creating Packer templates using Ansible
Executing Packer
Writing Packer templates with HCL format
Using images created by Packer with Terraform

- Packer is part of the HashiCorp open source suite of tools, and this is the official Packer page: https://www.packer.io/. It is command line tool 

Creating Packer templates for Azure VMs with scripts

- The documentation on the builders section is here: https://www.packer.io/docs/builders.

- The provisioners type proposed natively by Packer is detailed in the documentation: https://www.packer.io/docs/provisioners/index.html.

- Packer template is available here: https://github.com/PacktPublishing/Learning-DevOps-Second-Edition/blob/main/CHAP04/templates/azure_linux.json.

-  Ansible playbook The playbook we are going to write is almost identical to the one we set up

- Integrating an Ansible playbook in a Packer template

- HCL format of the template is very similar to the JSON format and it's composed of variable, source, build, and provisioner blocks


# Authoring the development environment with vagrant 
- Installing manually on Windows
To install Vagrant manually on Windows, perform the following steps:

Go to the official download page (https://www.vagrantup.com/downloads)

Chocolatey, please read the documentation at https://chocolatey.org/.

- Using Vagrant Cloud for Vagrant Boxes
To use basic Vagrant images, HashiCorp has set up a portal that allows you to publish and publicly share images of VMs

- refer to the complete documentation at https://www.vagrantup.com/docs/vagrantfile.


# DevOps CI/CD pipeline 
- called a version control system (VCS) or noted more commonly as a version control manager (VCM).
- Azure DevOps platform (formerly Visual Studio Team System (VSTS)), which is a cloud platform that has a Git repository manager. 
- git install 

HyperText Transfer Protocol Secure (HTTPS) transport, which we will also leave by default at the Use the OpenSSL library option

- git terms 

GitHub vocabulary: https://help.github.com/en/articles/github-glossary
Atlassian glossary: https://www.atlassian.com/git/glossary/terminology
Linux Academy: https://linuxacademy.com/blog/linux/git-terms-explained/

- git flow pattern 

```
--master----------------+------------+--------------------+----
    |                   |            |                    |
    |                   +--hotfix----+       +--release---+
    |                                        |            |
    +-develop-------+-----------+------------+------------+---
                    |           |
                    +--feature--+
    
```


Gitflow and its process, read this article: https://jeffkreeftmeijer.com/git-flow/.
 
- git flow tool 
GitKraken (https://www.gitkraken.com/) and Sourcetree (https://www.sourcetreeapp.com/). These tools allow us to use the Gitflow process via a graphical interface

- reference 

Git documentation: https://www.git-scm.com/doc
Pro Git book: https://git-scm.com/book/en/v2
Mastering Git book: https://www.packtpub.com/application-development/mastering-git
Set up Git: https://try.github.io/
Learn Git Branching: https://learngitbranching.js.org/
Atlassian Git tutorials: https://www.atlassian.com/git/tutorials
git-flow cheat sheet: https://danielkummer.github.io/git-flow-cheatsheet/



# Continuous integration and continuous delivery 
- Continuous delivery (CD) is the automation of the process that deploys an application in different stages (or environments).

- following topics:

CI/CD principles
Using a package manager in the CI/CD process
Using Jenkins for CI/CD implementation
Using Azure Pipelines for CI/CD
Using GitLab CI

- CI/CD pipeline are listed here:

An SCV
A package manager
A CI server
A configuration manager

- Private NuGet and npm repository
If you need to centralize your NuGet or npm packages, you can create your own local repository.

To create your NuGet server instance, here is the Microsoft documentation: https://docs.microsoft.com/en-us/nuget/hosting-packages/overview.

For npm, we can also install it locally with the npm local-npm package, whose documentation is available here: https://www.npmjs.com/package/local-npm.

- using jenkins for CI/CD implementation 

GitHub Microsoft repository space here: https://github.com/microsoft/MyShuttle2.

- configuring a github webhook 

GitHub repository, go to the Settings | Webhooks menu.
Click on the Add Webhook button.
In the Payload URL field, fill in the URL address of Jenkins followed by /github-webhook/, leave the secret input as it is, and choose the Just the push event option.
Validate the webhook.

    + add jenkins job trigger by github hook GITScm polling 
    
- azure devops 

Azure DevOps. It was previously known as Visual Studio Team Services (VSTS).

- product sheet at https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/, which also contains a calculator to get a cost estimate

- command-line interface (CLI) az webapp create command, documented at https://docs.microsoft.com/en-us/cli/azure/webapp?view=azure-cli-latest#az-webapp-create, or the PowerShell New-AzureRmWebApp command, documented at https://docs.microsoft.com/en-us/powershell/module/azurerm.websites/new-azurermwebapp?view=azurermps-6.13.0.

- full pipeline with a yaml 
```
trigger:

- master

pool:

  vmImage: ubuntu-latest

steps:

- task: DotNetCoreCLI@2

  displayName: "Restore"

  inputs:

    command: restore

    projects: '**/*.csproj'

- task: DotNetCoreCLI@2

  displayName: "build"

  inputs:

    command: 'build'

    projects: '**/*.csproj'

    arguments: '--configuration Release'

- task: DotNetCoreCLI@2

  displayName: "Run tests"

  inputs:

    command: 'test'

    projects: '**/tests/*.csproj'

    arguments: '--configuration Release'

- task: DotNetCoreCLI@2

  displayName: "Code coverage"

  inputs:

    command: test

    projects: '**/*Tests/*.csproj'

    arguments: '--configuration Release --collect "Code coverage"'
```

- GitLab CI.

GitLab CI is one of the services offered by GitLab (https://about.gitlab.com/)

- Pipeline as Code (PaC), in the same way as Infrastructure as Code (IaC). We'll proceed as follows

.gitlab-ci.yml file with the following content:

```
image: microsoft/dotnet:latest

stages:

    - build

    - test

variables:

    BuildConfiguration: "Release"

build:

    stage: build

    script:

        - "cd app"  

        - "dotnet restore"  

        - "dotnet build --configuration $BuildConfiguration"

test:

    stage: test

    script:

        - "cd tests"

        - "dotnet test --configuration $BuildConfiguration"
```



# Deploying infrastructure as code with CI/CD pipelines 
- This complete Terraform code is available here: https://github.com/PacktPublishing/Learning-DevOps-Second-Edition/tree/main/CHAP08/terraform.




# Section 3, containerzed microservices with docker and kubernetes
- chapter covers the following topics:

Installing Docker
Creating a Dockerfile
Building and running a container on a local machine
Pushing an image to Docker Hub
Pushing a Docker image to a private registry (ACR)
Deploying a container to ACI with a CI/CD pipeline
Using Docker for running command-line tools
Getting started with Docker Compose
Deploying Docker Compose containers in ACI

- install docker 
- register docker hub 

- docker 

httpd image tagged as the latest version, https://hub.docker.com/_/httpd/, and we use the FROM httpd:latest Dockerfile instruction.

- build docker image 

docker build -t demobook:v1 .

docker run -d --name demoapp -p 8080:80 demobook:v1

- complete source code of this Terraform file is available here: https://github.com/PacktPublishing/Learning-DevOps-Second-Edition/tree/main/CHAP09/terraform-aci.

- docker compose 

Docker Compose, read the official documentation here:

https://docs.docker.com/compose

Docker Compose is a more advanced Docker tool that allows us to deploy several Docker containers at the same time

    + configuration file 
    
```
version: '3' #version of the Docker Compose YAML schema

services:

  nginx:

    image: nginx:latest

    container_name: nginx-container  

    ports:  

    - 8080:80
```


# Managing containers effectively with kubernetes 
- The architecture of Kubernetes, which is a client/server type, can be represented simply, as shown in the following diagram


- Using Helm as a package manager
As previously discussed, all the actions that we carry out on the Kubernetes cluster are done via the kubectl tool and the YAML specification files.

$ choco install kubernetes-helm -y

using a public helm chart from artifact hub 

Helm public repository called Artifact Hub and available here: https://artifacthub.io/

- Artifact Hub site (https://artifacthub.io/) and search for the wordpress package

- Helm repository: https://helm.sh/docs/topics/chart_repository/.

- Amazon with Elastic Kubernetes Service (EKS), Google with Google Kubernetes Engine (GKE), and finally, Azure with AKS

- read the documentation at https://docs.microsoft.com/en-us/azure/aks/intro-kubernetes.

- Azure DevOps, found at the following link:
https://www.youtube.com/watch?v=K4uNl6JA7g8

- Kubernetes resources, run the following command:
$ kubectl get pods,svc

- Octant
Octant is a VMware community project in a web application launched locally or in a Docker container for visualizing Kubernetes resources

- Lens
Lens is also a free tool that is installed by the client binary.

- Among the best-known solutions are Prometheus and Grafana, which monitor the metrics of Kubernetes


# Testing APIs with postman 
- we can download at https://nodejs.org/en/.

- going to https://www.postman.com/ and clicking on the Sign Up for Free button

- Windows can download Postman from https://www.getpostman.com/downloads/ and choose the version to install.

- Postman documentation for collection creation can be found at https://learning.getpostman.com/docs/postman/collections/creating_collections/.

- read the documentation at https://learning.getpostman.com/docs/postman/scripts/intro_to_scripts.

- Newman that automates tests that are written in Postman.

install Newman, we must execute this command in the terminal:

$ npm install -g newman

- Newman, go to the Terminal, then to the folder where the JSON configuration files are located, and execute the following command:

$ newman run DemoBook.postman_collection.json -e Local.postman_environment.json

- Newman executions in Jenkins, read the documentation at https://learning.getpostman.com/docs/postman/collection_runs/integration_with_jenkins, and for integration with Travis CI, the documentation can be found at https://learning.getpostman.com/docs/postman/collection_runs/integration_with_travis.


# Static code analysis with sonarqube 
- Community Edition of SonarQube from https://www.sonarqube.org/downloads/
- Real-time analysis with SonarLint
- Executing SonarQube in a CI process
So far in this chapter, we have looked at how to install SonarQube and how developers use SonarLint on their local machines.


# Security and performance tests 
- Open Web Application Security Project (OWASP) (https://www.owasp.org/index.php/Main_Page)
- This document is available at https://owasp.org/www-project-top-ten/. The document is very detailed and provides an explanation, examples, and a solution for each security issue
- Using ZAP for security testing
ZAP is a free and open source graphical tool that allows you to scan websites

- enter the URL of a demo site: http://demo.guru99.com/Security/SEC_V1/.

- zap-cli tool, which is available at https://github.com/Grunny/zap-cli. This is used in the command line and calls the ZAP APIs.

- The following article lists the 15 best ones: https://www.softwaretestinghelp.com/performance-testing-tools-load-testing-tools/

                                    

# Security in the DevOps process 
- operations people (information technology-operations, or ITOps).

- development-security-operations (DevSecOps) culture more broadly

- operating system (OS), read this documentation: https://www.ruby-lang.org/en/documentation/installation/.

- I suggest you read this article: https://dzone.com/articles/azure-security-audits-with-pester. Also, have a look at this blog post: https://dev.to/omiossec/unit-testing-in-powershell-introduction-to-pester-1de7.

- IaC tools is InSpec (https://www.inspec.io/), which performs infrastructure compliance tests.

- InSpec needs to have Ruby ( >2.4) installed on our machine.

$ inspec init profile azuretests

This command initializes a new profile by creating a new folder, azuretests

KeyPass (https://keepass.info/)
LastPass (https://www.lastpass.com/)
Ansible Vault, the use of which we discussed Chapter 3, Using Ansible for Configuring IaaS Infrastructure
Vault from HashiCorp

- .NET Core software development kit (SDK), which can be downloaded from https://dotnet.microsoft.com/download.

- Reducing deployment downtime with Terraform
In Chapter 2, Provisioning Cloud Infrastructure with Terraform, we detailed the use of Terraform by looking at its commands and life cycle

 create_before_destroy option, please view the following Terraform documentation: https://www.terraform.io/language/meta-arguments/lifecycle.
 
- We will look at a practical implementation of this blue-green deployment pattern in Azure later in this chapter, in the Applying blue-green deployments on Azure section. 

- Azure Traffic Manager that allows us to manage traffic between several resource endpoints, such as two web apps.

- a feature flag can be either of the following:

Temporary: To test a feature. Once validated by users, the feature flag will be deleted.
Definitive: To leave a feature flagged for a long time.

http://featureflags.io/resources/ to find them. Please refer to the following as well:
RimDev.FeatureFlags (https://github.com/ritterim/RimDev.FeatureFlags)
Flagr (https://github.com/checkr/flagr)
Unleash (https://github.com/Unleash/unleash)
Togglz (https://github.com/togglz/togglz)
Flip (https://github.com/pda/flip).

we can mention the following:
LaunchDarkly (https://launchdarkly.com/)
Rollout (https://app.rollout.io/signup)
Featureflag.tech (https://featureflag.tech/)
Featureflow (https://www.featureflow.io/).

- LaunchDarkly site. Alternatively, you can go to https://app.launchdarkly.com/.


# DevOps for opensource project 
- topics 
Storing source code in GitHub
Contributing to open source projects using pull requests
Managing the changelog file and release notes
Sharing binaries in GitHub releases
Getting started with GitHub Actions
Analyzing code with SonarCloud
Detecting security vulnerabilities with WhiteSource Bolt

- This file has no fixed nomenclature or formalism, but for simplicity, we have decided to call it CHANGELOG.md.
- complete content of this file is available here: https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/CHANGELOG.md.

- GitHub accounts (https://github.com/conventional-changelog

- github actions 

writing, these new features are as follows:

A GitHub Package registry, a package manager whose presentation documentation can be found at https://github.com/features/package-registry
GitHub Actions, a CI/CD pipeline manager whose presentation documentation can be found at https://github.com/features/actions

- workflow is available at https://github.com/PacktPublishing/Learning-DevOps-Second-Edition/blob/main/.github/workflows/node.js.yml.

- GitHub Marketplace (https://github.com/marketplace?type=actions) 

develop and publish actions (https://help.github.com/en/articles/development-tools-for-github-actions).

- SonaType AppScan (https://www.sonatype.com/appscan), Snyk (https://snyk.io/), and WhiteSource Bolt (https://bolt.whitesourcesoftware.com/).

- WhiteSource Bolt (https://bolt.whitesourcesoftware.com/), which is available as a free plan

This pull request adds a .whitesource file that is used for configuration at the root of the repository.



# DevOps best practices 
- Infrastructure as Code (IaC), application architecture, and infrastructure design. 

- following topics:

Automating everything
Choosing the right tool
Writing all your configuration in code
Designing the system architecture
Building a good CI/CD pipeline
Integrating tests
Shifting security left with development-security-operations (DevSecOps)
Monitoring your system
Evolving project management

- This architecture design was legitimate since the application was managed in a waterfall model (https://activecollab.com/blog/project-management/waterfall-project-management-methodology)

- This method of separating code into several services is part of the architecture pattern called microservices

- test-driven development (TDD) (https://hackernoon.com/introduction-to-test-driven-development-tdd-61a13bc92d92) and behavior-driven development (BDD), and in this way, the automatic execution of these tests

- shift security left with devsecops 

Open Web Application Security Project (OWASP) rules (https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project), which we saw in Chapter 13, Security and Performance Tests. You can use the Zed Attack Proxy (ZAP) tool

- random-access memory (RAM) and central processing unit (CPU) level of the virtual machines (VMs) or the network bandwidth.
- evolving project management 

- different frameworks (Scrum and Extreme Programming (XP), for example)

- presentation by Donovan Brown at https://www.agilealliance.org/resources/sessions/microsoft-devops-transformation-donovan-brown/, which explains how Microsoft has changed its organization to adapt to a DevOps culture

- reference 

16 Best Practices Of CI/CD Pipeline To Speed Test Automation: https://www.lambdatest.com/blog/16-best-practices-of-ci-cd-pipeline-to-speed-test-automation/
How To Implement Continuous Testing In DevOps Like A Pro?: https://www.lambdatest.com/blog/how-to-implement-continuous-testing-in-devops-like-a-pro/
Secure DevOps: https://www.microsoft.com/en-us/securityengineering/devsecops
9 Pillars of Continuous Security Best Practices: https://devops.com/9-pillars-of-continuous-security-best-practices/
Top 5 Best Practices for DevOps Monitoring: https://devops.com/top-5-best-practices-devops-monitoring/
10 Pitfalls to Avoid when Implementing DevOps: https://opensource.com/article/19/9/pitfalls-avoid-devops