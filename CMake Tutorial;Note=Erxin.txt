CMake Tutorial;Note=Erxin


# Reference books 
- Mastering cmake 
- reference uri, http://www.cmake.org/cmake-tutorial/
https://cmake.org/cmake/help/latest/guide/tutorial/index.html

- file extensions 
.c, .cc, .cpp, .hpp, .h, .cxx 
used for C++ were .c and .h, exactly like for C
unix use .c for c++ files 
other used .c++, .cc and .cxx 
dos and windows c++ tended to use .cpp 

headers used .H, .h++, .hh, .hxx and .hpp, but .h is the popular one

Additionally, some are using for template definitions. 
http://stackoverflow.com/questions/5171502/c-vs-cc-vs-cpp-vs-hpp-vs-h-vs-cxx

# Step 1 
- 


# Learning cmake 
- reference ppt 
http://www.elpauer.org/stuff/learning_cmake.pdf


# Autotools 
- Autohel, autotools create a makefile for make 

# Kitware 
- cmake generate native makefiles and workspaces can be used in the compiler environment of your choice, vc++, kdevelop3, eclidpse, xcode, makefiles, code::blocks etc 

    + build flow 
    cmakelist.txt -> cmake/cmakeSetup/ cmakeGui -> .vcproj/makefile/etc -> native build tools -> .obj -> .exe/dll/lib/a/so/dylib 
    
    + where to place object files and executables 
        * insource 
        app/hello.cpp 
        app/hello.exe 
        
        * out-of-source 
        app/hello.cpp 
        app-build/hello.exe 
        
    + command process 
        
    have this tree 
    app 
        |-build 
        |-trunk
        
    if eclipse, forces to make sure the build directory is not in the source directory 
    app 
        |-trunck 
    app-build 
        
    $ cd app/build 
    $ cmake ../trunk 
    $ make(unix) or open project (vc++)
    
    on window you can also use cmakesetup(GUI).
    
    + simple executable demo 
    PROJECT(helloworld), is not mandatory but you should use it 
    SET(hello_SRCS hello.cpp)
    ADD_EXECUTABLE(hello ${hello_SRCS}), create an executable from the list source 
    
    tips: add sources to a list(hello_SRCS), do not list them in ADD_EXECUTABLE
    
    + check verbose output, use it when build is failed 
    SET(CMAKE_VERBOSE_MAKEFILE on)
    
    or 
    $ make VERBOSE=1
    
    or 
    $ export VERBOSE=1
    $ make 
    
    + add library 
    SET(mylib_SRCS library.cpp)
    ADD_LIBRARY(my shared ${mylib_SRCS}), creates an static library from the listed sources 
    add SHARED to generate shared libraries(unix) or dynamic library(window)
    
    + cmake cache, edit cache with ccmake(unix) or cmakesetup(window)
    
    + variables & cache(I)
    unconditional set 
    SET(var1 13)
    var1 is set 13, if var1 already exist in the cache, it is shadowed by this value, this does not overwrite var1 in the cache 
    
    + reuse the cache 
    SET(var2 13 ... CACHE ...)
    var2 already in cache, keep cache value 
    var2 not in cache then set to 17 
    the value can be changed by editing CMakeCache.txt or "make edit_cache" or running ccmake or running cmake-gui 
    
    + unconditional set&overwrite cache 
    SET(var3 23 ... CACHE FORCE)
    
    + regular expression 
    STRING(REGEX MATCH...), STRING(REGEX MATCHALL ...), STRING(REGEX REPLACE ...)
    
    + version requirement 
    CMAKE_MINIMUM_REQUIRED
    
    + real world cmake, dependencies between targets 
    directory tree 
    app 
        |-build 
        |-trunk 
            |-doc 
            |-img 
            |-libwakeup
                |-wake.cpp 
                |-wake.h
            |-clock 
                |-clock.cpp 
                |clock.h 
                
    write make files to contain the sources 
    PROJECT(clockapp)
    ADD_SUBDIRECTORY(libwakeup)
    ADD_SUBDIRECTORY(clock)
    
    SET(wakeup_SRCS wakeup.cpp)
    ADD_LIBRARY(wakup SHARED ${wakeup_SRCS})
    
    SET(clock_SRCS clock.cpp)
    ADD_EXECUTABLE(clock ${clock_SRCS})
    
    + modify processor settings 
    ADD_DEFINITIONS and REMOVE_DEFINITIONS
    
    compiler settings, CMAKE_C_FLAGS and CMAKE_CXX_FLAGS 
    
    + flow control 
    IF(expression)
    ...
    ELSE(expression)
    ...
    ENDIF(expression)
    
    FOREACH(loop_var)
    ...
    ENDFOREACH(loop_var)
    
    WHILE(condition)
    ...
    ENDWHILE(condition)
    
    + visual studio special 
    to show .h files add them to list of sources in ADD_EXECUTABLE/ADD_LIBRARY
    
    SET(wakeup_SRCS wakeup.cpp)
    IF(WIN32)
        SET(wakeup_SRCS ${wakeup_SRCS} wakeup.h)
    ENDIF(WIN32)
    ADD_LIBRARY(wakeup SHARED ${wakeup_SRCS})
    
    use SOURCE_GROUP if all your sources are in the same directory 
    
    + manage debug and release 
    SET(CMAKE_BUILD_TYPE Debug)
    
    set fro command line 
    $ cmake -DCMAKE_BUILD_TYPE=Release ../trunk 
    
    specify debug and release targets and 3rdparty libs 
    TARGET_LINK_LIBRARIES(wakeup RELEASE ${wakeup_SRCS})
    TARGET_LINK_LIBRARIES(wakeupd DEBUG ${wakeup_SRCS})
    
    + standard directories 
    libraries, FIND_LIBRARY try to avoid LINK_DIRECTORIES
    headers, use INCLUDE_DIRECOTRIES 
    
    + make install 
    INSTALL(TARGET clock wakeup RUNTIME DESTINATION bin LIBRARY DESTINATION)
    
    would install in /usr/local/bin and /usr/local/lib unix or %PROGRAMFILES%\projectname windows 
    
    + find installed software 
    FIND_PACKAGE(Qt4 REQUIRED)
    
    cmake includes finders FindXXXX.cmake for ~130 software package 
    
    use a non-cmake FindXXXX.cmake by setting th CMAKE_MODULE_PATH, just like a #include 
    
    + qt with cmake 
PROJECT( pfrac )
FIND_PACKAGE( Qt4 REQUIRED )
INCLUDE( ${QT_USE_FILE} )
SET( pfrac_SRCS main.cpp client.h client.cpp )
SET( pfrac_MOC_HEADERS client.h )
QT4_ADD_RESOURCES( pfrac_SRCS 
     ${PROJECT_SOURCE_DIR}/pfrac.qrc )
QT4_WRAP_CPP( pfrac_MOC_SRCS 
     ${pfrac_MOC_HEADERS} )
ADD_EXECUTABLE( pfrac ${pfrac_SRCS} $
{pfrac_MOC_SRCS}
TARGET_LINK_LIBRARIES( pfrac ${QT_LIBRARIES} )

    + platform includes 
    CONFIGURE_FILE(InputFile OutputFile [COPYONLY] [ESCAPE_QUOTES] [@ONLY])
    
    CHECK_TYPE_SIZE(needs INCLUDE(CheckTypeSize))
    
    TEST_BIG_ENDIAN(needs INCLUDE(CheckBigEndian))
    
    CHECK_INCLUDE_FILES(needs INCLUDE(CheckIncludeFiles))
    
    + Macros, just like #define in C, suggest prefix variable name with MACRO_
    MACRO(<name> [arg1 [arg2 ...]])
    COMMAND1(ARGS...)
    COMMAND2(ARGS...)
    ...
    ENDMACRO(<name>)
    
    + functions, cmake 2.6+, advantage avoid variable-scope trouble 
    + new targets 
    ADD_CUSTOM_TARGET
    
    ADD_CUSTOM_COMMAND, same as ADD_CUSTOM_TARGET but do not rebuild if not needed 
    
    + use macro help generate documentation 
    MACRO(GENERATE_DOCUMENTATION DOXYGEN_CONFIG_FILE)
    FIND_PACKAGE(Doxygen)
    SET(DOXYFILE_FOUND false)
    IF(EXISTS ${PROJECT_SOURCE_DIR}/${DOXYGEN_CONFIG_FILE})
        SET(DOXYFILE_FOUND true)
    ENDIF(EXISTS ${PROJECT_SOURCE_DIR}/${DOXYGEN_CONFIG_FILE})
    IF( DOXYGEN_FOUND )
        IF( DOXYFILE_FOUND )
            # Add target
            ADD_CUSTOM_TARGET( doc ALL ${DOXYGEN_EXECUTABLE} "$    {PROJECT_SOURCE_DIR}/${DOXYGEN_CONFIG_FILE}" )
            # Add .tag file and generated documentation to the list of files we must erase when distcleaning
            # Read doxygen configuration file
            FILE( READ ${PROJECT_SOURCE_DIR}/${DOXYGEN_CONFIG_FILE} DOXYFILE_CONTENTS )
            STRING( REGEX REPLACE "\n" ";" DOXYFILE_LINES ${DOXYFILE_CONTENTS} )
             ...
            # Parse .tag filename and add to list of files to delete if it exists
            FOREACH( DOXYLINE ${DOXYFILE_CONTENTS} )
                STRING( REGEX REPLACE ".*GENERATE_TAGFILE *= *([^^\n]+).*" "\\1" DOXYGEN_TAG_FILE ${DOXYLINE} )
            ENDFOREACH( DOXYLINE )
            ADD_TO_DISTCLEAN( ${PROJECT_BINARY_DIR}/${DOXYGEN_TAG_FILE} )
                # Parse doxygen output doc dir and add to list of files to delete if it exists
            FOREACH( DOXYLINE ${DOXYFILE_CONTENTS} )
                STRING( REGEX REPLACE ".*OUTPUT_DIRECTORY *= *([^^\n]+).*" "\\1" DOXYGEN_DOC_DIR ${DOXYLINE} )
            ENDFOREACH( DOXYLINE )
            ADD_TO_DISTCLEAN( ${PROJECT_BINARY_DIR}/${DOXYGEN_DOC_DIR} )
            ADD_TO_DISTCLEAN( ${PROJECT_BINARY_DIR}/${DOXYGEN_DOC_DIR}.dir )
            ...
        ELSE( DOXYFILE_FOUND )
            MESSAGE( STATUS "Doxygen configuration file not found ­ Documentation will not be generated" )
        ENDIF( DOXYFILE_FOUND )
    ELSE(DOXYGEN_FOUND)
        MESSAGE(STATUS "Doxygen not found ­ Documentation will not be generated")
    ENDIF(DOXYGEN_FOUND)
    ENDMACRO(GENERATE_DOCUMENTATION)
    
    + calling outside world, EXECUTE_PROCESS
    + create your own finder, need to find .h, libraries
    + show status information, warnings or erros 
    MESSAGE([SEND_ERROR|STATUS|FATAL_ERROR] "message to display")
    
    + file names and window registry, GET_FILENAME_COMPONENT, FILE 
    + find libraries 
    CMAKE_LIBRARY_PATH 
    + find header, FIND_FILE 
- cpack
- ctest+bullsEys/gcov
- cdash 
 