Selenium WebDriver Quick Start Guide=Pinakin;Note=Erxin

# The actions class and javascript executor 
- TestBase class methods 

TestBase class, and are as follows:

keyDown(Keys): Simulates a key press. The key under consideration remains pressed and the subsequent operations may assume that the key is kept pressed.
keyDown(WebElement,Keys): Simulates a key press after focusing on a WebElement. The key under consideration remains pressed and the subsequent operations may assume that the key is kept pressed.
keyUp(Keys): Simulates a key release. If you try to use this method on an undepressed key, this will yield an undefined behavior.
keyUp(WebElement, Keys): Simulates a key release after focusing on an element.
sendKeys(CharSequence...): Sends a variable number of arguments of the CharSequence type. This is a key combination that's sent to the currently active element.
sendKeys(WebElement, CharSequence...): Sends a variable number of arguments of the CharSequence type after focusing on the WebElement that's passed as a parameter.
clickAndHold(): Simulates a left mouse click without releasing at the current mouse location.
clickAndHold(WebElement): Simulates a left mouse click without releasing in the center of a given web element.
release(): Releases the depressed left mouse button at the current location. Attempting to invoke this method without first invoking clickAndHold() will result in an undefined behavior.
release(WebElement): Releases the depressed left mouse button in the middle of the web element. Attempting to invoke this method without first invoking clickAndHold() will result in an undefined behavior.
click(): Left mouse click at the current mouse location.
click(WebElement): Left mouse click in the middle of the given web element.
doubleClick(): Performs a double click at the current mouse location.
doubleClick(WebElement): Performs a double click at the middle of the given web element.
moveToElement(WebElement): Moves the mouse cursor to the center of the element. The element is also scrolled into view.
moveToElement(WebElement,int,int): Moves the mouse cursor to an offset position from the top-left corner of the element. The element is also scrolled into view.
moveByOffset(int,int): Moves the mouse from its current position (or 0,0 if the mouse has not been moved) by the given offset. If the coordinates that are provided are outside the visible window (the mouse will end up outside the browser visible window), then the content is scrolled to match.
contextClick(): Performs a right-click at the current mouse location.
contextClick(WebElement): Performs a right-click at the center of the given element. First, it does a mouseMove to the location of the element.
dragAndDrop(WebElement, WebElement): Executes click-and-hold at the source element, moves to the location of the target element, and then releases the mouse.
dragAndDropBy(WebElement,int,int): Executes click-and-hold at the source element, moves the mouse by a given offset, and then releases the mouse.
build(): Generates a composite action containing all of the actions that have been gathered so far, ready to be performed (the internal builder state is reset, so subsequent calls to build() will contain fresh sequences).
perform(): Performs the accumulated actions without calling build() first. This method has a return type void.

- events fired from WebDriver 

public class EventHandler implements WebDriverEventListener {
 public void afterChangeValueOf(WebElement elem, WebDriver driver) {
 System.out.println("afterChangeValueOf has been invoked for "
 + elem.toString());
 }

 public void afterClickOn(WebElement elem, WebDriver driver) {
 System.out.println("afterClickOn has been invoked for " + elem.toString());
 }

 public void afterFindBy(By elem, WebElement arg1, WebDriver driver) {
 System.out.println("FindBy has been triggered for " + elem.toString());
 }

 public void afterNavigateBack(WebDriver driver) {
 System.out.println("afterNavigateBack has been triggered to go back to "
 + driver.getCurrentUrl());
 }

 public void afterNavigateForward(WebDriver driver) {
 System.out.println("afterNavigateForward has been triggered to go to "
 + driver.getCurrentUrl());
 }

 public void afterNavigateTo(String str1, WebDriver driver) {
 System.out.println("afterNavigateTo has been triggered for " + str1);
 }

 public void afterScript(String str1, WebDriver driver) {
 System.out.println("afterScript has been triggered for " + str1);
 }

 public void beforeChangeValueOf(WebElement elem, WebDriver driver) {
 System.out.println("beforeChangeValueOf has been triggered for web element");
 }

 public void beforeClickOn(WebElement elem, WebDriver driver) {
 System.out.println("Going to click on " + elem.toString());
 }

 public void beforeNavigateBack(WebDriver driver) {
 System.out.println("beforeNavigateBack has been triggered to go back to "
 + driver.getCurrentUrl());
 }

 public void beforeNavigateForward(WebDriver driver) {
 System.out.println("About to trigger beforeNavigateForward "
 + driver.getCurrentUrl());
 }

 public void beforeNavigateTo(String str1, WebDriver driver) {
 System.out.println("About to trigger beforeNavigateTo " + str1);
 }

 public void beforeScript(String str1, WebDriver driver) {
 System.out.println("About to trigger beforeScript " + str1);
 }

 public void onException(Throwable throwable1, WebDriver driver) {
 System.out.println("Exception " + throwable1.getMessage() + " has occurred");
 }

 public void beforeFindBy(By, WebElement elem, WebDriver driver) {
 System.out.println("About to find element " + by.toString());
 }
}

- following example:

Client
Invoker
Command 
Receiver

- Client 

Declare references of two abstract classes, such as AActionKeyword and ACommand.

Create invoker objects.

Invoke the different commands such as open, navigate, and enterText using the invoker objects.

- invokers as there are are components. Components can be textboxes, radio buttons, and so on

invokers as there are are components. Components can be textboxes, radio buttons, and so on. Each individual invoker will create a command object inside it.

```
public class BrowserInvoker {
  private ACommand aCommand = null;

  public BrowserInvoker(ACommand command) {
    this.aCommand = command;
  }

  public WebDriver open(List<String> browserName) {
    WebDriver driver = aCommand.execute(browserName);
    return driver;
  }
}
```

- The command, in our case, will be an abstract class that will have overloaded versions of the execute method.

```
public abstract class ACommand {
  public void execute(String x) {
  }
  public void execute(WebDriver driver, String x) {
  }
  public void execute(WebElement element, String x) {
  }
  public WebDriver execute(List<String> x) {
    return null;
  }
  public WebDriver execute() {
    // TODO Auto-generated method stub
    return null;
  }
}
```

- Receiver, The Receiver will be an abstract class called AActionKeyword that will contain empty method bodies that will be placeholders to perform the work by invoking Selenium WebDriver methods such as click()

```
public abstract class AActionKeyword extends TestBase {

  public AActionKeyword() throws IOException, FilloException {
    super();
  }
  public void clickElement(String x) {
  }
  public WebDriver navigate(WebDriver driver2, String url) {
    return null;
  }
  public WebDriver openBrowser(List<String> browsers) {
    return null;
  }
  public void sendKeys(WebElement elem, String textFill) {
  }

  public void selectValue() {
  }

}
```

- advantages the WebDriverManager offers:

It checks the browser version installed on your machine

- DataProviders in TestNG are used when we need to iterate over objects.


# Selenium 4 is going to change the history of Selenium with its new features. Let's see what the features are:

Complies completely with W3C standardization
For communicating with the browser, the JSON wire protocol will be compliant with W3C specifications
New Selenium IDE available with Chrome and Firefox (currently in the beta stage)
New command-line interface runner that is based on nodejs and supports parallel execution
Improvements to Selenium Grid with the removal of thread safety bugs and improvements to Docker support
Improvements to Selenium UI Grid


















