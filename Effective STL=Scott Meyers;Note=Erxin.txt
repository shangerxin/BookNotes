Effective STL=Scott Meyers;Note=Erxin

# Containers 
- list is the only standard container that offers transactional semantics for multiple-element insertions. Transactional semantics are particularly important for programmers interested in writing exception-safe code. 
-  using swap on containers invalidates iterators, pointers, or references? If so, you’ll need to avoid string

- illusion of container-independent code 

Sequence containers support push_front and/or push_back, while associative containers don’t. Associative containers offer logarithmic-time lower_bound, upper_bound, and equal_range 

The standard STL sequence containers, vector, string, deque, and list.

The standard STL associative containers, set, multiset, map, and multimap.

The nonstandard sequence containers slist and rope. slist is a singly linked list, and rope is essentially a heavy-duty string.

- empty is a constant-time operation for all standard containers, but for some list implementations, size may take linear time.

- When using containers of newed pointers, remember to delete the pointers before the container is destroyed

- Never create containers of auto_ptrs

Frankly, this Item shouldn’t need to be in Effective STL. Containers of auto_ptr (COAPs) are prohibited. Code attempting to use them shouldn’t compile.

When you copy an auto_ptr, ownership of the object pointed to by the auto_ptr is transferred to the copying auto_ptr, and the copied auto_ptr is set to NULL.

```
auto_ptr<Widget> pw2(pw1);         // pw2 points to pw1's Widget;
                                   // pw1 is set to NULL. (Ownership
                                   // of the Widget is transferred
                                   // from pw1 to pw2.)

pw1 = pw2;                         // pw1 now points to the Widget
                                   // again; pw2 is set to NULL
```

- Choose carefully among erasing options

Suppose you have a standard STL container, c, that holds ints,

Container<int> c;

- Have realistic expectations about the thread safety of STL containers


# Vector and string 
- Prefer vector and string to dynamically allocated arrays

The minute you decide to use new for a dynamic allocation, you adopt the following responsibilities:

- use reserve to avoid unnecessary reallocations

One of the most marvelous things about STL containers is that they automatically grow to accommodate as much data as you put into them, provided only that you don’t exceed their maximum size.

- Be aware of variations in string implementations

Bjarne Stroustrup once wrote an article with the curious title, “Sixteen Ways to Stack a Cat” 

- Know how to pass vector and string data to legacy APIs

Since C++ was standardized in 1998, the C++ elite haven’t been terribly subtle in their attempt to nudge programmers away from arrays

- Use “the swap trick” to trim excess capacity

So you’re writing software to support the TV game show Give Me Lots Of Money—Now!

- Item 18: Avoid using vector<bool>

As an STL container, there are really only two things wrong with vector<bool>. First, it’s not an STL container. Second, it doesn’t hold bools

vector<bool> anyway because there’s no portable way to get at the data for a vector<bool>


# Associative containers 
- “the same” is equality, which is based on operator==. set::insert’s definition of “the same” is equivalence, which is usually based on operator<. Because these are different definitions, it’s possible for one definition to dictate that two objects have the same value 

- Item 20: Specify comparison types for associative containers of pointers

Suppose you have a set of string* pointers and you insert the names of some animals into the set:

set<string*> ssp;                                 // ssp = "set of string ptrs"

ssp.insert(new string("Anteater"));
ssp.insert(new string("Wombat"));

- Always have comparison functions return false for equal values

Let me show you something kind of cool. Create a set where less_equal is the comparison type,

































