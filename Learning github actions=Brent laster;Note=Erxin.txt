Learning github actions=Brent laster;Note=Erxin

# Foundations 
- main categories that have starter workflows are:

Automation - some simple examples for basic automation including a “hello world” type

Continuous Integration - a large number of workflows that cover the areas of building, testing, and/or publishing for a large number of different programming languages and tools.

Deployment 

Security 

Miscellaneous 

- example 

https://github.com/actions/starter-workflows

- GitHub Actions is free if either of the following two conditions

repositories are public 

system you execute the actions on are your own 

- paid version 

two types of items you pay for with GitHub Actions:

Storage - Actions allow you to store artifacts and packages on GitHub’s resources.    

minutes - Actions require processing time on virtual systems

- bill document, https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions

Operating System	Per-minute rate (USD)
Linux	$0.008
macOS	$0.08
Windows	$0.016



# How do actions work 
- github actions is an overused term 

The entire system for executing automated workflows in response to events
The actual code and related pieces that implement individual actions

Git reference that resolves to a SHA1 value (a “ref”), such as a branch ref.

a continuous integration (CI) pattern. Some change is made that is automatically detected

- triggering workflows 

A person or a process does some operation in a GitHub repository, which triggers an event.
A matching external trigger happens - i.e. an event from outside of GitHub.
A schedule is setup to run a workflow at particular times or intervals.
A workflow is initiated manually - without an operation having to be done first.

    + example 
The “on” keyword, and the lines that follow it, define under what conditions the workflow will match events and start executing

```
on: [push, pull_request]

on:
  push:
    branches:
      - main   
      
on:
  scheduled:
    - cron: '30 5,15 * * *'   

on: workflow-dispatch

on:    repository-dispatch

on: issue_comment
```

- components, I mean the different pieces that GitHub Actions defines for you to use to build a workflow. 

- Steps are the basic unit of execution you deal with when working with GitHub Actions.

```
steps:
- uses: actions/checkout@v3
- name: setup Go version
  uses: actions/setup-go@v2
  with:
    go-version: '1.14.0'
- run: go run helloworld.go
```

-Runners are defined simply via the runs-on: clause:

runs-on: ubuntu-latest

- Jobs aggregate steps and define which runner to execute them on.  simple job to do a build.
```
jobs:
    build:
           runs-on: ubuntu-latest
           steps:
  - uses: actions/checkout@v3
  - name: setup Go version'
        uses: actions/setup-go@v2
        with:
             go-version: '1.14.0'
  - run: go run helloworld.go
```
- A workflow is like a pipeline. At a high level, it first defines the types of inputs (events) that it will respond to, and under what conditions it will respond to them.

previous definitions.
```
1. name: Simple Go Build
2.
3. on:
4.    push:
5.               branches:
6.                       - main
7.
8. jobs:
9.     build:
10.    runs-on: ubuntu-latest 
11.    steps:
12.      - uses: actions/checkout@v3
13.      - name: Setup Go version
14.          uses: actions/setup-go@v2
15.         with:
16.                    go-version: '1.15.1'
17.      - run: go run hello-world.go
```

- workflow execution 



# What's in an action?
- This action also has a set of workflow files. As noted in Chapter 2, these files are stored in the 

.github/workflows subdirectory of the repository.

- GitHub location of the action’s repository, such as

uses: actions/checkout@v3

“@” sign to select a particular revision of an action’s code.That means you could use a branch, a tag, or even an individual commit’s SHA value

-  go to github.com/actions .    Figure 8 shows this page highlighting this GitHub organization.

- the https://github.com/marketplace/actions/checkout you’ll see the project’s README.md file displayed in a more user-friendly page.




# Working with workflows 
- four ways to get started with a new workflow

setup a workflow 

configure for suggested workflow 

scroll and choose from configure button 

create a worflow file outside of github and add it to .github/workflows folder 

- committing the initial workflow 

When the commit was done to main, that met the criteria specified in our workflow in the on section:
```
# Triggers the workflow on push or pull request events but only for the main branch
push:
  branches: [ main ]
pull request:
  branches: [ main ]
```

https://docs.github.com/en/codespaces/the-githubdev-web-based-editor

- includes includes implicit steps, managed by GitHub, required for the job to execute - like Set up job.

- To indicate the status (pass/fail) of your workflows, you can display a badge in any web page of your repository. Badges are traditionally displayed in the README.md file

https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/adding-a-workflow-status-badge

You can build the URL for a workflow status badge using the name of the workflow file:

https://github.com/<OWNER>/<REPOSITORY>/actions/workflows/<WORKFLOW_FILE>/badge.svg

    + using branch parameter 
    
![example branch parameter](https://github.com/github/docs/actions/workflows/main.yml/badge.svg?branch=feature-1)

    + using event parameter 
    
![example event parameter](https://github.com/github/docs/actions/workflows/main.yml/badge.svg?event=push)





# Github action document 
https://docs.github.com/en/actions
- self host runner 
https://docs.github.com/en/actions/hosting-your-own-runners
- create your own action 
https://docs.github.com/en/actions/creating-actions/publishing-actions-in-github-marketplace#publishing-an-action
https://docs.github.com/en/actions/creating-actions
- trouble shooting 
https://docs.github.com/en/actions/hosting-your-own-runners/monitoring-and-troubleshooting-self-hosted-runners#troubleshooting-network-connectivity
- security handling in github actions 
https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#hardening-for-self-hosted-runners
- examples 
https://docs.github.com/en/actions/examples


# Add the github actions avaliable on the market place 
https://github.com/marketplace?type=actions