Advanced microservices, a hands on approach to microservice infrastructure and tooling=Thomas Hunter;Note=Erxin


# HTTP api design 
- sample 
This is a common notation and is similar to the one used within an HTTP request status line.

GET /v1/zoos: List all zoos (perhaps just ID and name)

POST /v1/zoos: Create a new zoo

GET /v1/zoos/{zoo_id}: Get entire zoo resource

PUT /v1/zoos/{zoo_id}: Update zoo (entire resource)

PATCH /v1/zoos/{zoo_id}: Update zoo (partial resource)

DELETE /v1/zoos/{zoo_id}: Delete zoo

GET /v1/zoos/{zoo_id}/animals: List animals (ID and name) at this zoo

GET /v1/animals: List all animals (ID and name)

POST /v1/animals: Create new animal

GET /v1/animals/{animal_id}: Get animal

PUT /v1/animals/{animal_id}: Update animal (entire resource)

PATCH /v1/animals/{animal_id}: Update animal (partial resource)

GET /v1/animal_types: List all animal types (ID and name)

GET /v1/animal_types/{animaltype_id}: Get entire animal type resource

GET /v1/employees: List all employees

GET /v1/employees/{employee_id}: Get specific employee

GET /v1/zoos/{zoo_id}/employees: List employees at this zoo

POST /v1/employees: Create new employee

POST /v1/zoos/{zoo_id}/employees: Hire an employee for zoo

DELETE /v1/zoos/{zoo_id}/employees/{employee_id}: Fire employee from zoo

- filter resources 

a relational database, the correlating SQL clause:

?limit=10&offset=20: Pagination and offsetting of results (LIMIT 20, 10)

?animal_type_id=1: Filter records that match the following condition (WHERE animal_type_id = 1)

?sort attribute=name,asc: Sort the results based on the specified attributes (ORDER BY name ASC)

GET http://api.example.org/user/12?whitelist=id,name,email
SELECT id, name, email FROM user WHERE user.id = 12;

- JSON Request Body Format
POST /v1/animal HTTP/1.1
Host: api.example.org
Accept: application/json
Content-Type: application/json
Content-Length: 24
{
    "name": "Gir",
    "animal_type": "12"
}

- http headers, common headers you can expect your consumers to provide:

Accept: A list of content types the client accepts

Accept-Language: The language the client is expecting

Content-Length: The length of the body in bytes

Content-Type: The type of data if a body is present

Host: Used for virtual hosting, usually ignored by application

- common API status code 

200 successful 
201 created 
204 no content 
400 invalid request 
404 not found 
500 internal server error 

1xx information 
2xx successful 
3xx redirection 
4xx client error 
5xx server error 

- content types Accept Header

Accept: text/html, application/xhtml, application/xml;q=0.9

- expected body content, expected responses will differ

Requesting a Collection
[
    {
        "id": "1",
        "name": "John Smith",
        "created": "2014-01-01T12:00:00Z",
        "modified": null
    },
    {
        "id": "2",
        "name": "Jane Doe",
        "created": "2014-01-01T12:01:00Z",
        "modified": null
    }
]

get/{collection}
post/{collection}
put/{collection}/{resource_id}
patch/{collection}/{resource_id}
delete/{collection}/{resource_id}

- API standard 

Simple Response EnvelopeWhen responding with a document representing, say, a collection, it is usually adequate to return a top-level array containing each resource object

JSON Schema [13] provides a method for describing the attributes provided by an API endpoint

The JSON API [14] spec provided a standardized format for structuring response documents by introducing some reserved attributes

GraphQL [15] is an API specification created by Facebook. It requires the use of a unique query language as well as a similar language for defining schemas. 

Hypermedia APIs HTTP-based API design without mentioning Hypermedia/Representational State Transfer (REST) [16]. Hypermedia APIs may very well be the future of HTTP API design.
Hypermedia APIs (other than HTML itself). ATOM is valid XML and therefore relatively easy to parse. 


- API transports
JSON RPC [18] is a relatively popular alternative to REST for exposing functionality over a network. 

{"jsonrpc":"2.0","method":"subtract","params":[42,23],"id":1}

Simple Object Access Protocol (SOAP) , which is a term you may have heard of [19]. SOAP is a sort of successor to an older technology called XML RPC.


MessagePack(Binary) is schemaless (much like JSON itself), and serialization from JSON-like objects (Listing 2-54) to a MessagePack representation (Listing 2-55) is straightforward.

Apache Thrift (Binary)


# Deploymemnts
- Automated testing 
- Unit tests 
- Smoke tests 
- Integration tests 
- Acceptance tests 
- Performance tests 
- Regression tests 
- Containers, docker 

docker file from mongodb 

- managing containers with kubernetes 

- build pipeline 

cicd 

- choosing environment 

- building with jenkins 

node {
    docker.withRegistry('', 'dockerhub-tlhunter') {
        def image

        stage('Build Docker Image') {
            image = docker.build("tlhunter/radar")
        }

        stage('Docker Push') {
            image.push(env.BUILD_NUMBER)
            image.push('latest')
        }

        stage('Restart Service') {
            sh('/usr/bin/sudo /usr/sbin/service radar restart')
        }
    }
}

- Travis CI [38] is a tool that is popular for performing continuous integration testing in the open source community

TeamCity [39] is an on-premise paid solution for handling software building and CI

CircleCI [40] is primarily a software as a solution (SaaS) tool you can use but also offers an on-premise enterprise solution


# Service discovery 
- Client-Side Discovery

This approach involves the least number of network hops from when a request is first sent and data is retrieved and delivered to the initiator

- Server-Side Discovery
This approach involves an additional network hop. This added hop is a centralized location for keeping track of routing information

- Register Provider Instance to Discovery
POST /services/{service_name}

{
    "host": "127.0.0.1",
    "port": 20001
}

{
    "id": "d34db33f",
    "host": "127.0.0.1",
    "port": 20001
}

Deregister Provider Instance from Discovery
DELETE /services/{service_name}/{instance}

{
    "id": "d34db33f",
    "host": "127.0.0.1",
    "port": 20001                                                                  
}

- HTTP Routing with Consul

- Elastic Load Balancer Etcd [28] is a tool for distributing key/value data and making this data accessible and consistent.



# Service state 
- everything from the common CRUD operations to more advanced ones such as defining schemas and configuring user permissions.

- MongoDB 
- Fast data structures with Redis 


# Consumer 
# Monitoring 
- ELK: Elasticsearch, Logstash, Kibana

Example Logstash Log Entry
{
    "@timestamp": "2017-01-01T13:37:15.185Z",
    "@version": "1",
    "fields": {
            "category": "server",
            "purged": "23",
            "level": "DEBUG"
    },
    "message": "Global Garbage Collection Finished.",
    "type": "radar"
}

- Analytics tools will allow you to view a dashboard containing overall service information

Grafana, Graphite, and StatsD
If you’d like to run an analytics stack in-house

- PagerDuty [69] is probably the most popular tool for incident management. 

- Pingdom
Pingdom [70] is a tool for making external requests to URLs at regular intervals.

- Nagios
Nagios [71] is probably the most hard-core tool for monitoring the health of applications.

- Grafana 4.0
As of Grafana 4.0 [72] the ability to alert is now built in. This has a number of advantages versus other tools.

- Sensu [73] is capable of doing many different types of monitoring. Essentially anything that can be represented as a shell script 



# Documentation 
- Providing cURL Commands
Services such as Mailgun, Stripe and even GitHub provide sample cURL commands. 

- Swagger [75] is an open source suite of tools for dealing with API design. 



# Collaboration 
- cURL and jq
cURL [76] and jq [77] are amazing tools for a few reasons. They’re entirely cross-platform, being available for macOS, Linux, and even Windows. 

- jq: Piping to jq
To get data to output from cURL and input into jq (or to output and input between any two commands), you can use the pipe operator (|). 



# References 
Wikipedia. List of TCP and UDP port numbers. https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers

Corey Ballou. Why We Chose API First Development, 2013. http://blog.pop.co/post/67465239611/why-we-chose-api-first-development

GitHub, Inc. GitHub v3 API, 2014. http://developer.github.com/v3

Twitter, Inc. Twitter v1.1 API, 2014. https://dev.twitter.com/docs/api/1.1

J. Gregorio, R. Fielding, M. Hadley, M. Nottingham, and D. Orchard. RFC 6570: URI Template, 2012. https://tools.ietf.org/html/rfc6570

Wikipedia. Cross-origin resource sharing, 2012. https://en.wikipedia.org/wiki/Cross-origin_resource_sharing

Jon Postel. Robustness principle, 1981. https://en.wikipedia.org/wiki/Robustness_principle

J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, and L. Stewart. RFC 2617: HTTP Authentication: Basic and Digest Access Authentication, 1999. https://tools.ietf.org/html/rfc2617

R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. RFC 2616: Hypertext Transfer Protocol – HTTP/1.1, 1999. https://tools.ietf.org/html/rfc2616

International Organization for Standardization. ISO 8601: Data elements and interchange formats – Information interchange – Representation of dates and times, 1988. https://en.wikipedia.org/wiki/Iso8601

Stripe, Inc. Stripe API Reference, 2014. https://stripe.com/docs/api

JSON Schema. Home page. http://json-schema.org

JSON API. Home page. http://jsonapi.org

Facebook. GraphQL. http://graphql.org/

Roy T. Fielding. Architectural Styles and the Design of Network-based Software Architectures, Chapter 5 . www.ics.uci.edu/~fielding/pubs/dissertation/ rest_arch_style.htm

Wikipedia. Atom (standard): Example of an Atom 1.0 feed. https://en.wikipedia.org/wiki/Atom_%28standard%29#Example_of_an_Atom_1.0_feed

The JSON-RPC Working Group. JSON-RPC 2.0 Specification. www.jsonrpc.org/specification

Wikipedia. SOAP (Simple Object Access Protocol). https://en.wikipedia.org/wiki/SOAP

Wikipedia. Unix philosophy. https://en.wikipedia.org/wiki/Unix_philosophy

MessagePack. MessagePack: It’s like JSON. but fast and small. http://msgpack.org

Docker. Home page. https://www.docker.com/

Unionfs. Unionfs: A Stackable Unification File System. http://unionfs.filesystems.org/

Docker. Dockerfile reference. https://docs.docker.com/engine/reference/builder

Docker. Install Docker. https://docs.docker.com/engine/installation/

Docker. Docker Hub. https://hub.docker.com/

Kubernetes. Production-Grade Container Orchestration. http://kubernetes.io/

CoreOS. etcd. https://github.com/coreos/etcd

Kubernetes. Installing Kubernetes on Linux with kubeadm. http://kubernetes.io/docs/getting-started-guides/kubeadm/

Wikipedia. Crontab. https://en.wikipedia.org/wiki/Cron#Overview

Apache. Apache Mesos. http://mesos.apache.org/

Mesosphere. Marathon. https://mesosphere.github.io/marathon/

Docker. Overview of Docker Compose. https://docs.docker.com/compose/overview/

Jenkins. Home page. https://jenkins.io/

Cloudbees. Jenkins Docker Pipeline Plugin. https://go.cloudbees.com/docs/cloudbees-documentation/cje-user-guide/index.html#docker-workflow

Jenkins. Using a Jenkinsfile. https://jenkins.io/doc/book/pipeline/jenkinsfile/

Jenkins. GitHub Pull Request Builder Plugin. https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin

Travis CI. Home page. https://travis-ci.org

JetBrains. TeamCity. https://www.jetbrains.com/teamcity/

CircleCI. Home page. https://circleci.com/

Thomas Hunter II. 100 line Service Discovery example. https://github.com/tlhunter/node-discovery

HashiCorp. Consul. https://www.consul.io/

Nginx. Home page. https://www.nginx.com/

HAProxy. Home page. www.haproxy.org/

HashiCorp. Consul Template. https://github.com/hashicorp/consul-template

Thomas Hunter II. Consul HAProxy Example. https://github.com/tlhunter/consul-haproxy-example

Apache. ZooKeeper. https://zooKeeper.apache.org/

Apache. Curator. http://curator.apache.org/

Netflix. Eureka. https://github.com/Netflix/eureka

PostgreSQL. Home page. https://www.postgresql.org/

Wikipedia. ACID. https://en.wikipedia.org/wiki/ACID

MongoDB, Inc. MongoDB. https://www.mongodb.com/

MongoDB, Inc. Query and Projection Operators. https://docs.mongodb.com/manual/reference/operator/query/

Redis. Home page. https://redis.io/

Redis. Redis configuration. https://redis.io/topics/config

Elastic. Elasticsearch. https://www.elastic.co/products/elasticsearch

Roy T. Fielding and Richard N. Taylor. ACM Transactions on Internet Technology (TOIT) , volume 2. ACM, University of California, Irvine, 2002. www.ics.uci.edu/~taylor/documents/2002-REST-TOIT.pdf

Ed. D. Hardt. RFC 6749: The OAuth 2.0 Authorization Framework, 2012. https://tools.ietf.org/html/rfc6749

Ed. E. Hammer-Lahav. RFC 5849: The OAuth 1.0 Protocol, 2010. https://tools.ietf.org/html/rfc5849

Coinbase. API Authentication, 2014. https://coinbase.com/docs/api/authentication

Elastic. Kibana. https://www.elastic.co/products/kibana

Elastic. Logstash. https://www.elastic.co/products/logstash

Apache. Lucene Query Parser Syntax. https://lucene.apache.org/core/2_9_4/queryparsersyntax.html

Grafana. Beautiful metric and analytic dashboards. http://grafana.org

Graphite. Make it easy to store and graph metrics. https://graphiteapp.org

StatsD. Daemon for easy but powerful stats aggregation. https://github.com/etsy/statsd

StatsD. StatsD Metric Types. https://github.com/etsy/statsd/blob/master/docs/metric_types.md

Graphite. Functions. http://graphite.readthedocs.io/en/latest/functions.html

PagerDuty. Home page. https://www.pagerduty.com/

Pingdom. Home page. https://www.pingdom.com/product

Nagios. Home page. https://www.nagios.org/

Grafana. Grafana 4.0 Beta Release Notes. http://grafana.org/blog/2016/11/09/grafana-4.0-beta-release/

Sensu. Home page. https://sensuapp.org

Mailgun, Inc. Home page, 2014. www.mailgun.com

Swagger. Home page. http://swagger.io/

cURL. Home page. https://curl.haxx.se/

jq. Home page. https://stedolan.github.io/jq/