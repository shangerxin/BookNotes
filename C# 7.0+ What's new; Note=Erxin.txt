C# 7.0+ What's new; Note=Erxin

# Reference
- https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7

# Tuples and discards, 
- lightweight unname types that contain multiple public fields

- discards are temporary write-only variables used in assignments when you don't care about the value assigned 

- C# tuple types support == and !=. For more information.

(string Alpha, string Beta) namedLetters = ("a", "b");
Console.WriteLine($"{namedLetters.Alpha}, {namedLetters.Beta}");

var alphabetStart = (Alpha: "a", Beta: "b");
Console.WriteLine($"{alphabetStart.Alpha}, {alphabetStart.Beta}");

the names are only exist in during the compiling time 

    + unpack 
(int max, int min) = Range(numbers);
Console.WriteLine(max);
Console.WriteLine(min);

var p = new Point(3.14, 2.71);
(double X, double Y) = p;

    + example
    
using System;
using System.Collections.Generic;

public class Example
{
    public static void Main()
    {
        var (_, _, _, pop1, _, pop2) = QueryCityDataForYears("New York City", 1960, 2010);

        Console.WriteLine($"Population change, 1960 to 2010: {pop2 - pop1:N0}");
    }

    private static (string, double, int, int, int, int) QueryCityDataForYears(string name, int year1, int year2)
    {
        int population1 = 0, population2 = 0;
        double area = 0;

        if (name == "New York City")
        {
            area = 468.48;
            if (year1 == 1960)
            {
                population1 = 7781984;
            }
            if (year2 == 2010)
            {
                population2 = 8175133;
            }
            return (name, area, year1, population1, year2, population2);
        }

        return ("", 0, 0, 0, 0, 0);
    }
}
// The example displays the following output:
//      Population change, 1960 to 2010: 393,149

    + a variable is a discard by assigning it the underscore (_) as its name. For example, the following method call returns a 3-tuple in which the first and second values are discards 
    
(_, _, area) = city.GetCityInformation(cityName);




# Pattern matching 
- reference, https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching
- create branching logic based on arbitrary types and values of the members of those types 

    + is pattern expression extends the familiar is operator to query an object about its type 
    
if (input is int count)
    sum += count;
    
    
    + code demonstrates these new features 
    
public static int SumPositiveNumbers(IEnumerable<object> sequence)
{
    int sum = 0;
    foreach (var i in sequence)
    {
        switch (i)
        {
            case 0:
                break;
            case IEnumerable<int> childSequence:
            {
                foreach(var item in childSequence)
                    sum += (item > 0) ? item : 0;
                break;
            }
            case int n when n > 0:
                sum += n;
                break;
            case null:
                throw new NullReferenceException("Null found in sequence");
            default:
                throw new InvalidOperationException("Unrecognized type");
        }
    }
    return sum;
}



# Async main method
- the entry point of an application can have the async modifier 

static async Task<int> Main()
{
    // This could also be replaced with the body
    // DoAsyncWork, including its await expressions:
    return await DoAsyncWork();
}

    + program doesn't return an exit code you can return a task 
static async Task Main()
{
    await SomeAsyncMethod();
}



# Local functions 
- you can nest functions inside other functions to limit their scope and visibility. declare methods inside the context of another method 

    + example 
public Task<string> PerformLongRunningWork(string address, int index, string name)
{
    if (string.IsNullOrWhiteSpace(address))
        throw new ArgumentException(message: "An address is required", paramName: nameof(address));
    if (index < 0)
        throw new ArgumentOutOfRangeException(paramName: nameof(index), message: "The index must be non-negative");
    if (string.IsNullOrWhiteSpace(name))
        throw new ArgumentException(message: "You must supply a name", paramName: nameof(name));

    return longRunningWorkImplementation();

    async Task<string> longRunningWorkImplementation()
    {
        var interimResult = await FirstWork(address);
        var secondResult = await SecondStep(index, name);
        return $"The results are {interimResult} and {secondResult}. Enjoy.";
    }
}

    + field attribute 
    
[field: SomeThingAboutFieldAttribute]

https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/
public int SomeProperty { get; set; }

    + local functions vs lambda 
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions#local-functions-vs-lambda-expressions



# More expression-bodied members 
- the list of members that can be authored using expressions has grown,  In C# 7.0, you can implement constructors, finalizers, and get and set accessors on properties and indexers. 

    + examples 
// Expression-bodied constructor
public ExpressionMembersExample(string label) => this.Label = label;

// Expression-bodied finalizer
~ExpressionMembersExample() => Console.Error.WriteLine("Finalized!");

private string label;

// Expression-bodied get / set accessors.
public string Label
{
    get => label;
    set => this.label = value ?? "Default label";
}



# throw exressions 
- throw exceptions in code constructors that previously weren't allowed because throw was a statement and expression 
    + condition operator 
  string arg = args.Length >= 1 ? args[0] :
                              throw new ArgumentException("You must supply an argument");
                              
                              
    + null coalescing 
public string Name
{
    get => name;
    set => name = value ??
        throw new ArgumentNullException(paramName: nameof(value), message: "Name cannot be null");
}         
    + lambda 
DateTime ToDateTime(IFormatProvider provider) =>
         throw new InvalidCastException("Conversion to a DateTime is not supported.");
             

# default literal expressions 
- default literal expressions in default value expressions when the target type can be inferred.

    + before 7.0
Func<string, bool> whereClause = default(Func<string, bool>);

    + after 7.0
Func<string, bool> whereClause = default;



# Numeric literal syntax improvements 
- new tokens improve readability for numeric constants

public const int Sixteen =   0b0001_0000;
public const int ThirtyTwo = 0b0010_0000;
public const int SixtyFour = 0b0100_0000;
public const int OneHundredTwentyEight = 0b1000_0000;



# out variables
- you can declare out values inline as arguments to the method where they're used, The syntax added in C# 7.0 to allow out variable declarations has been extended to include field initializers, property initializers, constructor initializers, and query clauses. 

if (int.TryParse(input, out int result))
    Console.WriteLine(result);
else
    Console.WriteLine("Could not parse input");
    
public class B
{
   public B(int i, out int j)
   {
      j = i;
   }
}

public class D : B
{
   public D(int i) : base(i, out var j)
   {
      Console.WriteLine($"The value of 'j' is {j}");
   }
}

    

# non-trailing named arguments 
- named arguments can be followed by positional arguments 



# private protected access modifier 
- private protected indicates that a member may be accessed by containing class or derived classes that are declared in the same assembly. While protected internal allows access by derived classes or classes that are in the same assembly, private protected limits access to derived types declared in the same assembly.



# improve overload resolution 
- new rules to resolve overload resolution ambiguity 



# techniques for writing safe efficient code 
- a combination of synatx improvements that enable working with value types using reference semantics 

    + reference to that storage in the matrix

public static ref int Find(int[,] matrix, Func<int, bool> predicate)
{
    for (int i = 0; i < matrix.GetLength(0); i++)
        for (int j = 0; j < matrix.GetLength(1); j++)
            if (predicate(matrix[i, j]))
                return ref matrix[i, j];
    throw new InvalidOperationException("Not found");
}

        * protect you from misusing the ref locals and returns
        you must add the ref keyword to the method signature and to all return statements in a method. 
        
        A ref return may be assigned to a value variable, or a ref variable. 
        
        You can't assign a standard method return value to a ref local variable. 
        
        You can't return a ref to a variable whose lifetime doesn't extend beyond the execution of the method. 
        
        ref locals and returns can't be used with async methods. 
        
    + conditional ref expression 
ref var r = ref (arr != null ? ref arr[0] : ref otherArr[0]);


    + in parameter modifier 
static void M(S arg);
static void M(in S arg);

    + indexing fixed fields does not require pinning 
    
unsafe struct S
{
    public fixed int myFixedField[10];
}

    + stackalloc arrays support initializers
    
var arr = new int[3] {1, 2, 3};
var arr2 = new int[] {1, 2, 3};

int* pArr = stackalloc int[3] {1, 2, 3};
int* pArr2 = stackalloc int[] {1, 2, 3};
Span<int> arr = stackalloc [] {1, 2, 3};

    + enhanced generic constraints 
    
You can now specify the type System.Enum or System.Delegate as base class constraints for a type parameter.

support unmanaged constraint 

where generic

    + The ref struct declaration, to indicate that a struct type accesses managed memory directly and must always be stack allocated. 


# compiler options 
- list

1.    -refout and -refonly that control reference assembly generation.
2.    -publicsign to enable Open Source Software (OSS) signing of assemblies.
3.    -pathmap to provide a mapping for source directories.


- global tool

    Install the dotnet-try global tool.
    Clone the dotnet/try-samples repository.
    Set the current directory to the csharp7 subdirectory for the try-samples repository.
    Run dotnet try.
