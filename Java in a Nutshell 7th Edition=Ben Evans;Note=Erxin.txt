Java in a Nutshell 7th Edition=Ben Evans;Note=Erxin


# Introduction to the java environment 
- run program 

$ java <arguments> <program name>

- lifecycle of a java program 

.java - javac -> .class -classloading -> { new type, interpreter [jvm] }


# Syntax 
- comments 

//

/**/

- reserved words 

abstract   const      final        int         public        throw
assert     continue   finally      interface   return        throws
boolean    default    float        long        short         transient
break      do         for          native      static        true
byte       double     goto         new         strictfp      try
case       else       if           null        super         void
catch      enum       implements   package     switch        volatile
char       extends    import       private     synchronized  while
class      false      instanceof   protected   this

- identifiers 

- literals 

1    1.0    '1'    1L    "one"    true    false    null

- punctuation characters as tokens

    + 12 separators 
(   )   {   }   [   ]

... @ ::

;  ,   .

    + operators 
    
+   â€”   *    /    %    &   |    ^    <<   >>   >>>
+=   -=   *=   /=   %=   &=  |=   ^=   <<=  >>=  >>>=
=    ==   !=   <    <=   >    >=
!    ~    &&  ||   ++   --   ?    :   ->

- primitive data types 

boolean, char, bypte, short, int, long, float, double 

    + int 
    
1234        // An int value
1234L       // A long value
0xffL       // Another long value

    + conversion 
short s = (short) 0xffff;
char c = '\uffff';        // The same bits, as a Unicode character
int i1 = s;  

- statements 

int counter 

var i = 0; 

    + if/else 
    
    + switch 
switch(expression){
case:
default:
}

    + while 
    
    + do while 
    
    + for 
    
    for(init;test;update)
    
    + foreach
    
for( declaration : expression )
     statement
    
int[] primes = new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 };
// This is the loop that prints them
for(int n : primes)
     System.out.println(n);

    + break, continue, return 
    
    + synchronized, prevent corruption for multiple threads 
    syncrhonized (expression){
        statements
    }
    + throw 
    
    throw expression;
    
    + try/catch/finally 
    
    + enable assertions
    
    $ java -ea:com.example.sorters.MergeSort com.example.sorters.Test
    
- methods 

modifiers type name (paramlist ) [ throws exceptions ]

    + modifiers 
    abstract, final, native, public, protected, private, static, strictfp, synchronized 
    
    strictfp, fp floating point only perform floating point arithmetic using 32- 64-bit 
    
    native, specifies that the method implementation is written in some native language such as C 
    
    + exception handling, checked and unchecked 
    
public static estimateHomepageSize(String host) throws IOException {
    URL url = new URL("htp://"+ host +"/");
    try (InputStream in = url.openStream()) {
        return in.available();
    }

}

    + variable length argument lists 
    
public static int max(int first, int... rest) {
    /* body omitted for now */
}

public static int max(int first, int... rest) {
    int max = first;
    for(int i : rest) { // legal because rest is actually an array
        if (i > max) max = i;
    }
    return max;
}

- class and object 

/** Represents a Cartesian (x,y) point */
public class Point {
     // The coordinates of the point
     public double x, y;
     public Point(double x, double y) {     // A constructor that
         this.x = x; this.y = y;            // initializes the fields
     }

     public double distanceFromOrigin() {   // A method that operates
         return Math.sqrt(x*x + y*y);       // on the x and y fields
     }
}

    + creating an object 

Point p;

    + null reference 
String s = null;
Point p = null;

    + lambda 
Runnable r = () -> System.out.println("Hello World");

- arrays 

byte b;                        // byte is a primitive type
byte[] arrayOfBytes;           // byte[] is an array of byte values
byte[][] arrayOfArrayOfBytes;  // byte[][] is an array of byte[]
String[] points;    

    + c compatible syntax 
// This line declares local variables of type int, int[] and int[][]
int justOne, arrayOfThem[], arrayOfArrays[][];

// These three lines declare fields of the same array type:
public String[][] aas1;   // Preferred Java syntax

    + creating an initializing arrays 
// Create a new array to hold 1024 bytes
byte[] buffer = new byte[1024];

String[] greetings = new String[] { "Hello", "Hi", "Howdy" };

    + reference 
// Create an array of two strings
String[] responses = new String[2];
responses[0] = "Yes";  // Set the first element of the array
responses[1] = "No";   // Set the second element of the array

    + copy 
int[] data = { 1, 2, 3 };
int[] copy = (int[]) data.clone();

    + java.util.Arrays class contains a number of static utility methods for working with arrays

- reference types 

    + References are completely opaque in Java and the representation of a reference is an implementation detail of the Java runtime

    + boxing and unboxing conversions. Primitive types and reference types behave quite differently. It is sometimes useful to treat primitive values as objects,

// Create a List-of-Integer collection
List<Integer> numbers = new ArrayList<>();
// Store a wrapped primitive
numbers.add(new Integer(-1));
// Extract the primitive value
int i = numbers.get(0).intValue();

    + Boolean, Byte, Short, Character, Integer, Long, Float, and Double are immutable, final classes whose instances each hold a single primitive value.

Integer i = 0;   // int literal 0 boxed to an Integer object
Number n = 0.0f; // float literal boxed to Float and widened to Number
Integer i = 1;   // this is a boxing conversion
int j = i;       // i is unboxed here

- package

    + declare 
package org.apache.commons.net;

    + global unique package names 
    
It is only their package names that keep the java.util.List and java.awt.List classes distinct

    + importing types 
    
import java.io.File;    // Now we can type File instead of java.io.File
import java.util.*;    // For collections and other utilities.
import java.awt.*;     // For fonts, colors, and graphics.

    + importing static members, import the static members of types using the keywords import static. 
    
import static java.lang.Math.*

- java source file structure 

A Java file consists of:

An optional package directive

Zero or more import or import static directives

One or more type definitions

    + definiing and running  java programs 

run the Java executable, java, specifying the fully qualified name of the class that contains the main() method.

$ java -classpath /opt/Jude com.davidflanagan.jude.Jude datafile.jude

    +  bundled in a Java archive (JAR) file, you can run the program simply by specifying the name of the JAR file

$ java -jar /usr/local/Censum/censum.jar

$ *.jar 
to run the jar file 


# Object - oriented programming in java 


















