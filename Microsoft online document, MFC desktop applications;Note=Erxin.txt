Microsoft online document, MFC desktop applications;Note=Erxin

# Reference 
https://docs.microsoft.com/en-us/cpp/mfc/mfc-desktop-applications?view=msvc-160

# MFC desktop applications 
- wrapper over much of the Win32 and COM APIs.



# Concepts
-  MFC simplifies database programming through Data Access Objects (DAO) (now obsolete) and Open Database Connectivity (ODBC), and network programming through Windows Sockets. 
- source files 

Header files (.h) are in the \atlmfc\include directory. Implementation files (.cpp) are in the \atlmfc\src\mfc directory.

- class declarations (usually in this order):

// Constructors

// Attributes

// Operations

// Overridables

// Implementation

    + example 
    
```
/*============================================================================*/
// STDIO file implementation

class CStdioFile : public CFile
{
    DECLARE_DYNAMIC(CStdioFile)

public:
// Constructors
    CStdioFile();

    // . . .

// Attributes
    FILE* m_pStream;    // stdio FILE
                        // m_hFile from base class is _fileno(m_pStream)

// Operations
    // reading and writing strings
    virtual void WriteString(LPCTSTR lpsz);
    virtual LPTSTR ReadString(_Out_writes_z_(nMax) LPTSTR lpsz, _In_ UINT nMax);
    virtual BOOL ReadString(CString& rString);

// Implementation
public:
    virtual ~CStdioFile();
#ifdef _DEBUG
    void Dump(CDumpContext& dc) const;
#endif
    virtual ULONGLONG GetPosition() const;
    virtual ULONGLONG GetLength() const;
    virtual BOOL Open(LPCTSTR lpszFileName, UINT nOpenFlags, CFileException* pError = NULL);

    // . . .

protected:
    void CommonBaseInit(FILE* pOpenStream, CAtlTransactionManager* pTM);
    void CommonInit(LPCTSTR lpszFileName, UINT nOpenFlags, CAtlTransactionManager* pTM);
};
```

- library versions 

support ANSI single-byte 

multibyte character set (MBCS) code, 

as well as versions that support Unicode (encoded as UTF-16LE, the Windows-native character set). 

supported architectures that include x86, x64, and ARM processors. 

    + automatic linking 
    
    the AFX.H header file instructs the linker to link in the full static, limited static, or shared DLL version of MFC; ANSI/MBCS
    
    + Project Properties dialog. In the Configuration Properties > General page, set the Character Set property to Not Set to use a single-byte character set.
    
    + MFC projects use the preprocessor symbol _UNICODE to indicate UTF-16 wide-character
    
- MFC static library naming conventions 

uAFXcd.LIB 

    + meaning 
    
u 	ANSI/MBCS (N) or Unicode (U); omit for version without MFC controls in dialogs
c 	Version with MFC controls in dialogs (CW) or without (NMCD)
d 	Debug or Release: D=Debug; omit specifier for Release

    + example 
    
NAFXCW.LIB 	    MFC Static-Link Library, Release version
NAFXCWD.LIB 	MFC Static-Link Library, Debug version
UAFXCW.LIB 	    MFC Static-Link Library with Unicode support, Release version
UAFXCWD.LIB 	MFC Static-Link Library with Unicode support, Debug version
AFXNMCD.LIB 	MFC Static-Link Library without MFC dialog controls, Release version
AFXNMCDD.LIB 	MFC Static-Link Library without MFC dialog controls, Debug version

- MFC shared dll naming conventions 

MFCversion.DLL 	    MFC DLL, ANSI or MBCS Release version
MFCversionU.DLL 	MFC DLL, Unicode Release version
MFCversionD.DLL 	MFC DLL, ANSI or MBCS Debug version
MFCversionUD.DLL 	MFC DLL, Unicode Debug version
MFCMversion.DLL 	MFC DLL with Windows Forms controls, ANSI or MBCS Release version
MFCMversionU.DLL 	MFC DLL with Windows Forms controls, Unicode Release version
MFCMversionD.DLL 	MFC DLL with Windows Forms controls, ANSI or MBCS Debug version
MFCMversionUD.DLL 	MFC DLL with Windows Forms controls, Unicode Debug version

When you use the shared DLLs, a small static library must still be linked with your code; this library is named MFCSversion{U}{D}.lib.

- dynanmic link library support 

A DLL built by using the MFC static libraries is sometimes called a USRDLL in older references, because MFC DLL projects define the preprocessor symbol _USRDLL. A DLL that uses the MFC shared DLLs is sometimes called an AFXDLL in older references, because it defines the preprocessor symbol _AFXDLL.

- using the classes to write applications for windows 

DAO is supported through Office 2013. DAO 3.6 is the final version, it is obsolete 

Win32's concept of window is encapsulated by MFC class CWnd

CWnd encapsulates or "wraps" the HWND handle that represents a Windows

CDialog encapsulates Win32 dialog boxes.

- SDI and MDI, single-document interface (SDI) and multiple-document interface (MDI) applications.

- documents, views and framework 

    + Thread objects

If your application creates separate threads of execution

    + The application object

Your application class (derived from CWinApp) controls all of the objects above and specifies application behavior such as initialization and cleanup.

    + The document template or templates

A document template orchestrates the creation of documents, views, and frame windows. 

CDocTemplate, CSingleDocTemplate, CMultiDocTemplate 

    + The frame windows

Views are displayed inside "document frame windows." In an SDI application, the document frame window is also the "main frame window" for the application

derive from CFrameWnd to customize the document frame window for SDI applications

Derive from CMDIFrameWnd to customize the main frame window for MDI applications

a class from CMDIChildWnd to customize each distinct kind of MDI 

    + documents.

Your document class (derived from CDocument) specifies your application's data

    + views.

Your view class (derived from CView) is the user's "window on the data." 

derive from CScrollView. If your view has a user interface that is laid out in a dialog-template resource, derive from CFormView

derive from CEditView. For a form-based data-access application, such as a data-entry program

{Main frame window 
{toolbar}
{view}  -> {document} -> {document template} -> {application object}
{status bar}}

- wizard and resource editors 

ActiveX controls programming, the ActiveX Control Wizard serves a purpose much like that of the MFC Application Wizard

    + MFC wizard, Use the MFC Application Wizard to create an MFC project in Visual C++

    + use Class View and the Class Wizard. empty message-handler member functions, and you use the source code editor to implement the body of the handler
    
    + resource editor to create and edit resources 
    
    Microsoft Foundation Class Library provides a file called COMMON.RES, which contains "clip art" resources that you can copy from COMMON.RES and paste into your own resource file. COMMON.RES includes toolbar buttons, common cursors, icons, and more.
    
- building on the framework 
    + View > Resource View 
    Accelerate table 
    Dialog 
    Icon
    Menu
    String Table 
    
    + sequence for building an application with the framework 
    create a skeleton, run the mfc application wizard 
    
    construct user interface, using resource editor to edit user interface 
                              create menu 
                              define accelerators 
                              create dialog boxes 
                              create and edit bitmaps, icons, and cursors 
                              edit toolbar created for you 
                              create and edit other resource 
                              
                              These tools insert message-map entries and empty function templates
                              
    map menu to handler function, events button in properties window in class view 
                                  connect menu to acclerators to handler function in code, Class View opens the editor, scrolls to the empty function template

    map toolbar button to command 
    
    test handler function 
    
    add dialog boxes 
    
    initialize validate and retrieve dialog box data 
    
    create additional classes 
    
    add ready to use components to your application
    
    implement your document class 
    
    implement open, save and save as commands 
    
    implement your view class, A variety of CView-derived classes are available
                               including CListView and CTreeView.

    enhance default printing 
    
    adding scrolling 
    
    create form views 
    
    create database forms 
    
    create a simple text editor 
    
    add splitter windows 
    
    build,text and debug your application 

- sequence of operations for creating ole applications 

create a com component, MFC wizard > Full server/Mini server -> Compound document support tab 

Create a container application from scratch, MFC wizard > Container > Compound document support 

Create an application that support automation from scratch, MFC wizard > Automation > Advanced features 

- operations for creating activex controls 




















