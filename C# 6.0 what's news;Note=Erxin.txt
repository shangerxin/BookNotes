C# 6.0 what's news;Note=Erxin

# Reference
https://www.codeproject.com/tips/1023426/whats-new-in-csharp

# Static types as using 
- before C# 6.0, we had to access ReadKey(), WriteLine() methods of the Console class by explicitly defining the static class qualifier

using System;

namespace NewInCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            MySelf.WhoAmI();
            Console.ReadKey();
        }
    }

    static class MySelf
    {
        public static void WhoAmI()
        {
            Console.WriteLine("I'm Fizz!");
        }
    }
}

    + after importing the static types in the namespace

using static System.Console;
using static NewInCSharp.MySelf;	/* Magic happens here */

namespace NewInCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            WhoAmI();
            ReadKey();
        }
    }

    static class MySelf
    {
        public static void WhoAmI()
        {
            WriteLine("I'm Fizz!");
        }
    }
}


# String interpolation
- before 6.0 

using System;
using System.Collections.Generic;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            string name = "Murphy Cooper";
            string planet = "Cooper Station";

            WriteLine("{0} is actually named after {1}", planet, name);

            ReadLine();
        }
    }   
}

- after 6.0 

using System;
using System.Collections.Generic;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            string name = "Murphy Cooper";
            string planet = "Cooper Station";
            
			/* Magic happens here */
            WriteLine($"{planet} is actually named after {name}");

            ReadLine();
        }
    }   
}

string name = "Sammy Jenkins";
double salary = 1000;

WriteLine($"{name}'s monthly salary is {salary:C2}"); 
WriteLine($"Man! This {name} is kind of a 
{(salary >= 1000 ? "rich guy" : "poor guy")}");

/*Output: 
	Sammy Jenkins's monthly salary is $1000.00
	Man! This Sammy Jenkins is kind of a rich guy
*/


# Dictionary initializers
- before 

using System.Collections.Generic;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Dictionary<string, string=""> 
            alien = new Dictionary<string, string="">()
            {
                {"Name", "Fizzy"},
                {"Planet", "Kepler-452b"}
            };

            foreach (KeyValuePair<string, string=""> keyValuePair in alien)
            {
                WriteLine(keyValuePair.Key + ": " + 
                keyValuePair.Value + "\n");
            }

            ReadLine();
        }
    }   
}

- after 

using System.Collections.Generic;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
        	/* The new and friendly syntax */ 
            Dictionary<string, string=""> alien = new Dictionary<string, string="">()
            {
                ["Name"] = "Fizzy",
                ["Planet"] = "Kepler-452b"
            };

            foreach (KeyValuePair<string, string=""> keyValuePair in alien)
            {
                WriteLine(keyValuePair.Key + ": " + keyValuePair.Value + "\n");
            }

            ReadLine();
        }
    }   
}


# Auto-property initializers 
- before 
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee employee = new Employee();

            WriteLine("Name: " + 
            employee.Name + "\nSalary: " + employee.Salary);

            ReadKey();
        }
        public class Employee
        {
            public string Name { get; set; } 
            public decimal Salary { get; set; }
            public Employee()
            {
            	/* Initializing property through constructor */
            	Name = "Sammy Jenkins";
                Salary = 10000; 
            }
        }
    }
}

- after 

using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee employee = new Employee();

            WriteLine("Name: " + 
            employee.Name + "\nSalary: " + employee.Salary);

            ReadKey();
        }
        public class Employee
        {
        	/* Getter only property with inline initialization */
            public string Name { get; } = "Sammy Jenkins"
            
            /* Property with inline initialization */
            public decimal Salary { get; set; } = 10000; 
        }
    }
}


# nameof expression 
- before c# 6 

using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            try
            {
                CallSomething();
            }
            catch (Exception exception)
            {
                WriteLine(exception.Message);
            }

            ReadKey();
        }

        private static void CallSomething()
        {
            int? x = null;

            if (x == null)
            {
                throw new Exception("x is null");
                
            	/* x is the type name. What if someone changes the 
            	type name from x to i? The exception below would be inappropriate. */
            }
        }
    }
}
class Program
{
    private static void Main(string[] args)
    {
        try
        {
            CallSomething();
        }
        catch (Exception exception)
        {
            WriteLine(exception.Message);
        }

        ReadKey();
    }

    private static void CallSomething()
    {
        int? x = null;

        if (x == null)
        {
        	
            
            throw new Exception("x is null");
        }
    }
}

- after 

using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            try
            {
                CallSomething();
            }
            catch (Exception exception)
            {
                WriteLine(exception.Message);
            }

            ReadKey();
        }

        private static void CallSomething()
        {
            int? number = null;

            if (number == null)
            {
                throw new Exception(nameof(number) + " is null");
            }
        }
    }
}



# Await in catch/finally block 
- c# 6.0 support write asynchronous code inside catch and finally block. Well, now you can do that. 

using System;
using System.Net.Http;
using System.Threading.Tasks;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Task.Factory.StartNew(() => GetWeather());
            ReadKey();
        }

        private async static Task GetWeather()
        {
            HttpClient client = new HttpClient();
            try
            {
                var result = await client.GetStringAsync
                ("http://api.openweathermap.org/data/2.5/weather?q=Dhaka,bd");
                WriteLine(result);
            }
            catch (Exception exception)
            {
                try
                {
                	/* If the first request throws an exception, 
                	this request will be executed. 
                        Both are asynchronous request to a weather service*/
                    
                    var result = await client.GetStringAsync
                    ("http://api.openweathermap.org/data/2.5/weather?q=NewYork,us");

                    WriteLine(result);
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }
    }
}



# Null Conditional Operator & Null Propagation
- The ?. is used to check if an instance is null or not, if it's not null then execute the code after ?. but if it is not, then execute code after ??. Check out the example below:

    + before 

using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            SuperHero hero = new SuperHero();
            if (hero.SuperPower == String.Empty)
            {
                hero = null;
            }
			
            /* old syntax of checking if an instance is null or not */
            WriteLine(hero != null ? hero.SuperPower : "You aint a super hero.");

            ReadLine();
        }
    }

    public class SuperHero
    {
        public string SuperPower { get; set; } = "";
    }
}

    + after 
    
using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            SuperHero hero = new SuperHero();
            if (hero.SuperPower == String.Empty)
            {
                hero = null;
            }

			/* New null conditional operator */
            WriteLine(hero?.SuperPower ?? "You aint a super hero.");

            ReadLine();
        }
    }

    public class SuperHero
    {
        public string SuperPower { get; set; } = "";
    }
}


        * with arrays 
        
private static void Main(string[] args)
{
    List<superhero> superHeroes = null;
    SuperHero hero = new SuperHero();

    if (hero.SuperPower != String.Empty)
    {
        superHeroes = new List<superhero>();
        superHeroes.Add(hero);
    }

    WriteLine(superHeroes?[0].SuperPower ?? "There is no such thing as super heros.");
    ReadLine();
}
    
- null propagation for event/delegate 

    + before 
    
using System;
using System.Collections.Generic;
using System.ComponentModel;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Movie movie = new Movie();
            movie.Title = "The Shawshank Redemption";
            movie.Rating = 9.3;
            WriteLine("Title: "+ movie.Title + "\nRating: " + movie.Rating);
            ReadLine();
        }
    }

    public class Movie : INotifyPropertyChanged
    {
        public string Title { get; set; }
        public double Rating { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            
            /* Old syntax of checking if a handler is null or not */
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(name));
            }
        }
    }
}
    
    + after 

What's New in C# 6.0
Fiyaz Hasan
Rate me:
Please Sign up or sign in to vote.
4.81/5 (88 votes)
2 Sep 2015
CPOL
C# 6.0. features walkthrough with easy to understand examples.
Introduction

Get a quick glance at what's new in C# 6.0. Features walkthrough with easy to understand examples.
What's New in C# 6.0
Static Types as using

So, we are all quite familiar with this notion of accessing static class members using the qualification first. It is not required now. Importing static using can save the day. For example, before C# 6.0, we had to access ReadKey(), WriteLine() methods of the Console class by explicitly defining the static class qualifier.

using System;

namespace NewInCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            MySelf.WhoAmI();
            Console.ReadKey();
        }
    }

    static class MySelf
    {
        public static void WhoAmI()
        {
            Console.WriteLine("I'm Fizz!");
        }
    }
}

In C# 6.0, we can get rid of the qualifiers just by importing the static types in the namespace like below:

using static System.Console;
using static NewInCSharp.MySelf;	/* Magic happens here */

namespace NewInCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            WhoAmI();
            ReadKey();
        }
    }

    static class MySelf
    {
        public static void WhoAmI()
        {
            WriteLine("I'm Fizz!");
        }
    }
}

String Interpolation

You can now forget using placeholders in strings to replace them with real values. C# 6 has a new feature called string interpolation using which you can now directly write your arguments instead of referring them with placeholders inside a string. You can also do whatever you would have done previously with String.Format() function.
Before C# 6.0

using System;
using System.Collections.Generic;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            string name = "Murphy Cooper";
            string planet = "Cooper Station";

            WriteLine("{0} is actually named after {1}", planet, name);

            ReadLine();
        }
    }   
}

After C# 6.0

using System;
using System.Collections.Generic;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            string name = "Murphy Cooper";
            string planet = "Cooper Station";
            
			/* Magic happens here */
            WriteLine($"{planet} is actually named after {name}");

            ReadLine();
        }
    }   
}

Again, these are a few string formatting examples which I missed in the video. [Check the video link at the bottom of the article.]

string name = "Sammy Jenkins";
double salary = 1000;

WriteLine($"{name}'s monthly salary is {salary:C2}"); 
WriteLine($"Man! This {name} is kind of a 
{(salary >= 1000 ? "rich guy" : "poor guy")}");

/*Output: 
	Sammy Jenkins's monthly salary is $1000.00
	Man! This Sammy Jenkins is kind of a rich guy
*/

Dictionary Initializers

C# 6.0 changed the way you can initialize Dictionary. Previously on C# 5, you would have to initialize the Dictionary with this type of syntax, {"Key", "Value"}. Now in C# 6, you can just place the key between two curly brackets ["Key"] and then set the value of the key ["Key"] = "value"; , just like you set the value for other types of variable. This new syntax is friendlier than before.
Before C# 6

using System.Collections.Generic;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Dictionary<string, string=""> 
            alien = new Dictionary<string, string="">()
            {
                {"Name", "Fizzy"},
                {"Planet", "Kepler-452b"}
            };

            foreach (KeyValuePair<string, string=""> keyValuePair in alien)
            {
                WriteLine(keyValuePair.Key + ": " + 
                keyValuePair.Value + "\n");
            }

            ReadLine();
        }
    }   
}

In C# 6.0

using System.Collections.Generic;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
        	/* The new and friendly syntax */ 
            Dictionary<string, string=""> alien = new Dictionary<string, string="">()
            {
                ["Name"] = "Fizzy",
                ["Planet"] = "Kepler-452b"
            };

            foreach (KeyValuePair<string, string=""> keyValuePair in alien)
            {
                WriteLine(keyValuePair.Key + ": " + keyValuePair.Value + "\n");
            }

            ReadLine();
        }
    }   
}

Auto-Property Initializers

C# 6.0 came with a new concept of initializing class properties inline rather than initializing them within the type's constructor. Another handy technique is, if you want to make the setter of a property private to block users from setting value in the property by an instance, you can just declare a getter only property. For example:
Before C# 6

using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee employee = new Employee();

            WriteLine("Name: " + 
            employee.Name + "\nSalary: " + employee.Salary);

            ReadKey();
        }
        public class Employee
        {
            public string Name { get; set; } 
            public decimal Salary { get; set; }
            public Employee()
            {
            	/* Initializing property through constructor */
            	Name = "Sammy Jenkins";
                Salary = 10000; 
            }
        }
    }
}

In C# 6.0

using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee employee = new Employee();

            WriteLine("Name: " + 
            employee.Name + "\nSalary: " + employee.Salary);

            ReadKey();
        }
        public class Employee
        {
        	/* Getter only property with inline initialization */
            public string Name { get; } = "Sammy Jenkins"
            
            /* Property with inline initialization */
            public decimal Salary { get; set; } = 10000; 
        }
    }
}

nameof expression

Next one is the nameof expression. In enterprise level applications, lines of code run like a mad horse. So there is no means of avoiding exception handling where it is necessary. Showing a specific type name with an error message can be a quick way to find the code block where the exception just occurred. But we should also consider refactoring issues. We cannot just simply append a hard coded type name string with an error message and show it to the user because the type name can be changed anytime while refactoring but hard coded string won't change accordingly. So C# 6.0 introduced this concept of nameof expression. A simple example would be like this:
Before C# 6

using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            try
            {
                CallSomething();
            }
            catch (Exception exception)
            {
                WriteLine(exception.Message);
            }

            ReadKey();
        }

        private static void CallSomething()
        {
            int? x = null;

            if (x == null)
            {
                throw new Exception("x is null");
                
            	/* x is the type name. What if someone changes the 
            	type name from x to i? The exception below would be inappropriate. */
            }
        }
    }
}
class Program
{
    private static void Main(string[] args)
    {
        try
        {
            CallSomething();
        }
        catch (Exception exception)
        {
            WriteLine(exception.Message);
        }

        ReadKey();
    }

    private static void CallSomething()
    {
        int? x = null;

        if (x == null)
        {
        	
            
            throw new Exception("x is null");
        }
    }
}

In C# 6.0

using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            try
            {
                CallSomething();
            }
            catch (Exception exception)
            {
                WriteLine(exception.Message);
            }

            ReadKey();
        }

        private static void CallSomething()
        {
            int? number = null;

            if (number == null)
            {
                throw new Exception(nameof(number) + " is null");
            }
        }
    }
}

Await in catch/finally Block

I think many of you were waiting for this feature in C# where you can write asynchronous code inside catch and finally block. Well, now you can do that.

using System;
using System.Net.Http;
using System.Threading.Tasks;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Task.Factory.StartNew(() => GetWeather());
            ReadKey();
        }

        private async static Task GetWeather()
        {
            HttpClient client = new HttpClient();
            try
            {
                var result = await client.GetStringAsync
                ("http://api.openweathermap.org/data/2.5/weather?q=Dhaka,bd");
                WriteLine(result);
            }
            catch (Exception exception)
            {
                try
                {
                	/* If the first request throws an exception, 
                	this request will be executed. 
                        Both are asynchronous request to a weather service*/
                    
                    var result = await client.GetStringAsync
                    ("http://api.openweathermap.org/data/2.5/weather?q=NewYork,us");

                    WriteLine(result);
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }
    }
}

Null Conditional Operator & Null Propagation

Again, we have this new notion of null conditional operator where you can remove declaring a conditional branch to check to see if an instance of an object is null or not with this new ?. ?? null conditional operator syntax. The ?. is used to check if an instance is null or not, if it's not null then execute the code after ?. but if it is not, then execute code after ??. Check out the example below:
Before C# 6.0

using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            SuperHero hero = new SuperHero();
            if (hero.SuperPower == String.Empty)
            {
                hero = null;
            }
			
            /* old syntax of checking if an instance is null or not */
            WriteLine(hero != null ? hero.SuperPower : "You aint a super hero.");

            ReadLine();
        }
    }

    public class SuperHero
    {
        public string SuperPower { get; set; } = "";
    }
}

In C# 6.0

using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            SuperHero hero = new SuperHero();
            if (hero.SuperPower == String.Empty)
            {
                hero = null;
            }

			/* New null conditional operator */
            WriteLine(hero?.SuperPower ?? "You aint a super hero.");

            ReadLine();
        }
    }

    public class SuperHero
    {
        public string SuperPower { get; set; } = "";
    }
}

Again checking a list instance if it is null or not and then accessing its index is also somewhat similar.

using System;
using System.Collections.Generic;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            List<superhero> superHeroes = null;
            SuperHero hero = new SuperHero();

            if (hero.SuperPower != String.Empty)
            {
                superHeroes = new List<superhero>();
                superHeroes.Add(hero);
            }

            WriteLine(superHeroes?[0].SuperPower ?? "There is no such thing as super heros.");
            ReadLine();
        }
    }

    public class SuperHero
    {
        public string SuperPower { get; set; } = "";
    }
}

What if you want to invoke an event/delegate after checking if the handler function is null or not? Well, the null checking syntax would be like in the example below. It is also known as null propagation.
Before C# 6.0

using System;
using System.Collections.Generic;
using System.ComponentModel;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Movie movie = new Movie();
            movie.Title = "The Shawshank Redemption";
            movie.Rating = 9.3;
            WriteLine("Title: "+ movie.Title + "\nRating: " + movie.Rating);
            ReadLine();
        }
    }

    public class Movie : INotifyPropertyChanged
    {
        public string Title { get; set; }
        public double Rating { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            
            /* Old syntax of checking if a handler is null or not */
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(name));
            }
        }
    }
}

In C# 6.0

using System;
using System.Collections.Generic;
using System.ComponentModel;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Movie movie = new Movie();
            movie.Title = "The Shawshank Redemption";
            movie.Rating = 9.3;
            WriteLine("Title: "+ movie.Title + "\nRating: " + movie.Rating);
            ReadLine();
        }
    }

    public class Movie : INotifyPropertyChanged
    {
        public string Title { get; set; }
        public double Rating { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            
            /* Null propagation syntax */
            handler?.Invoke(this, new PropertyChangedEventArgs(name));
        }
    }
}
    
    

# Expression bodied function & property 
- C# 6.0 support write functions and computed properties like lamda expressions 

using static System.Console;

namespace NewInCSharp
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            double x = 1.618;
            double y = 3.142;

            WriteLine(AddNumbers(x, y));
            ReadLine();
        }

		/* Expression bodied function */
        private static double AddNumbers(double x, double y) => x + y;
    }
}


using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Person person = new Person();
            WriteLine("I'm " + person.FullName);
            ReadLine();
        }

        public class Person
        {
            public string FirstName { get; } = "Fiyaz";
            public string LastName { get; } = "Hasan";
            
            /* Expression bodied computed property */
            public string FullName => FirstName + " " + LastName;
        }
    }
}


# Static Using with Extension Methods
-  extension methods are also static methods. It is true if you import a static type which has an extension method

    + before 

using System;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Shape shape = new Shape();
            ShapeUtility.GenerateRandomSides(shape);
            Console.WriteLine(ShapeUtility.IsPolygon(shape));
            Console.ReadLine();
        }
    }
    public class Shape
    {
        public int Sides { get; set; }
    }

    public static class ShapeUtility
    {
        public static bool IsPolygon(this Shape shape)
        {
            return shape.Sides >= 3;
        }

        public static void GenerateRandomSides(Shape shape)
        {
            Random random = new Random();
            shape.Sides = random.Next(1, 6);
        }
    }
}

    + after 
    
using System;
using static System.Console;
using static NewInCSharp.ShapeUtility;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Shape shape = new Shape();
            GenerateRandomSides(shape);
            
            /* You can write WriteLine(ShapeUtility.IsPolygon(shape));. 
            But here I'm executing extension method on shape type, 
            that's why they are called extension methods 
            since there are just a extension of your type. duh! */
            
            WriteLine(shape.IsPolygon()); 
            ReadLine();
        }
    }
    public class Shape
    {
        public int Sides { get; set; }
    }

    public static class ShapeUtility
    {
        public static bool IsPolygon(this Shape shape)
        {
            return shape.Sides >= 3;
        }

        public static void GenerateRandomSides(Shape shape)
        {
            Random random = new Random();
            shape.Sides = random.Next(1, 6);
        }
    }
}



# Exception filtering 
- Execution of the catch block depends on this condition. Let me give you a simple example.

    + before 

using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {
            Random random = new Random();
            var randomExceptions = random.Next(400, 405);
            WriteLine("Generated exception: " + randomExceptions);
            Write("Exception type: ");

            try
            {
                throw new Exception(randomExceptions.ToString());
            }
            catch (Exception ex)
            {
                if(ex.Message.Equals("400"))
                    Write("Bad Request");
                else if (ex.Message.Equals("401"))
                    Write("Unauthorized");
                else if (ex.Message.Equals("402"))
                    Write("Payment Required");
                else if (ex.Message.Equals("403"))
                    Write("Forbidden");
                else if (ex.Message.Equals("404"))
                    Write("Not Found");
            }

            ReadLine();
        }
    }
}

    + after 
    
using System;
using static System.Console;

namespace NewInCSharp
{
    class Program
    {
        private static void Main(string[] args)
        {           
            Random random = new Random();
            var randomExceptions = random.Next(400, 405);
            WriteLine("Generated exception: " + randomExceptions);
            Write("Exception type: ");

            try
            {
                throw new Exception(randomExceptions.ToString());
            }
            catch (Exception ex) when (ex.Message.Equals("400"))
            {
                Write("Bad Request");
                ReadLine();
            }
            catch (Exception ex) when (ex.Message.Equals("401"))
            {
                Write("Unauthorized");
                ReadLine();
            }
            catch (Exception ex) when (ex.Message.Equals("402"))
            {
                Write("Payment Required");
                ReadLine();
            }
            catch (Exception ex) when (ex.Message.Equals("403"))
            {
                Write("Forbidden");
                ReadLine();
            }
            catch (Exception ex) when (ex.Message.Equals("404"))
            {
                Write("Not Found");
                ReadLine();
            }
        }
    }
}















