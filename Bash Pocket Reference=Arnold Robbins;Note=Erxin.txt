Bash Pocket Reference=Arnold Robbins;Note=Erxin

# The bash shell 
- version 4.4 the primary version of gnu/linux and mac osx, also avaliable for solaris and various bsd systems 
- conventions 
constant is shown in constant width 
text should be replaced is shown in italic
shell variable are indicated as $varname 
- history, the original bourne shell distributed with v7 unix in 1979 

David Korn at bell labs develop and enhance the bourne shell by adding csh-like features 

the free software foundation keep develop to produce a complete unix work-alike system which is a clone of Bourne shell. which is called "Bash" the Bourne-Again SHell 


# Overview of features 
- input/output redirection 
- widcard characters for filename abbreviation 
- shell variables and options for customizing the environment 
- a built-in command set for writing shell programs 
- shell functions for modularizing tasks with a shell program 
- job control 
- command-line editing 
- access to previous commands 
- integer arithmetic 
- arrays and arithmetic expressions 
- command-name abbreviation 
- upwards and compliance with POSIX 
- internationalization facilities 
- an arithmetic for loop
- invoking the shell, the command interpreter for the bash shell(bash) 
$ bash [options] [arguments] 

on many system the /bin/sh is a link to bsh 

login shells read /etc/profile, ~/.profile  
 
regular shells read $ENV if it is set 

- command line options 
```
|
|   -c str, read commands from string str 
|   -d, --dump-strings, print all $"..." strings in the program 
|   -i create an interactive shell, many not be used with set 
|   -l, --login, behave as a login shell 
|   -O, option, enable shopt option use +0 unset option 
|   -p start up as a priviledged user, do not read $ENV or $BASH_ENV, do not import functions ignore the values of BASHOPTS, CDPATH, GLOBIGNORE, SHELLOPTS, the normal fixed name startup files ~/.bash_profile are read 
|   -r, --restricted, create a restricted shell 
|   -s, read commands from standard input 
|   -v, --verbose 
|   --debugger, if the debugging profile is available at startup, read it and turn on the extdebug option to shopt
|   --dump-po-strings, same as -D, but output in GNU gettext format 
|   --help, print a usage message and exit successfully 
|   --init-file file, --rcfile file 
|   --noediting, do not use the readline library for input 
|   --noprofile, do not read /etc/profile or any startup 
|   --norc, do not read ~/.bashrc 
|   --posix, turn on POSIX mode 
|   --version, print a version message and exit 
|   -,-- end option process 

```

- arguments are assigned to positional parameters, $1, $2, ... etc the name of the script is variable as $0. the scrpit file itself need not be executable, but it must be readalbe 

- command exit status, it provides a numeric exit status or return value, such as ls provide this value to the os, internal commands such as cd provide this value to the shell 

exit value 0 means true/success 

other means false/failure 

the shell makes the return value of the last executed command  in $? 

    + exist values meanings  
    0 success 
    2 returned by built-in commands to indicate usage error 
    126 command was found but was not executable 
    127 command not found 
    128+N command died due to receiving signal number N 
    
    
# syntax 
- special files 
    + the shell read one or more startup files 
    /etc/profile, executed automatically at login 
    ~/.bash_profile, ~/.bash_login, ~/.profile, executed automatically at login 
    ~/.bashrc is read by every nonlogin shell shell. if invoked as sh or with --posix, bash instead reads $ENV for posix compatiblity 
    
    the getpwnam() and getpwuid() c library functions are the sources of home ~name abbreviations 
    
    when an interactive login shell exits or when non-interactive login shell executes the exit built-in command, bash reads and executes ~/.bash_logout if that file exits 
    
- filename metacharacters 
* 
?
[abc...]
[!abc...], match any not enclosed as above 
~ home 
~name, home directory of user name 
~+ current working directory , $PWD 
~-, previous working directory, $OLDPWD 

    + with the extglob option 
?(pattern), match zero or one 
*(pattern), zero or more 
+(pattern), match one or more  
@(pattern), match exactly one instance of 
!(pattern), match any strings that don't match pattern 

the pattern can be seperate by |, this extended syntax resembles that available in the egrep and awk 

    + globstar option 
** match all files and zero or more subdirectories, when followed by slash then only directory and subdirectories are matched 

bash supports the POSIX [[=c=]] notation that have the same weigth, [[.c.]] for specifying collating sequences

[[:class:]] allow you to match the following classes of characters 

alnum, alphanumeric characters 
alpha, laphabetic characters 
ascii, ascii characters 
blank, space or tab 
cntrl, control characters 
digit, decimal digits 
graph, nonspace characters 
lower, lowercase characters 
print, printable characters 
punct, punctuation characters 

space, whitespace characters 
upper, uppercase characters
word, [[:word:]] is the same as [[:alnum:]_] (not in posix) 
xdigit hexadecimal digits 

- tip, bash reads script one line at a time, it parses each line before exute 

- Brace expansion, has long supported brace expansion based on a similar feature from the c shell 

pre{X, Y[, Z...]} post, expands to preXpost, preYpost, and so on 
pre{start..end[..inc]}post, start and end are ether integers or single letters, incr is an integer, the shell expands this contruct to the full range between start and end, increasing by incr if supplied 

prefix and postfix text are not require for either form, numberif expansion may prefix with one or more leading zeros, the results of expansion are padded with zeros to the maximum of the widths of start and end 

the results of expansion are padded with zeros to the maximum of the widths of start    

    + avoid conflict with parameter expansion 
    $ echo hi{ddd, bb, ccc, aaa}there 
    
    $ ls {ch, app}? 
    
    $ mv {info, .old} 
    expands to mov.old 
    
    $ echo 1 to 1 is {1..10}

- escape sequences in three different contexts 
the $'...' quoted string 
argments to echo -e and printf %b 
format strings for printf 

    + common escape sequences 
\a all 
\b all 
\c echo -e, suppress the terminating newline and not print any following characters 
\cX $'...'  control character X 
\e all 
\E  
\f  formfeed 
\r  carriage return 
\t tab 
\uHHH   unicode character 
\UHHH unicode character
\v   all hexadecimal value hh 
\0nnn    echo -e printf %b 
\'      $'...'      single quote 
\"     $'...'       double quote 
\?      $'...'      question mark 
\\      all     backslash 

overlapping set of escape equences in the values of the PS0, PS1, PS2 and PS4 prompt strings 

- quoting disables a character's special meaning and allows it to be used literally 
; command seperator 
& background execution 
() command grouping 
| pipe 
< > &       redirection symbols 
* ? [] ~ + - @ !    filename metacharacters 
" ' \   used in quoting other character 
` command substitution 
$ variable substitution 
# start a comment that conitnues to the end of the line 
space tab newline           word separators 

- command forms 
cmd &       execute cmd in background 
cmd1; cmd2      commands sequence; execute multiple cmds on the same line 
{cmd1; cmd2;}       execute commands as a group in the current shell 
(cmd1; cmd2)        execute commnds as a grup in a subshell 
cmd1|cmd2           pipe; use output from cmd1 as input to cmd2 
cmd1    `cmd2`      command substitution; use cmd2 output as arguments to cmd1 
cmd1  $(cmd2)       POSIX shell command substitution; nesting is allowed 
cmd   $$((expression))  POSIX shell arithmetic substitution, use the numeric result of expression as a command-line argument to cmd 
cmd1 && cmd2     AND;execute cmd1 and then cmd2  
cmd1 || cmd2 
!cmd        not; exeucte cmd and produce a zero exit status if cmd exits with a nonzero status 

- redirection forms 
file descriptor         name            common abbreviation         typical default 
0                               stand input         stdin                               keyboard 
1                               stand output       stdout                           screen 
2                               standard output  stderr                          screen 

>, <, >>, <<, 

cmd <<< word, supply text of word with trailing new line as input to cmd 
cmd <> file open file for reading and writing on the standard input 
cmd >| file  send output of cmd to file, even if the shell's noclobber option is set 

- reditction using file descriptor 
cmd >&n send cmd output to file descriptor n 
cmd m>&n    output would normal got to the file descriptor m is sent to file descriptor n instead 
cmd >&-     close standard output 
cmd <&n     take input for cmd from file descriptor n 
cmd m<&n    same as previous, except that inptut that whould normally come from m comes from the n 
cmd <&-     clsoe standard input 
cmd <&n-    move the descriptor n to standard input by duplicating it and then closing the original 
cmd >&n-    move file descriptor n to standard output by duplicating it and then closing the original 

- multiple redirection 
cmd 2> file     send standard error to file 
cmd > file 2 >&1    send both standard output and standard error to file 
cmd >& file     same as previous 
cmd &> file same as previous 
cmd &>> file    append  
cmd > file_a 2> file_b 
cmd |tee files  send output of cmd to standard output and to files 
cmd 2>&1 | tee files    send standard output and error output of cmd through a pipe to tee to standard output 
cmd |& tee files 

- process substitution 
cmd <(command)      run command with its output connected to a named pip 
cmd >(command)  run command with its input connected to  a named pipe or an open file in /dev/fd and place the file's name in the argument list of cmd 

- saving file descriptors in variables

- special filenames 
/dev/stdin  duplicate descriptor 0 
/dev/stdout 
/dev/stderr 
/dev/fd/<n>         duplicate of file descriptor <n> 
/dev/tcp/<host>/<port>      bash opens a tcp connection to <host> 
/dev/udp/<host>/<port> 

- functions, a shell function is a grouping of comamnds within a shell script 

    + posix shell syntax 
name(){
    function body 
}[redirections]

the command-line parameters $1 $2, ... receive the function's arugments temporarily hiding the global value of $1, $2 etc, $0 remain the name of the full script 

    + bash syntax 
function name [()]{
    function body 
}[redirection]

functions whose names do not include = or / may be exported into the envirnment with export -f; 

function share traps with the "parent" shell as described in the following table 
signal-based traps 
DEBUG 
ERR 
EXIT 
RETURN 

functions may have local variables and they may be recursive 

bash uses a dynamic scoping model have function scope 

- tip, exit statment will terminate the program 



# variables 
- assignment 
variable_name=value 

there must NOT be any whitespace between the variable name and the value 

    + mutiple assignment in the same line 
var0=v0 var1=v1 var2=v2 

    + by convention names for variables used or set by the shell have all uppercase letters 
    
    + by default the shell treats variable values as strings, even if the value of the string is all digits, if value assigned to an integer variable(created via declare -i), bash evaluates the righthand side of the assignment as an expression 
    
    $ i = 5+3 
    $ echo $i 
    5+3 
    $ declare -i jj;
    $ jj=5+3
    $ echo $jj 
    8 
    
- variable substitution, no spaces should be used in the following expressions, the colon(:) is optional; if not included var must be nonnull 

the variable substitution forms honor the value of the shell nocasematch option 

in noninteractive shells with set -u enabled using an unset variable with the #, ##, %, %%, //, /#, /%, ^, ^^, ,, and ,, substitution 

consider single-quoted text in a variable substitution 
${var:=a'special-text'b} 

var=value... set each variable var to value 
${var}  use value of var; braces are optional if var is separated from the following text 
${var:-value}, use var if set otherwise use value 
${var:=value}, use var if set otherwise use value and assigne value to var 
${var:?value}, use var if set otherwise print value and exit 
${var:+value}, use value if var is set otherwise using nothing 
${#var}, use the length of var 
#{#*}, ${#@} use the number of positional parameters 
${var#pattern} use value of var after removing text matching pattern 
${var##pattern}, same as #pattern but remove the longest matching piece
#{var%pattern}, use value of var after removing text matching pattern from the right, remove the shortest matching piece 
${var%%pattern}, same as %pattern, but remove the longest matching piece 
${var^pattern}, convert the case of var to uppercase 
${var^^pattern}, same as ^pattern but apply the match to every letter in the string 
${var, pattern}, same as ^pattern, but convert matching characters to lowercase 
${var,, pattern}, but apply the match to every lettern in string 
${var@a}, use the flag values representing var's attributes var may be an array subscripted with @ or * 
${var@A}, a string in the orm of a command or assignement statement that if evaluated recreates var and its attributes 
${var@E}, the value of var wth $'...' escape sequences evaluated 
${var@P}, the value of var wth prompt string escape sequences 
${var@Q}, the value of var quoted in a way that allows entering the values as input 
${!prefix*}, list of variables whose names begin with prefix 
${!prefix@}

${var:pos}, starting at position pos(0-based) in variable var 
${var:pos:len}, extract len characters, or extract rest of string if no len pos 
${var/pat/repl}, use value of var, with first match of pat replaced with repl 
${var/pat}, use value of var, with first match of pat deleted 
${var//pat/repl}, use value of var, with every match of pat replaced with repl 
${var/#pat/repl}, use value o fvar, with match of pat replaced with repl, match must occur at the beginning 
${var/%pat/repl}, use valeu of var with match of pat replaced with repl, match must be occur at the end 
${!var}, use value f var as name of variable whose value should be used (indirect reference)

- indirect variables(namerefs), that name a specond variable, all actions applied to the nameref are done to the varialbe named by nameref's value 

namerefs are created using declare -n removed using unset -n and tested for with test -R 
$ greeting="hello world" 
$ declare -n message=greeting           declare the nameref 
$ echo $message 
hello world 
$ message="bye now" 
$ echo $greeting 
bye now 

bash provide a special syntax that lets one variable indirectly reference another but assignments with this syntax are not possible 
$ text=greeting 
$ echo ${!text}
bye now 

    + when a name ref is used as the control variable in a for loop, the loop terms are treated as variable names and the nameref refers to each in turn 
    $ declare -n nr 
    $ i=1 
    $ for nr in v1 v2 v3 
    >do 
    >   nr=$((i++))
    >done 
    $ echo v1 v2 v3 
    1 2 3 
    
    convering an existing variable into a nameref disables the -c, -i, -l and -u attributes 
    
- built-in shell variables 
$#, number of command-line arguments 
$-, options currently ineffect 
$?, exit value of last executed command 
$$, process number of the shell 
$!, process number of last background command 
$0, first word the command name. this will have the full pathname if the command was found via PATH search 
$n, individual arguments on the command line 
$*, $@, all arguments on the command line, $1, $2, ...
"$*", all arguments on the command line as one string 
"$@", all arguments on the command line with individual quoted ("$1" "$2")

    + bash automatically set the following addtional variables 
$_, temporary variable initialiated to the pathname of the script or program being executed, later stores the last argument of the previous command, also stores the name of the matching mail file 
BASH    the full path name used to inovke this instance of bash 
BASHOPTS    a read-only colon-separated list of shell options that are curretly enabled 
BASHPID     the process id of the current bash process. in some cases this can differ from $$ 
BASH_AIASES, associative array variable, each element holds an alias defined with the alias command 
BASH_ARGC, array variable, each element holds the number of arguments for the corresponding function or dot-script invocation. set only in extended debug mode, with shopt -s extdebug 

BASH_ARGV, an array variable similar to BASH_ARGC, each element is noe of te arguments passed to a function or dot-script 
BASH_CMDS,  associative array variable, command in the internal hash table maintained by the hash command 
BASH_COMMAND    the command currently executing or about to be executed 
BASH_EXECUTION_STRING,  the string argument passed tothe -c option 
BASH_LINENO,        array varialbe, corresponding to BASH_SOURCE and FUNCNAME
BASH_REMATCH, array variable assigned by the =~ operator of the [[]] construct the index zero is the text that matched the entire pattern 
BASH_SOURCE, array varialbe containing source filenames 
BASH_SUBSHELL
BASH_VERSINFO[0-5]
BASH_VERSION 
COMP_CWORD, for programmable completion, index into COMP_WORDS 
COMP_KEY, for programmable completion, the key or final key in a sequence 
COMP_...

COPROC, array holds the file descriptor used for communicating with an unnamed coprocess 
DIRSTACK, array variable, containg the contents of the directory stack as displayed by dirs 
EUID, read-only variable with the numeric effective UID 
FUNCNAME, array variable, containg function names 
FUNCNEST, a value greater than zero defined the maximum function call nesting level 
GROUPS, array variable containing the list of numeric group ids 
HISTCMD, the history number of the current command 
HOSTNAME, the name of the current host 
HOSTTYPE, a strig that describes the host system 
LINENO, current line number within the script for function 
MACHTYPE, a string that describes the host system in the GNU cpu-compay-system format 
MAPFILE, default array for the mapfile and readarray commands 

OLDPWD, previous working dir 
OPTARG, value of argument to last option processed by getopts 
OPTIND, numerical index of OPTARG 
OSTYPE
PIPESTATUS, array variable, containing the exit status of the commands in the most recent foreground 
PPID, process nubmer of this shell's parent 
PWD, current working directory 
RANDOM[=n], generate a new random number with each reference;start with integer n
READLINE_LINE, for use with bind -x, the contents of the editing buffer are available in this variable 
READLINE_POINT, for use with bind -x the index in $READLINE_LINE of the insert point 
REPLY   default reply used by select and read 
SECONDS[=n], number of seconds since the shell was started 
SHELLOPTS, a read-only colon-seperated list of shell  options 
SHLVL, incremented by one every time a new bash 
UID, read-only variable with the numeric real UID of the current user 

- other shell variables, these varialbe are not automatically set by the shell you typically set them in your .bash_profile or .profile file 

variable=value 

BASH_COMPAT, if set to decimal or integer value, that corresponds to a supported shell compatibility level, enables that compatibility level 
BASH_ENV, set at startup names as a file to be processed for initialization commands 
BASH_LOADABLES_PATH, one or more pathnames, delimited by colons 
BASH_XTRACEFD=n, file descriptor to which bash writes trace output 
CDPATH=dirs 
CHILD_MAX=n 
COLUMNS=n, screen's column widith 
COMPREPLY 
EMACS 
ENV=file 
EXECIGNORE=patlist 
FCEDIT=file 
FIGNORE-patlist, colon-separated list of suffixes describing the set of filenames to ignore when doing filename completion with readline library 
GLOBIGNORE=patlist 
HISTCONTROL=list
HISTFILE=file 
HISTFILESIZE=n 
HISTIGNORE=list, must mach the entire command line 
...
HOME=dir, home directory 

- Arrays, indexed arrays where indices are integers zero and above 
    + init an array 
    message=(hi there how are you today)
    message[0]=hi 
    message[-1]=today 
    + support positive and nagative index 

    + array substitutions 
    ${name[i]}, use element i of array name; i can be any arithmetic expression as described in the section 
    ${name}, use element 0 of array name 
    ${name[*]}, use all elements of array name 
    ${name[@]}

    ${#name[*]} use the number of elments in array name 
    ${#name[@]}
    
- associative arrays , indices are strings instead of numbers as in awk. associated arrays must be declared by using the -A option to the declare, local and readonly commands 
data=([joe]=30 [mary]=25)
message=([0]=hi [2]=there)

retrieve the values 
${data[joe]}

- special prompt strings, PS0, PS1, PS2 and PS4 for following special escape 
\a, an ascii bel character 
\A, the current time in 24-hour 
\d, the date in "weekday month day" format 
\D{format} 
\e, an ascii escape character 
\h, the hostname up to the first period 
\H, the full hostname 
\j, the current number of jobs 
\l, the basename of the shell's terminal device 
\n, a newline character 
\r, a carriage return character 
\s, the name of the shell 
\t, the current time in 24 hour 
\T the current time in 12 time 
\u, the current username 
\v the version of bash 
\V the release of bash 
\w the current dirctory 
\W the basename of the current directory 
\! the history number of this command 
\# the command number of this command 
\$ if the effectie uid IS 0 A # OTHERWISE A $ 
\@ the current time in 12-hour 
\nnn the character representted by octal value nnn 
\\ a literal backslash 
\[  start a sequence of nonprinting characters 
\] end a sequence of nonprinting characters 

- arithmetic expressions 

the let command performs integer arithmetic, the shell provide a way to subsittue arithmetic values; base conversion is also possible 

$((expr)) use the value of the enclosed arithmetic expression
B#n interpret integer n in numeric base B 

- operators, the shell uses the following arithmetic operators in decreasing order or precedence 
++ -- auto-increment and auto-decrement, both prefix and postfix 
+ - unary plus and minus 
! ~ logic negation and binary inversion 
** exponentiation 
* / % mutiplication, division, modulus 
+ - addition subtraction 
<< >> bitwise left shift, bitwise right shift 
< <= > >= 
== != 
& 
^ 
| 
&& 
|| 
?:
= += -= *= /= %= <<= >>= &= ^= |= ,

- notes, let and ((...)) are built in to the shell, they have access to variable values, exit status of let is confusing. it's zero(success/) for a nonzero mathmetical result, and non-zero(failure) for a zero mathmetaical result 

let "count=0" "i=i+1" assign values to i and count 

let "num % 2" exit successfully if num is odd 

((percent <= 0 && 
   percent <= 100)) test range of a value 
a=5 b=2 

echo $(("a" + "b")) variable may be double-quoted 

- commandline history 
line-edit mode 
the fc command 
c-shell-style history 

    + line-edit 
emacs editing mode is the default 
   
    + common editing keystrokes 
k   ctrl-p get previous command 
j    ctrl-n get next command  
h    ctrl-b move back one character 
l    ctrl-f  move forward one character 
b    esc-b   move back one word 
w    esc-f move forword one word 
X    del  delete previous character 
x    ctrl-d delete word forward 
dw   esc-d  delete word forward 
db   esc-h  delete word backward 
xp   ctrl-t   transpose two characters 

- the fc command, stands for either "find command" or "fix command", use fc -l to list history commands 
$ history 
$ fc -l 20 30  list commands 20 throught 30 


# Programmable completion 
- realine library provide completion facilities, whereby you can type part of a command name, hit the tab key and bash fills in part or all of the rest of the command or filename 

    + allow you to provide a completion specification 
    + can use complete -F funcname command 
    ...
    + refer for mac, http://bash-completion.alioth.debian.org 
    
    + example 
    $ complete -f -X '!*.[Ccos]' gcc cc 
    

# Job control 
- let you place foreground jobs in the background bring background jobs to the forground, many job control command take a job id as an argument 

%n job number n 
%s job whose command line starts with string s 
%?s job whose command line contains string s 
%% current job 
%+ current job(same as %%) 
% current job(same as %%) 
%- previous job 

the shell provides the following job control commands 
bg, put the curent job in the background 
fg, put the current job in the foreground 
jobs, list active jobs 
kill, terminate a job 
stty  tostop, sto pbackground jobs 
suspend, suspend a job-control(such as one created by su)
wait(wait for background jobs to finish)
ctrl-z, suspend a forground job 


# shell options
- provides a number of shell options, settings that you can change to modify the shell's behavior you control these options with the shopt command 

- compatNN options are all mutually exclusive with each other, use BASH_COMPAT is prefred 

autocd, when the first word a simple command cannot be executed try to cd to it 
cdable_var, treat a ondirectory argument to cd as variable whose value is directory to go to 
cdspell, attempt spelling correction on each directory component of an argument to cd 
checkhash, check that commands found in the hash table still exist 
checkjobs, 
checkwinsize, check widnwo size 
cmdhist, save all lines of a multiline command in one history entry 
compat31, restore the behavior of the =~ operator for the [[]]
compat32, cause the < and > operators of the [[]] command to ignore the locale when doing string comparison 
compat40, cause the < and > operators of the [[]] command to ignore the local when doing string comparison 
...


# Command execution, when you type a command bash loks in the following places until it find a match
- places 
    + keywords such as if and for 
    + aliases 
    +posix shells only special built-in like break and continue 
    + functions, when not in posix mode bash finds functon before built-in commands 
    + nonspecial built-ins such as cd and test 
    + scripts and executable programs 
    + when a command is not found if a function named command_not_found_handle exists the shell calls it passing the command world as the function arguments 
    
- coprocesses is a process that runs in parallel with the shell and with which the shell can communicate, the shell starts the process in the background, connecting its standard input and output to a two-way pipe 
    + coproc name non-simple command 
    + coproc command args 
    
there are only one active coprocess at a time   
    + example 
    $ coproc testproc (echo 1 
    >read aline;echo $aline)

    $ echo ${testproc[@]}
    $ echo $testproc_PID 
    
    #read the first line of coprocess output and show it 
    $ read out <&${testproc[0]}
    
# restricted shells, is one that disallows certain actions such as chaning directory, setting path or running commands 


# Built-in commands 
- all most all built-in commands recognize the --help option 
[[]] same as test expression or [expression], excep that [[]] allows addtional operators word splitting and filename expansion 

: [argumetns]   null command return an exit status of 0 

#!shell   used as the first line of a script to invoke the named shell 

. file [arguments]  read and execute lines in file 

name()   define name as a function 

alias [-p]  [name[='cmd']]      assign a shorthand name as a synonym for cmd 

bg  jobid       put current job or jobids in the background 

bind [-m map] [options]     manage the readline library, nonoption arguments have the same form as in a .inputrc file 

break [n]       exit from a for, while ...

builtin command [arguments ]        run the shell built-in command 

caller [expression]     print the line number and source file name 

case value in 
[(]pattern1) cmds1;;       #;& or ;;& 
[(]pattern2) cmds2;;
...
esac        execute the first set of commands cmds1 if value matches pattern1 
    
    + example 
    case $1 in 
    no|yes response=1;; 
    -[tT]) table=TRUE;;
    *)  echo  "unknown option"; exit 1;; 
    esac 
    
cd change to home directoy of use 

options 

command [-pvV] name [arg...]        bypases any aliases or function that may be defined for name 

compgen [options] [string]      generate possible completions for string

complete        specify how to complte arguments for each command 

comopt, print completion options 

continue 

declare         declare variables and manage their attributes 

dirs        print the directory stack 

disown remove one or more jobs from the list of jobs managed by bash 

do  reserved word that precedes the command sequence in a for while, until, or select statement 

done 

echo 

enable      enable or diable shell built-in commands 

esac        reserved word that ends a case statement 

eval 

exec        execute command in place of the current process. with only redirection exec is also useful for optioning closing copying or movig file descriptors 

exit [n]

false 

fc  display or edit commands in the history list 

fg bring current job or jobid 

for 

function 

getopts         process command-line arguments and check for legal options 

hash        as the shell finds commands along the search path 

help 

history 

if

jobs    list all running and stopped jobs 

kill    

let expression      performan arithmetic as specified by one or more expressions 

local       declare local variables for use inside functions 

logout 

mapfile         read standard input into array one line per element 

popd        pop the top directory off the directory stack 

printf          format string like ansi c printf 

pushd 

read        read one line of standard input 

readarray       identical to the mapfile command 

readonly    prevent specified shell variables from being assigned new values

return 

select  x [in list]
do  
    commands 
done            display a list of menu items on standard error, numbered in the order they are specified in list 

shift       shift positional arguments, if n is given, shift to the left n places 

shopt       set or unset shelll options 

suspend         suspend the current shell often used to stop an su command 

test condition
[condition]
[[condition]]       evaluate a condition and if its value is true return a zero exit status otherwise return a nonzero exit status  [] is equal to test command, [[]] will suspend the word spliting and path name expansion 

time        print the total elapsed time 

times       print accumulated user and system process times for the shell and the processes it has run 

trap [[commands] signals]       execute commands if any signals are received 

signals         for standard signals 

true 

type        show whether each command name is an external command 

typeset         identical to declare 

unlimit     print the value of one or more resuorce limits 

umask       display the file creation mask or set the file creation mask to octal value nnn

unalias      remove names from the alias list 

unset       erase definitions of functions or variables listed in names 

untill  condition           
do 
    commands 
done 

wait        pause execution until all background jobs complete then return an exit status of zero 

while condition
do 
    commands 
done 

filename    read and execute commands from executable file filename 
