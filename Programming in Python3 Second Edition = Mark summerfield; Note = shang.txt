Python 文档查找地址 http://docs.python.org处查找
Python 文件以 *.py命名
编译方法， Python.exe *.py

Python 的GUI库，PyGtk, PyQt, wxPython

数据类型
整形，int; 字符串，str(unicode)；实际编程时无需指定

Python使用unicode编码，编程中可以使用任何特殊符号作为标识符。

对象索引，所有的变量等都是引用的，建立时会首先查找内存存在则指向，否则建立

type()返回给数据项的数据类型
print()函数用于打印输出

组合数据类型
其中两种是，可以存储任何类型的内容；
元数组，长度固定；使用逗号创建
"1","2","3"
('1','2','3') //建立元数组
列表，需要时可改变大小；
[1,3,"3"]  //创建列表
添加元素 list.append(parameter)
使用len()函数直接可以得到长度

逻辑操作
is 操作，检测两个引用是否引用同一个内存地址
内存中的空对象使用关键字none表示
加 not 进行非检测

二进制比较操作符，比较引用的值是否相等
<, <=, ==, != , >=, > 

流程控制语句
If expression:
  code
elif expresion:
  code
else:
  code
  
while expression:
  code
code中含有continue, break语句来控制循环的执行方向。通过缩进来表示循环的while的作用范围

for variable in variable
  code
  
异常处理
try
  code
except exception1 as variable1:
  code
except exceptionN as variableN:
...
[else:]
  code
[finally:]
  code
没有异常发生的时候，else块将被执行，无论任何时候finally块被执行
异常结构
object
|
baseException
|
exception
|
arithmeticError; environmentError; eofError; lookupError; valueError
|                       |                           |            |     
IoError              OsError                    IndexError   KeyError
产生异常
raise Exception(args)
自定义异常
class exceptionName( baseException ): pass
捕获异常后可以使用isInstance()函数来捕获异常

算数运算
+, -, *, /, +=, -=, 推荐使用二元操作数
重载操作符的效率一般没有直接调用函数的效率高

输入输出函数
input(), print()

导入模块
import systemBlock

关键字
and, continue, except, global, lambda, pass, while, as, def, False, if, None, raise, with, assert, del, finally, import, nonlocal, return, yield, break, elif, for, in, not, True, class, else, from , is, or, try

下划线的使用，python内置变量的开头结尾都使用了_，编程时避免使用类似的方法
单个下划线代表最后一个表达式的执行结果，如计算的结果 _

数字类型
fractions.fraction，标准库中精度不受限制的数据类型，用于科学与数学计算中

输出重定向到文件
*.py > FileName

定义函数
def functionName(parameters):
  code
一般函数的调用格式是，模块名.函数名；使用某个模块内的函数时要首先引入模块

整数操作
x // y  整数操作，对结果四舍五入，等于round()方法
x ** y  x的y次幂
divmod(x,y)  返回x,y相除的商和余数
pow(x, y, z) 执行 pow(x, y) % z
整数类型转换
bin(i)  返回i的二进制数；hex(i); int(i) 不进位; oct(i) 八进制
整数位逻辑操作
i|j  或； i^j 异或; i & j; i << j 不检查溢出; i >> j；～i取反

布尔
True, False

浮点
floatS提供17个数字的精度

Math数学模块，内部有多种数学处理函数

复数，构造使用i, j来表示虚步，与matlab中相同；可以使用cmath模块来进行复数的数学运算

十进制数字 Decimal

字符串转义字符
\newline 忽略换行; \N{name} 给定名称的unicode字符；
其他于C相同
字符串比较，要注意unicode使用两种或更多种字节序列表示，解决的方法是比较时导入 unicodedata模块并以NFKD为第一个参数来调用unicodedata.normalize()
另一问题的相同的字符在不同的国家排序顺序可能不同，但python并不推测，只是按照字母顺序进行排序
字符串具有两种索引，一种同C；一种是负索引字符串的最后一个是-1,向前逐渐减小
字节调用部分字符串的方法类似于matlab，  aryName[start : end ：[step]],若果步长为负则默认起始位置为-1, 否则默认是0
字符串类具有各种操作方法，使用string.format()方法进行字符串格式化，对列表等集合类参数引用的时候类似于C#
str.encode()方法来改变编码方式

组合数据类型
python提供了5种数据类型，byteArray,bytes, list, str, tuple
支持的操作in, len(), 分片[]，并且是可以迭代的
元组，是一个有序表，包含0个到多个对象，可以使用list()将其转换为列表
列表，是动态的数据集合，在取消引用后无法确定是否被垃圾回收期回收的情况下可以使用try...finally或者使用with语句
集合类型set也是一种集合类型，只有可哈希运算的对象可以添加到集合中
{32,"awe",1,0,-29}
也可以使用set()函数来进行建立集合，元素个数可以为0
固定集合，frozenset()方法创建的集合不能修改，具有固定长度
映射类型，是键-值组合的，无序的映射类型dict与以标准库中的collections.OrderedDict，构造函数dict()
objDict = dic({"id":1948, "name":"Washer", "size":3})
有序字典collection.order()，使用方法与无序字典一样，只不过字典内容的顺序与插入的元素的值相关
iterable数据类型每次返回其中的一个数据项，没有数据项时产生stopIteration异常
对象的深度复制，引入块 copy.deepcopy()

自定义函数
可以创建四种函数，全局，局部，lambda，方法；函数是在执行def语句的时候创建的
局部函数，是创建在其他函数内的，例如在一个函数内创建一个其他函数无法看到的小的helper 函数
方法，是与特定数据类型关联的函数
帮助器可以通过输入q或quit()来退出帮助
对于函数的参数可以传递一个集合对象来完成，并在集合(包含元组，列表等)对象前加 **来将集合对象中的每个元素值分配给函数的各个参数
functionName(parameter0, parameter1, ... )  //定义
functionName( **objCollection )   //调用
lambda表达式，创建使用如下格式
lambda [parameters]:[(]expression[)]
其中expression不能含有return, yield语句；建立后返回匿名函数；对于为expression为元组或为lambda函数为其他函数参数的时候expression的要加括号

全局变量，引用的时候使用global语句

断言，前提与后果使用assert语句指定
assert booleanExpression, optionnalExpresion
如果booleanExpression为false则产生assertionError异常，并将optionalExpression作为异常的参数进行传递

模块，简单的说就是一个*.py文件；导入方法
import moldName
import moldName0, moldName1, ...
import moldName as preferedName  //用于两个模块中有相同函数名得情况
from moldPlace import moldName as preferedName
文件存储的目录名与模块名不要冲突
自定义模块，

编译器直接执行代码 python -c "command string"

包，就是一个目录

标准库，涵盖了大概200个左右的包与模块，并且有丰富的第三方模块
io.string  类
fileinput  模块
calendar  模块
bisect  模块提供的函数可以搜索有序序列
collection 包
array 模块
weakref 弱引用
提供了对各种文件编码的支持，如base64模块提供对读写rfc3548指定的base16,base32,base64等文件的读取；处理压缩文件等
shutil 模块提供了用于文件与目录处理的高层函数
filecmp 模块用于处理文件比较
os 模块提供了对操作系统的访问接口
针对网络
socket模块提供了大多数基本的网络功能；加密与认证可以使用ss1模块建立；socketserver模块提供了tcp与udp服务器，通过forking()可以创建单独的进程
定义了wsgi，为web服务器与python的应用程序之间提供了一个标准的接口
http.cookies模块与http.cookiejar模块提供了用于管理cookies的函数
cgi脚本支持则是由cgi模块与cgitb模块提供的
http.client模块提供处理http请求；html与xml可以使用http.parser模块进行分析；urllib.parse模块可以创建于分析url；ftplib, smtpd, xml.dom, xml.dom.minidom

面向对象程序设计
自定义类
class className([baseClass]):
  code
类的预定义方法如 __new__(); __init()__实现基本类的构造，一般只要重写这些方法既可。使用super()方法来取得基类对象的引用，例如调用基类构造函数super().__init__()
定义属性
@property  //称为修饰器
def propertyName([parameter])
  code
@classmethod
def functionName([parameter])
  code

创建数据类型
一种是从object继承；一种是从现有的类型中继承

可以使用ｙｉｅｌｄ方法来提供迭代类型结构的返回
yield varName	//程序将varName作为一个结果返回给调用的__next__()函数

pickle模块可以使用多种格式，文档中称为ｐｒｏｔｏｃｏｌｓ，对数据进行序列化
如二进制文件读些，压缩文件读些，等多种文件格式的读写模块
对于压缩文件的处理可以使用 gzip模块来进行

处理原始字节，固定的数据类型，bytes可变数据类型bytearray

struct模块，提供了格式化字符串，及一个或多个值为参数 

文本文件的写入，直接使用 open()方法打开文件

线程与进程
使用多进程模块subprocess模块
线程模块，threading
队列类，queue

网络，Python底层的sockect模块同时支持IPV4，IPV6

数据库程序设计，shelve模块提供了方便的DBM接口，使用(picklable)对象作为值
python package index, pypi.python.org/pypi中提供了大量数据库相关的包，比如sqlAlchemy(www.sqlalchemy.org)，以及DB2, informix, ingres, mysql, odbc, 以及opstgresql
SQL数据库
Python带有轻量级Sqlite数据库，缺少PostgreSQl这种数据库的功能，但是便于建立原型系统
为了数据库之间切换方便，在PEP249(Python Database API Specification v2.0)提供了成为DB-API 2.0的API规范

正则表达式，称为regexes; 使用Python中的re模块，来完成；主要用途
分析，识别并提取符合标准的文本；搜索，定位可以有不止一种形式的子字符串；字符串分割，按照匹配情况对字符串进行分割；验证，验证某些字符串是否满足一定的格式要求
正则表达式中大多数字符可以直接书写，对于特殊字符需要进行转义处理
特殊字符包括，\ . ^ $ ? {} [] () |
大多数标准字符串转义字符也可以使用在Python中，\n \t \xHH \uHH\ 
在正则表达式中 []表示人选; ^表示非;-表示起止 1-9;
?代表人一个字符，*代表任意多个字符
字符类速记
.可以匹配除换行符之外的任意字符
\d匹配一个unicode数字
\D匹配一个非Unicode数字 
\s匹配一个unicode空白
\S匹配一个非unicode空白
\w匹配一个unicode单词字符
\W匹配一个unicode非单词字符
量词
{m, n }表示字符出现的次数，m至少， n最多
也可以为量词取名字 

python三元运算， expression0 if condition else expression1

python docstring, if the first line of each code block is long string, then it will be parse as doc string
'''
explain
Args:
	...
Return:
	...
'''

The python shebang, shebang is the first line of each file start will #!, in linux it's specify does the file is execute table. It could also could be used to specify which python version of the py file is relative to 
#!/usr/bin/env python3
in micro linux need to use chmod command to add the script then the script could run directly

The module level codes is execute once on each module imported

platform-specify code
try: #window
	import msvcrt
	def getkey():
		return msvcrt.getch()
except ImportError:
	import sys #for linux or mac os
	import tty
	import termios

	def getkey():
		fd = sys.stdin.fileno()
		original_attributes = termios.tcgetattr(fd)
		try:
			tty.setraw(sys.stdin.fileno())
			ch = sys.stdin.read(1)
		finally:
			termios.tcsetattr(fd, termios.TCSADRAIN, original_attributes)
		return ch
		
python content manage library contentlib, which support several methods to help manage resource files, and support with statement

pdb module, is a debug module 
import pdb
pdb.set_trace()  #to start debug during python code execute

unitetest module, class inherite from unitetest.testCase
setUp method used to create test environment for each test function
tearDown method used to clean the test environment
unitetest.main() to automatic collect all the unite test 
test raise error with these code
with self.assertRaise(IOError):
	some_method()

virtual environment, python3.3 embedded this module at built-in, pyvenv
command line pyven
virtual env
use the virtual environment
pyven virtual_enviroment_name
virtual_environment_name/bin/activate #on window
source virtual_environment_name/bin/activate #on window #mac os or linux

packaging and distributing python package
distutils
create a package for custom module
- source
from distutils.core import setup
setup(
	name='module_name',
	version='1.0',
	py_modules=['module_contain_files_list'],
	
	#metadata
	author='...',
	author_email='...',
	description='...',
	license='...',
	keywords='...'
)
- package the module
python setup.py sdist --format zip
- install the module
python setup.py install



















