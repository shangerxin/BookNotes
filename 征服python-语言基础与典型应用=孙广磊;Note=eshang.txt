征服python-语言基础与典型应用=孙广磊;Note=eshang;State=Unfinished
:编辑器
>Vim, 由bram moolenaar编写的文本编辑器, http://www.vim.org, unix下经典的编辑器
>emacs, 号称世界上最强大的文本编辑器, http://ntemacs.sourceforge.net
>pythonwin, http://www.sourceforge.net/projects/pywin32
https://github.com/mhammond/pywin32/releases

:基本语法
>换行, \, (括号内语句视为一行)
>代码编码, #-*-coding:utf-8-*-
>数字类型
 -整数, 0NNN八进制, 0xNNNN十六
 -长整, NNNNL
 -浮点, N.N, Ne+N
 -复数, 虚部使用j表示
>运算符
**, *, /, %, +, -, |, ^, &, <<, >>
>字符串, 格式化
 -单个字符, %c
 -十进制整数, %d
 -八进制, %o
 -字符串, %s
 -十六进制, %x
 -十六进制字母大写, %X
>序列切片, [start:end:step]
>循环
while expression:
 ...
else:
 ...
>函数参数
 - *varName, 可变长度参数
 - 改变传入参数的值, 传入的参数必须是整数
 def ChangeValue(x):
  x[0] = x[0] + 1
 - lambda[parameters]:expression, 不能再lambda表达式中使用其他语句, 可以调用其他函数
>导入模块
 - import moduleName [as aliasName]
 - from moduleName import functionName
 - reload, 是在模块被修改的时候重新载入模块
 - 模块查找路径, sys.path中
 - 可以发布编译后的py文件, pyc, 来起到一定的保护脚本的作用
 - 也可以使用py_compile.py模块来手动编译脚本
 - dir(), 取得模块定义的所有内容
>模块包
 - __init__.py文件, 在包的内部起到设置__all__变量的作用, python首先使用目录名, 然后在使用模块名导入需要的模块
 
:正则表达式
>re
:面向对象
>类定义
class className(baseClass):
 def functionName(self):
  pass
>使用类
obj = className()
>私有成员, __name
>类的专有方法, 以两条下划线开始, 两条下划线结束的
__init__, __del__, __add__, __mul__, __cmp__, __repr__打印转换, __setitem__ 按照索引赋值, __getitem__按照索引获取, __len__, __call__函数调用
>python支持多重继承
>支持重载
 -运算符重载,只需要重写类专有的运算符相关方法即可
  
:异常与调试
>try语句
try:
 ...
except exceptionType:
 ...
except exceptionType, [exceptionType, data]:
 ...
else: //如果没有异常者运行
 ...
finally:
 ... //一定执行的语句
>异常类型
attributeError, eofError, indexError, ioError, importError, keyError, nameError, tabError, valueError, zeroDivisionError
>引发异常
raise exceptionName/className, additionalData
assert语句引发异常, 只在__debug__ = true的时候才有效
>自定义异常
class ExceptionType(Exception):
 ...
>可以使用pdb模块调试脚本
:python扩展
>python的API扩展
>VC为python编写扩展
 -VC6
  *单击tool|option
  *directories|show directories|include files, 选择python安装目录下的include目录
  *library files选择python安装目录的libs目录
 -vs 2005
  *工具|选项, 选择项目解决方案, 选择VC目录
  *选择显示一下内容的目录下拉列表的库文件, 添加python目录下的libs
 -选择创建动态链接库
 -选择输出文件名为*.pyd
 -选择category 下拉列表中的code generation|use run-time library下拉列表的multithread dll
 -实例代码
 #include <python.h>
 #include <windows.h>
 PyObject *show(PyObject *self, PyObject *args)
 {
  ...
  r  = MessageBox(hwd, message, title, MB_OK);
  return Py_BuildValue("i", r);
 }
 static PyMethodDef myextMethods[]=
 {
  {"show", show, METH_VARARGS, "show a messagebox"},
  {NULL, NULL}
 }
 PyMODINIT_FUNC initmyext()
 {
  PyObject *mod;
  mod = Py_InitModule("myext", myextMethods);
 }
 -使用扩展
 import myext
 myext.show(..)
 以上都是针对release版本的
>扩展格式
 -初始化函数, PyMODINIT_FUNC
  Py_InitModule(char *name, PyMethodDef *methods)
  name, 模块名
  methods, 方法列表
 -方法列表, PyMethodDef
 static PyMethodDef myextMethods[]=
 {
  //模块中的方法名, python扩展中的函数名, 函数调用方法, 以及方法描述
  {"show", show, METH_VARARGS, "show a messagebox"},
  //表示结束
  {NULL, NULL}
 };
 - 函数实现, 在python扩展中, 所python函数类型都应该定义为PyObject *类型
 PyObject *show(PyObject *self, PyObject *args)
 {
  ...
  PyArg_ParseTuple(args, "iss", ...)
  r  = MessageBox(hwd, message, title, MB_OK);
  return Py_BuildValue("i", r);
 }
 self, 只有在函数为python内置方法时才不为NULL.
 如果在函数方法列表中指定的函数调用方法为METH_VARARGS, 则在函数中使用PyArg_ParseTuple处理参数
 如果指定的方法为METH_VARARGS|METH_KEYWORDS, 则使用PyArg_ParseTupleAndKeywords处理函数
 int PyArg_ParseTuple(PyObject *args, const char *formart, ...)
 args, 传递的参数
 format参数类型描述
 -常见的参数类型格式
 格式化字符 C数据类型 python类型
 s   char *  string
 s#   char*, int string and len
 z   char*   string and nullable
 z#   char*, int string, len and nullable
 i   int
 l   long int
 c   char
 f   float
 d   double
 -同样可以使用MFC写python扩展
>C/C++中嵌入python
 -通过嵌入python可以代替动态链接库的接口
 -高层次嵌入python, 与c/c++无交互
 #include <python.h>
 int main()
 {
  Py_Initialize();       //初始化python解释器
  PyRun_SimpleString("print", 'hi, python');  //执行字符串
  Py_Finalize();        //结束python解释器
 }
 -较低层次嵌入python, 为脚本传递参数或者使用python返回值
  *数字与字符处啊处理, 使用函数对C数据格式进行转换
  PyObject* Py_BuildValue(const char *format,...)
  *列表
  PyObject* PyList_New(Py_ssize_t len)
  *元组
  PyObject* PyTuple_New(Pyssize_t len)
  *字典
 -释放资源
  Py_CLEAR(), Py_DECREF()
>语言粘合剂, SWIG, 几乎所有当前流行的语言, 能简单的将C/C++程序以扩展的形式添加到动态语言中
 -就是一种模板替换
 -定义输出的模块名
 %module name
 -定义输出的函数
 %inline%{
  extern int show(...);
 }
>混合系统接口, Boost.Python, 相当于STL的延续与扩充
 -Pyste, 是Boost.Python自带的代码生成器与SWIG类似, 对于源文件可以使用C++形式写
>连接python与C的桥梁, Pyrex
Pyrex将python从Pyrex代码生成一个C源文件
http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex
是一种更佳方便的写python的C扩展方法
:多线程编程
>线程基础
thread, threading模块
>线程类中的方法
 -join([timeout]), 如果一个线程或者函数的执行过程中调用另一个线程, 要等待这个线程完成后继续执行
 -isAlive(), 查看线程是否运行
 -getName(), 取得线程名
 -setDaemon(), 用于设置主线程是否启动的子线程完成后才结束
>线程同步
 -lock, rlock可以实现简单的线程同步, 这两个对象都有acquire和release方法
 import threading, time
 class my_thread(threading.Thread):
  def __init__(self, thread_name):
   threading.Threading.__init__(self, name = thread_name)
  def run(self):
   global x
   lock.acquire()
   for i in range(3):
    x = x + 1
   time.sleep(2)
   print(x)
   lock.release()
 lock = threading.RLock()
 tl = []
 for i in range(10):
  t = my_thread(str(i))
  tl.append(t)
 x = 0
 for i in tl:
  i.start
 - 使用队列保持线程同步, Queque, 要处理的数据放置在队列中
 import Queque
>线程通信
 - Event对象, 由线程设置的信号标志, 如果信号为真, 其他线程等待直到信号接触
  *set(), 方法设置标志位为真
  *isSet(), 判断
  *clear(), 清除
  *wait(), 只有在标志位真时才返回
 - 其实线程同步在一定程度上已经实现了线程间的通信
 import threading
 class mythread(threading.Thread)
  def __init__(self, thread_name):
   threading.Thread.__init__(self, name = thread_name)
  def run(self):
   global event
   if event.isSet():
    event.clear()
    event.wait()
    print self.getName
   else
    print(self.getName)
    event.set()
  event = threading.Event()
  event.set()
  tl = []
  for i in range(10):
   t = mythread(str(i))
   tl.append(t)
  for i in tl:
   i.start()
>Stackless python, 是python的一个增强版本, 提供了轻量级的线程
 - 下载地址, http://www.stackless.com
 - tasklet模块, 完成创建线程的工作
 - schedule模块, 控制人物顺序
 - channel, 用于线程通信
 
:系统编程
>访问window注册表
 -导入模块, win32api, win32con
  win32api.RegOpenKey(...)
>文件操作, os
>py2exe生成可执行文件
 -下载地址http://www.py2exe.org
 -编译目标py文件的脚本例子
 import distutils
 import py2exe
 distutils.core.setup(windows=['aimPyFile.py'])
>运行其他程序
 -os.system
 -win32api.shellExecute()
 -win32process.CreateProcess()运行其他程序
 -ctypes调用kernel32.dll中的函数
  *提供了调用动态链接库中的函数
  *定义了C中的基本数据类型, 实现结构体与联合体
  *基本实现了跨平台
  *例子
  from ctypes import *
  user32 = windll.LoadLibrary('user32.dll')
  user32.MessageBoxA(....)
  *C结构体的对应
  typedef struct PROCESS
  {
   HANNDLE hProcess;
   DWORD hThread;
  }
  python 中
  class PROCESS
   _field = [
      ('hProcess', c_void_p),
      ('dwProcessId', c_ulong)
      ]
  函数中需要向结构体赋值, 可以使用byref, 等于C中的&
  *设置一位的值\xNN
:使用pythonwin编写windows, GUI
>使用win32gui模块
 import win32gui, win32con
 def WndProc(hwnd, msg, wParam, lParam):
  if msg == WM_PAINT:
   hdc, ps = win32gui.BeginPaint(hwnd)
   rect = win32gui.GetClientRect(hwnd)
   win32gui.DrawText(
        hdc,
        'GUI Exp',
        len('GUI Exp'),
        rect,
        DT_SINGLELINE|DT_CENTER|DT_VCENTER
        )
   win32gui.EndPaint(hwnd, ps)
   if msg == WM_DESTROY:
    win32gui.PostQuitMessage(0)
   return win32gui.DefWindowProc(hwnd, msg, wParam, lParam)
 wc = win32gui.WNDCLASS()
 wc.hbrBackground = COLOR_BTNFACE + 1
 wc.hCursor = win32gui.LoadCursor(0, IDC_ARROW)
 wc.hIcon = win32gui.LoadIcon(0, IDI_APPLICATION)
 wc.lpszClassName = 'test'
 wc.lpfnWndProc = WndProc
 reg = win32.RegisterClass(wc)
 hwnd = win32gui.CreateWindow(
         reg, 
         'Python', 
         WS_OVERLAPPEDWINDOW,
         CW_USEDDEFAULT,
         CW_USEDDEFAULT,
         CW_USEDEFAULT,
         CW_USEDEFAULT,
         0,0,0, None
        )
 win32gui.ShowWindow(hwnd, SW_SHOWNORMAL)
 win32gui.UpdateWindow(hwnd)
>使用MFC, 使用模块pywin, win32ui, win32con
 import win32gui, win32api, pywin.mfc
 class MyWnd(window.Wnd):
  def __init__(self):
   window.Wnd.__init__(self, win32ui.CreateWnd())
   self.__obj__.CreateWindowEx(...)
  def OnClose(self):
   ...
  def OnPaint(self):
   ...
 w = MyWin()
 w.ShowWindow()
 w.UpdateWindow()
 w.RunModalLoop(1)
>使用DLL中的资源
 - win32ui.LoadDialogResource, 可以载入DLL文件中的资源
   
:使用Tkinter编写gui
>创建窗口
import Tkinter
root = Tkinter.Tk()
label = Tkinter.Label(root, text="Hello world")
label.pack()
button = Tkinter.Button(root, text="OK")
button.pack(side=Tkinter.LEFT)
root.mainloop()
>Tkinter具有的核心组件
Button, Canvas, Checkbutton, Entry, Frame, Label, Listbox, Menu, Menubutton, Message类似于label但是支持文本换行, Radiobutton, Scale滑块, Scrollbar, Text多行文本框, Toplevel用于创建子窗口组件
>使用bind方法来定义事件
root.bind('aim_base_on_Tinter_doc', function)
bind_class, 绑定类
bind_all, 将所有组件事件绑定到函数上
>响应函数格式
def functionName(event):
 ...
>创建对话框, tkMessageBox模块
 -askokcancel, 对话框
 -askquestion
 -showerror
 -showinfo
 -showwarning
 -标准对话框, tkSimpleDialog模块, tkFileDialog, tkColorChooser
>使用wxPython编写GUI, 是对wxWidgets的封装, 类似于MFC, 具有良好的可移植性与跨平台性
 - 提供XReCed编辑器, 用来编辑资源, 减少代码量
 - 例子
 import wx
 class my_app(wx.App):
  def OnInit(self):
   frame = wx.Frame(parent = None, title='helle world')
   frame.show()
   return True
 app = my_app()
 app.MainLoop()
 - 组件
 wx.Frame, wx.Panel, wx.Button, wx.TextCtrl, wx.RadioButton, wx.CheckBox
 - 绑定事件
 Bind(event, handler, source, id, id2)
  * id, 使用组件id代替事件源
  * id2, 用于指定多个组件
 - 事件响应函数
 def OnEvent(self, event):
  pass
 - 布局, sizer
 GridSizer, wx.FlexGridSizer 根据组件大小改变大小, GridBagSizer任意布置组件, BoxSizer水平或者垂直方向, StaticBoxSizer带有边框与标题的sizer
 - 消息
  * wx.MessageBox
  * 标准对话框
  wx.GetTextFromUser, wx.GetPasswordFromUser(), wx.GetNumberFromUser(), wx.FileDialog, wx.FontDialog, wx.ColourDialog
 - 对话框, wx.Dialog
 - 菜单
  * wx.MenuBar()
  * 弹出式菜单, wx.some_container.PopupMenu(menuObj)
 - 资源文件, 使用xml语法, 后缀名.xrc, 使用资源编辑器XRCed
 <?xml version="1.0" encoding="cp936"?>
 <resource>
  <object class="wxFrame" name="frame">
   <object class="wxPanel" name="panel">
   </object>
  </object>
 </resource>
 - 使用资源, wx.xrc模块下的方法
  wx.App.res = xrc.XmlResource('xrc_file_path')
  xrc.XRCCTRL(save_obj, 'ctrl_name_in_xrc_file')
:使用pyGTK编写GUI
>GTK主要使用在linux;平台下
>使用Glade创建资源
>使用组件的connect方法连接事件
:使用PyQt编写GUI
>对于非商业用途可以免费使用
>windows下使用PyQt比较复杂
>Qt官方网站
http://www.trolltech.com/developer/downloads/qt/windows
>windows下Qt需要MingW的支持
http://www.mingw.org
>使用PyQt4
import sys
from PyQt4 import QtCore, QtGui
class my_window(QtGui.QMainWindow):
 def __init__(self):
  QtGui.QMainWindow.__init__(self)
  self.setWindowTitle('pyqt')
  self.resize(300,200)
app = QtGui.QApplication(sys.argv)
mywindow = my_window()
mywindow.show()
app.exec_()
>Qt中的组件使用信息插槽方式通信, 组件使用connect将组件信号绑定到处理插槽上
connect(QObject, SIGNAL(), SLOT(), Qt.ConnectionType)
 - QObject, 发出信号的组件
 - SIGNAL, 组件所发送的信号, 事件类型
 - SLOT, 插槽函数, 即回调函数
 - Qt.ConnectionType, 可选参数, 连接类型
>资源文件, .ui文件, 使用QtDesigner创建资源文件
>使用资源文件
uic模块中
import PyQt4.uic
...
uic.loadUi('resource_file.ui', QtContainerObject)

:数据库
> ODBC
 - 创建数据库, 如access, sql server等
 - 创建数据源, 控制面板|管理工具|数据源(ODBC)
 - 使用python的odbc模块访问数据库
> DAO连接数据库, ADO连接数据库
 - 使用win32com模块来调用DAO的com
> 连接MySql
 - 使用MySqldb模块
> 连接SQLite

:python web应用
>Zope, 开源的web服务器, 主要是使用python编写, 可以实现多种脚本的功能
 - http://www.zope.org
 - 安装后, http://127.0.0.1:8080/manage进行管理
 - DTML, document template markup language, ZPT, 是zope的模板语言
 - 可以在页面中添加python脚本, 但是不能使用open函数, range不能产生大循环等
 - Plone是zope的内容管理器
>IIS中使用python
 - 添加可执行文件目录到python可执行文件目录
 - asp中包含python, 第一行为<%@language=python%>
 - 之后其中可以使用response等内置变量
 - 如果使用py文件取代.asp文件则要输出HTTP状态码
 import os
 def HttpStatus():
  print()
  print('status: 200 ok')
  print('content-type: text/html')
  print()
 HttpStatus()
 print('''
   <html>...</html>
    ''')
 - python的cgi包, 编写cgi
>Apache中使用python
 - http://www.apache.org
 - 安装mod_python, 是apache支持python脚本的模块, 是的在apache中可以使用psp(python server page)或者使用python编写cgi
 - configure apache server编辑 configuration file
 - apache载入mold_python
 loadModule python_module modules/mod_python.so
 - python脚本
 from mod_python import apache
 def handler(req):
  req.content_type = 'text/html'
  req.write('''
     <html>...</html>
      ''')
 - 可以连接mysql, 然后设置mysql字符集为gbk
 
:python网路编程
>python中的socket实现了BSD, berkeley software distribution套接字标准
 - 常见的网络协议
 TCP/IP, NetBIOS, FTP, Telent, HTTP, PPP, PPPoE
>socket模块,客户端与服务器建立socket连接, 之后就可以使用socket通信
 - socket(family, type, proto)
  * family, 地址系列, 可选参数, 默认为AF_INET, 也可以是AF_INET6, AF_UNIX
  * type, socket类型, 可选, 默认为SOCK_STREAM
  * proto, 协议类型, 可选
   sk = socket(...)
   sk.bind(address)
   sk.listen(backlog) 
  * backlog, 指连接队列数
   sk.connect(address) #都可以连接到目标服务器, 但是一个失败会引发异常
   sk.connect_ex(address)
   sk.recv(bufsize, flags)  #recvfrom不仅返回接收的字符串而且返回地址
   sk.recvfrom(bufsize, flags)
   sk.send(string, flags)  #向已连接的socket发送数据, 不同的是sendall将一直发送完全部数据
   sk.sendal(string, flags)
   sk.sendto(string, flags, address) #向未连接的socket发送数据
   sk.makefile(mode, bufsize) #可以将socket关联到文件上
 - 可以建立socket信息发送, 文件发送服务端与客户端
 - 用于底层网络连接处理
> 常用协议编程
 - HTTP, 使用httplib, urllib
 - FTP, ftplib
 - URL处理, urllib
 打开指定url, 
 urlopen(url, data, proxies), 返回类似于file的stream对象, 可以read, readline, close
 urlretrieve(url, filename, reporthook, data), 读取的内容直接保存为文件
  * url
  * filename
  * reporthook, 回调函数
  * data, 发送的数据, 一般用于post
 urlencode(query, doseq)
  * query, 由要编码的值组成的字典
  * doseq, 可选, true编码为"变量=值"的形式
 urllib.quote(string, safe), 可以替换特殊字符
 urllib.quote_plus(string, safe)
 urllib.unquote(string)
 urllib.unquote_plus
 - httplib, 模块, 提供了HTTPConnection, HTTPResponse对象
 创建connection之后就可以向服务器发送request请求
 request(method, url, body, headers)
  * method, GET/POST
  * url
  * body, 发送的数据
  * headers, 发送的http头
 还可以使用
 putrequest(request, selector, skip_host, skip_accept_encoding), 
  * selector,  目标url
 putheader(header, argument, ...)
 endheaders()
 send(data)
 - poplib, 发送pop3协议, 个人计算机连接邮件服务器, 用于接收邮件
 - smtplib, 发送邮件
 - 连接Gtalk, 是基于XMPP(Extensible messaging and presence protocol)开放协议的即时工具
  * 模块XMPPY
  * dnspython
 
:处理HTML与XML
>处理HTML使用HTMLParser模块
 - feed(data), 向HTMLParser传递数据
 - handle_starttag(tag, attrs), 每次解析遇到开始的标签都会调用
 - handle_startendtag(tag, attrs)
 - handle_comment(data), 遇到注释时调用
 - htmllib模块中也提供了简单的解析html的功能
  * re.compile()函数
>处理XML
 - XML声明, 包含三部分
  * version
  * encoding, 编码
  * standalone, 是否独立
 - 根元素
 - 属性
 - 字符数据
 - CDATA块
 - 注释 <!-- -->, 内容中不允许--
 - 处理指令, <? ... ?>
 - 文档类型, DTD, document type definition, 可以使用xml文档头, 也可直接包含在文件中
 - 命名空间 用 : 分割
 - 处理模块, xml.dom, xml.parsers.expat, xml.sax 将分析器和处理器分离
 - 例子
  RSS阅读器, RSS站点直接返回格式化好的XML文件, 可以用任何语言进行处理
  
:数据结构域算法
:科学计算NumPy和SciPy, 开源软件Scilab和商业软件matlab都以科学计算为主
>SciPy依赖于NumPy
>Matplotlib绘图
:python多媒体编程
>PyOpenGL
>使用directSound, 用win32com模块调用播放声音
>PyGame编写游戏
:使用PIL处理图片
>包含图片计算,颜色,抓取等
 




















 
 
 
 
 

 
