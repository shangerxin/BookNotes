Groovy in Action, second Edition=Dierk;Note=Erxin

# Brief Table of Contents 
- author, DIERK KÖNIG has worked for over 20 years as a professional software developer, architect, trainer, and consultant. 

blog regularly at http://hamletdarcy.blogspot.com

# The Groovy language 
- nothing provides a better combination of         Java friendliness and a complete feature set

 Groovy is Java with an additional JAR file as a dependency.
 
Groovy Code | Java Code 
==========================
Java Run Time 

very Groovy type is a subtype of java.lang.Object. 

new MyGroovyClass(); // create a groovy class from Java 

import java.util.*;       // Java
Date today = new Date();  // Java]
today = new Date()        // Groovy

Java standard classes (known as the Groovy Development Kit, or GDK)
 
def number = 0
new File('data.txt').eachLine { line ->    number++    println "$number: $line"}
 
property access to a list 
println( [String, List, File]*.package*.name )

def customers = new XmlSlurper().parse(new File('customers.xml'))
for (customer in customers.corporate.customer) {    
    println "${customer.@name} works for ${customer.@company}"
}

- top 20 of the TIOBE (www.tiobe.com) index

- react or interact harmoniously.” (http://dict.leo.org).

- Java 8 improves on this somewhat, thanks to the introduction of lambdas

- live play ground, You can execute Groovy code—and most examples in this book—even without installing anything! Point your browser to http://groovyconsole.appspot.com/.

- commands to execute groovy 
groovy 
groovysh, groovy command line shell 
groovyConsole, interface used to execute groovy code 

groovysh (UNIX) or groovysh.bat (Windows) from the command line. 
 
groovyConsole is a Swing interface that acts as a minimal Groovy development editor

- compiling and running groovy. compiling it to Java bytecode and running it as regular Java application code within a JVM, called precompiled         mode
 
Compiling Groovy is straightforward because it comes with a compiler called groovyc.

$ java –cp %GROOVY_HOME%/embeddable/groovy-all-2.4.0.jar;


# Simple Groovy Data Types
- For each primitive type, Java has a wrapper type—a reference type that stores a value of the primitive type in an object. The wrapper for int, for example, is java.lang.Integer.

java's primitive datatypes and their wrappers 
byte    java.lang.Byte 
short   java.lang.Short
int     java.lang.Integer 
long    java.lang.Long 
float   java.lang.Float 
double  java.lang.Double 
char    java.lang.Character 
boolean java.lang.Boolean


numberic in groovy 
java.lang.Integer[a]               15, 0x1234ffff, 0b00110011, 100_000_000
java.lang.Long               100L, 200l[b
java.lang.Float               1.23f, 4.56F
java.lang.Double               1.23d, 4.56D
java.math.BigInteger               123g, 456G
ava.math.BigDecimal               1.23, 4.56, 1.4E4, 2.8e4, 1.23g, 1.23G

The def keyword is used to indicate that no particular type is specified.
def a = 1               java.lang.Integer               Implicit typing
String f = '1'               java.lang.String

Groovy uses type markers to enforce the Java type system at runtime.

import java.awt.*

Point topLeft = new Point(0, 0) // classic
Point botRight = [100, 100] // List cast
Point center = [x:50, y:50] // Map cast

assert botRight instanceof Point
assert center instanceof Point

def rect = new Rectangle()
rect.location = [0, 0] // Point
rect.size = [width:100, height:100] // Dimension

- base operators 
a + b 
a - b 
a * b 
a / b 
a / b 
a % b 
a++ ++a 
a--  --a 
-a 
+a
a ** b, power
a & b, numerical and 
a ^ b, numerical xor 
~a bitwise complement 
a[b], subscript 
a[b] = c, subscript assignment 
a << b, left shift 
b >> b, right shift 
a >>> b, right shift unsigned 
switch(a){
    case b: 
}

a in b 
a == b 
a != b 
a <=> b, spaceship, a.compareTo(b)
a > b, greater than 
a >= b 
a < b 
a <= b 
a as type, enforced coercion 

- override operators 
@Immutable 
class Money {
    int amount 
    String currency 
    
    Mony plus (Money other){
        if( null == other ) return this 
        if (other.currency != currency ){
            throw new IllegalArgumentException("...")
        }
        return new Money(amount + other.amount, currency )
    }
}

Money buck = new Money(1, 'USD')
assert buck 
assert buck 
assert buck + buck  == new Money(2, 'USD')

- groovy string 
'hello' 
"hello $name", support placeholder resolved 
'''--- xxx---'''
""".....xxx..."""
/xxx/, support placeholder resolved. this is particularly useful with regular expressions, as you’ll see later
$/xxxx/$, support placeholde resolved, Only Unicode characters are escaped with a backslash

    + escape special character 
\b 
\t 
\r 
\n 
\f 
\\
\$
\uabcd, unicode 
\abcd, unicode 
\'
\"

    + working with GString, GStrings are like strings with additional capabilities

- from java to groovy 
System.out.print("Hello Groovy!");

print('Hello Groovy!');

print 'Hello Groovy!'

String greeting = 'Hello Groovy!'

assert greeting.startsWith('Hello')

assert greeting.getAt(0) == 'H'
assert greeting[0] == 'H'

assert greeting.indexOf('Groovy') >= 0
assert greeting.contains('Groovy')

assert greeting[6..11] == 'Groovy'
assert 'Hi' + greeting - 'Hello' == 'Hi Groovy!'

assert greeting.count('o') == 3

assert 'x'.padLeft(3)      == '  x'
assert 'x'.padRight(3,'_') == 'x__'
assert 'x'.center(3)       == ' x '
assert 'x' * 3             == 'xxx'

- regex 
The regex find operator, =~
The regex match operator, ==~
The regex pattern operator, ~string

    + regex symbols 
.	Any character
^	Start of line (or start of document, when in single-line mode)
$	End of line (or end of document, when in single-line mode)
\d	Digit character
\D	Any character except digits
\s	Whitespace character
\S	Any character except whitespace
\w	Word character
\W	Any character except word characters
\b	Word boundary
()	Grouping
( x | y )	x or y, as in (Groovy|Java|Ruby)
\1	Backmatch to group one; for example, find doubled characters with (.)\1
x *	Zero or more occurrences of x
x +	One or more occurrences of x
x ?	Zero or one occurrence of x
x { m , n }	At least m and at most n occurrences of x
x { m }	Exactly m occurrences of x
[a-f]	Character class containing the characters a, b, c, d, e, f
[^a]	Character class containing any character except a
(?is:x)	Switches mode when evaluating x; i turns on ignoreCase, s means single-line mode


String.eachMatch(Pattern) , or use Matcher.each()

- cast string to number 
assert '2.718'.isNumber()        // String methods
assert 5 == '5'.toInteger()
assert 5 == '5' as Integer
assert 53 == (int) '5'           // gotcha!
assert '6 times' == 6 + ' times' // Number + String

- pattern for classification 

def fourLetters = ~/\w{4}/

assert fourLetters.isCase('work')

assert 'love' in fourLetters

switch('beer'){
    case fourLetters: assert true; break
    default         : assert false
}

beasts = ['bear','wolf','tiger','regex']

assert beasts.grep(fourLetters) == ['bear','wolf']



# Collective Groovy datatypes 
- specify range 
left..right
(left..right)
(left..<right)

(5..9).each { element -> 
    result += element 
}

5 in 0..10 
(0..10).isCase(5)

switch(age){
    case 16..20: a = 1;break 
    case 21..50: a = 2;break 
    defualt: throw new Exception()
}

- range is object 

- custom ranges weekdays 

class Weekday implements Comparable {
    static final DAYS = ['sun', 'mon'...]
    private int index = 0 
    Weekday(String day){
        index = DAYS.indexOf(day)
    }
    Weekday next(){
        return new Weekday(DAYS[(index + 1) % DAYS.size()])
    }
    Weekday previous(){
        return new Weekday(DAYS[index - 1])
    }
    int compareTo(Object other){
        return this.index <=> other.index 
    }
    String toString(){
        return DAYS[index]
    }
}

def mon = new Weekyday('Mon')

- list 

alist = [item0,item1,item2】
alist[0..2] = alist 

alist[1] = [] //remove element 
alist[1..1] = [0,1,2] //add element to [item0, 0, 1, 2, item2]

support negative 

alist += 'element'
alist * 2 
alist - blist

    + processing a lists of urls 
    
def urls = [....]

urls.findAll{ it.port < 99}
.collect{it.file.toUpperCase()}
.sort()
.join(',') == 'index.html'

- maps [key:value, ...]
def amap = [:]
amap.size() == 0 

amap.each{entry -> 
    store += entry.key 
    store += entry.value 
} 

 structural change is one that adds an entry, removes an entry, or changes the sequence of entries when the collection is sequence-aware.

- concurrent modifications 

def list = [1, 2, 3, 4]
list.each{ list.remove(0) }
// throws ConcurrentModificationException !!

The convention in Groovy is that any method that implements an arithmetic operator (plus, minus, multiply, divide) doesn’t modify the receiver but returns a copy.


# Working with closures 
- a closure object. It’s just an object. Groovy provides a very easy way of creating closure objects and enables some very smart behavior.

- iterator 

// Groovy object iteration
list.each { item -> /* do something with item */ }

// Groovy closures with Java 8
list.stream().forEach { println it}

- handling resource with a protocol
    + a common java approach use inner classes                     

resourceHandler.handle { resource -> resource.doSomething() }

    + use template method pattern 
    
log = ''
(1..10).each{ counter -> log += counter }
assert log == '12345678910'

log = ''
(1..10).each{ log += it }
assert log == '12345678910'

- return statement 

def Closure getPrinter() {
    return { line -> println line }
}

- calling a closure 

def adder = { x, y -> return x+y }

assert adder(4, 3) == 7
assert adder.call(2, 6) == 8



# Around the Groovy library 

# Applied Groovy 

# Appendix 
- installation 
- language information 
- GDK API quick reference 
- Cheet sheets 
- Annotation parameters 
- Compiler phases 
- AST visistors 
- Type checking extensions 
- Facets of Groovy 