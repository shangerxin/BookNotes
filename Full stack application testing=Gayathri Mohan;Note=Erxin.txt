Full stack application testing=Gayathri Mohan;Note=Erxin


# Introduction 
- full stack testing 

ui layer, test for functional, visual, frontend performance, accessbility, security, and other application specific cfr testing 

services layer, test for functional, backend performance, security, reliability and other application specific cfr testing

database, test for functional, security, data integrity, reliability and other application specific cfr testing 

- Shift-Left Testing

requirements > design > code > test > release 

- quality checks shifted left 

	+ before development
three amigos process 
story kick off 
iteration planning meeting 
ux and ba design 

	+ during develoment 
	
unit tests, linters, ui driven tests 
run on local 
run on ci 
dev box testing 

- 10 full stack stesting skills 

mobile testing 
manual exploratory testing 
automated functional testing 
continuous testing ci/cd 
data testing 
cfr testing, cross-functional requirements (CFRs)
visual testing 
security testing 
performance testing 
accessbility testing 


# Manual exploratory 
- feature or functionality 
- user flow 
- test case 
- edge case 
- building blocks 
equivalence class partitioning 
boundary value analysis 
state transition where the application’s behavior changes based on the history of inputs
decision table 
cause effect graphing 
pairwise testing Pairwise testing, also known as all-pairs testing, is a framework that assists in condensing the test cases to a minimum when multiple such independent variables/inputs drive the outcomes.
- sampling, usually using one of the following techniques: random sampling or criteria-specific sampling.
- error guessing method 
- exploring a functionality 
- cross functional 

security 
privacy 
authentication/authorization 

- api testing 
ecommerce ui 
auth service 
customer service 
order service 
centralized database 

- Postman

Postman is a common tool for API testing.
https://www.postman.com/

- WireMock is a tool for creating and altering stubs, which are software components that emulate another component’s behaviors. 
http://wiremock.org/

WireMock JAR from the official website.

Open the terminal and run the following command with the JAR version that you downloaded:

$ java -jar wiremock-jre8-standalone-x.x.x.jar

POST request to hit the http://localhost:8080/makePayment URL

- Bug Magnet is a browser plug-in available for Chrome and Firefox that enables testing edge cases in an application.

https://bugmagnet.org/

Bug Magnet, there are also several exploratory testing heuristics cheat sheets that you can use to ensure that you are not missing test cases

- Chrome DevTools is as versatile as a Swiss army knife. It comes with a multitude of provisions that assist in exploratory testing, security testing, performance testing, and more.

- perspectives test environment hygiene 

Deployment hygiene

Once the team has its own dedicated environment, a suitable approach is to have a manual trigger for new deployments instead of automated deployments



# Automated functional testing 
- unit tests 
junit, nunit, jest, mochajs, jasmine 

- integration tests 
junit, nunit, jest 

- contract tests 
pact, postman 

- service tests 
RESTAssured, karate 

- ui functional tests, end to end tests 
selenium, cypress restassured 
https://www.selenium.dev/projects/

- TestNG is a testing framework, also referred to as a test runner. 
- JavaScript–Cypress Framework, Cypress is bundled with all the tools necessary to write end-to-end UI automation tests, so you don’t need to set up additional tools like TestNG, Cucumber
https://www.cypress.io/

- REST Assured is the go-to Java library for performing automated testing of REST APIs
https://rest-assured.io/

- JUnit is a very popular unit testing framework created by Kent Beck and Erich Gamma in 1997
https://junit.org/junit5/

- Pact is a popular tool for creating contract tests in Java.
https://docs.pact.io/

- Karate grabs attention mainly because of its unique way of aiding service test creation. It offers predefined Gherkin statements (similar to Cucumber) to write tests, eliminating the need to code

- AI/ML leaping to assist with test authoring is a significant milestone in the testing space

like test.ai and Functionize. 
https://test.ai/
https://www.functionize.com/test-maintenance

- ReportPortal, an open source test report analysis tool, could have come in handy to them!
https://reportportal.io/

- test governance 

Proper test coverage in the appropriate application layers is a pertinent issue for all teams

- anti pattern, This is referred to as the ice cream cone antipattern

https://www.thoughtworks.com/insights/blog/introducing-software-testing-cupcake-anti-pattern

- it looks like a cupcake. This kind of disorganization generally happens when you have siloed teams of developers and automated testers

However, high code coverage doesn’t necessarily indicate that all the test cases are automated.



# Continious testing 
- Martin Fowler, author of a half dozen books including Refactoring: Improving the Design of Existing Code (Addison Wesley) and Chief Scientist at Thoughtworks
- The CI/CT process relies on four individual components The version control system (VCS)

- The automated functional and cross-functional tests that validate the application

The CI server, which automatically executes the automated tests against the latest version of the application 

- principles 
Always commit self-tested code
	 
Adhere to the Continuous Integration Certification Test

Do not ignore/comment out the failing tests


# Data testing
- read, update, or delete existing data as required by the functionality (these four core operations are commonly referred to by the acronym CRUD).  
- caches, A cache is an in-memory data store where data is persisted as key/value pairs. Storing data in memory boosts performance by several orders of magnitude, as the application doesn’t have to make calls to a heavyweight backend storage system such as a traditional relational database.
- A batch job (or several batch jobs) can be written to read the records one by one from different files, extract the right information, and transform it into database records.
- An event, in its literal sense, refers to an action, while a stream represents an entity that is flowing, or, in other words, continuous in nature

Google Cloud Pub/Sub and RabbitMQ, delete each event after all its intended subscribers have consumed it. In other systems, like Apache Kafka

- Designing Data-Intensive Applications
- sql 
- JDBC stands for Java Database Connectivity. 
- Zerocode is an open source tool that enables writing declarative-style automated tests for REST APIs, SOAP APIs, and Kafka systems. 
- use the Testcontainers tool, which provides containerized throwaway database instances.




# Visual testing 
- a research study in 2012 found that changes in up to a fifth of an image’s area can regularly go unnoticed by human viewers
- Snapshot tests are intended to verify the structural aspects of individual components and component groups, contributing directly to visual testing at a micro level.
- cross browser testing 

tables at CanIUse https://caniuse.com/ciu/comparison
eslint-plugin-caniuse plug-in helps by pointing out unsupported scripting features for your target browsers.

- accessiblity testing, and as a result, frontend code should be designed according to WCAG 2.0 requirements. https://oreil.ly/TRxmX

- BackstopJS is a popular visual testing tool with an active open source community supporting it. It comes as a Node library that is easy to integrate with CI and adopts a configuration style to write tests

I can see a third image highlighting the differences between the two. Figure 6-4 shows all three screenshots. You can see the differences highlighted in the bottom half of the third image

- cypress 

- Applitools Eyes, an AI-Powered Tool
https://applitools.com/
https://applitools.com/docs/topics/overview/overview-system-overview.html

AI has penetrated the visual testing space, using computer vision and deep learning technologies. Computer vision is a branch of AI that enables computers to view digital media content like images and videos

https://oreil.ly/n1hc8

- Storybook is an open source tool that assists in UI development that is quite popular (~70K GitHub stars) in the frontend development 
https://storybook.js.org/



# Security testing 
- security 
brute force 
social engineering 
phishing 
cross-site scripting 
ransomware 
cookie forging 
cryptojacking, Cryptojacking has become a widespread attack these days. It is the activity of secretly mining cryptocurrencies using other people’s devices without their authorization. 
spoofed identify 
tampering inputs 
repudiation of actions 
information disclosure 
denail of service 
escalation of privileges 
sql injection 
botnets 
viruses, trojan horses 
ransomeware 
intellectual property theft 
shourder surfing 
man in the middle 
...
- the STRIDE thread model  

- OWASP Dependency-Check and DAST using OWASP ZAP
OWASP Zed Attack Proxy (ZAP) is an open source tool that does DAST on a deployed application

- The Snyk JetBrains IDE plug-in combines both SCA and SAST capabilities.


# Performance testing 
- Google aims for a load time of under a half-second, and it recommends 2 seconds as the maximum for acceptable website performance

- factors affecting aplication performance 
architecture design 
choice of tech stack 
code complexity 
database choice and design 
network latency 
geolocation of the application and users 
infrastructure 
third party integrations 

- types of performance tests 

load/volumn tests, validate that the application can serve the expected volume of users in an acceptable time.

stress tests, perform within acceptable limits for X users, but beyond X users it starts to respond with delays

soak tests, keep the application under a constant volume of load for an extended period and observe the behavior are called soak tests.

- types of load patterns 

Steady ramp-up pattern

Step ramp-up pattern

Peak-rest pattern

- performance testing steps 

define the target KPIs

Define the test cases

Prepare the performance testing environment

Prepare the test data

Integrate APM tools

The next step is to integrate application performance monitoring (APM) tools (e.g., New Relic, Dynatrace, Datadog)

Script and run the performance tests using tools The last step is to script the performance test cases using tools and run them against the performance testing environment. 

While planning, also include time and capacity to collect test run reports, debug and fix performance issues

- jmeter 
https://jmeter.apache.org/

open the JMeter GUI, run the shell script jmeter.sh inside the folder /apache-JMeter-version/bin from your terminal.

HTTP Request sampler to configure the API’s parameters. Right-click the thread group you just added in the left pane and select Add → Sampler → HTTP Request. 

- Ultimate Thread Group. To validate hourly throughput, use the Parallel Controller plug-in to run multiple HTTP requests in parallel while pausing between requests using Timer components

- There are many more components in JMeter to help model application-specific use cases

In the HTTP request body of the /addBook endpoint, use the variables as ${vari⁠able​_name}

- integrating into ci 

$ jmeter -n -t <library.jmx> -l <log file> -e -o <Path to output folder>

- Gatling provides a Scala-based DSL to configure the load pattern. It’s an open source tool with the option to record user flows
https://gatling.io/docs/

- apache benchmark 

https://httpd.apache.org/docs/2.4/programs/ab.html

If you just want to quickly get some numbers on your application’s performance, ab is a great choice

- frontend performance testing building blocks 

HTML code, which is the barebones structure of the website

CSS code, which styles the page

Scripts to create logic on the page

- factors affecting frontend performance 

	+ frontend code complexity 
	+ content delivery networks, cdns 
	+ nds lookups 
	+ network latency 
	+ browser caching 
	+ data transfers 
	
- The RAIL model is a way to structure the thought process around frontend performance.

Response, Animation, Idle, Load (RAIL)

- Frontend performance metrics 

first contentful paint 
time to interactive 
largest contentful paint 
cumulative layout shift 
first input delay 
max potential first input delay 

Google classifies the largest contentful paint, first input delay, and cumulative layout shift as the core web vitals to help the business folks understand a site’s performance in simple terms
https://www.smashingmagazine.com/2015/10/rail-user-centric-model-performance/

https://web.dev/articles/user-centric-performance-metrics

distinct interactions:
waiting for the page to load,
watching an animation,
scrolling the page,
tapping an icon,
watching the navigation animate open,
waiting for the page to load,
watching an animation,
scrolling the page.

- Web Vitals is a Google initiative to provide unified guidance for web page quality signals that are essential to delivering a great user experience on the web.
https://web.dev/articles/vitals

- WebPageTest is a free online tool for assessing a website’s frontend performance. It’s a powerful too

giving us a clue about avenues for further optimization.
https://www.webpagetest.org/

- Lighthouse comes as part of Google Chrome, and it is also available as a Firefox extension.

- Chrome devtools 
Another handy tool for frontend performance debugging is the performance profiler available on the Performance tab in Chrome DevTools

- Page speed insight 




# Accessibility testing 
- coined by the W3C’s Web Accessibility Initiative (WAI) https://www.w3.org/TR/wai-aria-1.1/

Authoring Tool Accessibility Guidelines (ATAG) establishes the standards for content authoring tools such as HTML editors.

Web Content Accessibility Guidelines (WCAG) defines web content standards and is the one we should pay attention to during development.

User Agent Accessibility Guidelines (UAAG) addresses standards for web browsers and media players

- Google Chrome provides a browser-based screen reader as an extension. Try it out! There are also demo websites like the example booking site in Figure 9-2 t

- WCAG 2.0: Guiding Principles and Levels

Level A

    This is the minimum level of conformance, providing essential support without which the site is inaccessible

Level AA

    This encompasses all the Level A requirements plus additional stricter requirements, such as constrained color contrast ratios across the site
	
Level AAA

    This level subsumes all the requirements from the previous two levels and calls for additional enhanced requirements to make the web truly accessible for all users.
	
https://oreil.ly/k4cAv

- WCAG 2.0 elaborates this principle with detailed requirements for us to begin with, as follows:

All non-text content, like images, should have alternate text that describes it to enable visually challenged users to understand the content using screen readers.

Audio or video content should have text transcripts and captions (synchronized with the media) as alternatives, with provisions to pause, stop, and control the volume.

Any audio that starts playing automatically on page load should have audio control mechanisms like pause, replay, and volume controls.

The web page’s information and structure should be designed to have a hierarchy, such as a page title above all headings, appropriate page title and heading tags, and so on. This helps users with screen readers to have a meaningful flow.

Instructions to navigate the website should not solely rely on sensory characteristics of components such as shape, color, size, visual location, orientation, or sound. For example, avoid an instruction that says “wait until the button turns green” or “wait until you hear a beep.”

Colors should not be the only way to indicate an action, prompt for a response, or distinguish elements on the screen. Make it intuitive via text for color-blind users.

The page should have color contrast between background and foreground elements to support users with less color sensitivity. There is a fixed ratio prescribed for this.
	
- WCAG 2.0 includes specific requirements along these lines, as follows:

Provide keyboard-only navigation support allowing users to operate the entire website. While using keyboard navigation, the focus on the elements should be clear and have appropriate color contrast.

Add provisions to move forward, backward, and exit an area via keyboard shortcuts—for example, keys to exit a modal window.

Provide enough time for users to read the content entirely.

Avoid content that flashes on the screen and has many animations, as it could cause physical reactions like seizures.

Provide the ability to skip repetitive content.

Hide the offscreen content for screen readers. For example, if a link appears only in a particular selection, hide it in the screen reader flow.

Provide elaborate, meaningful text for links.	

- WCAG 2.0 once again calls out solid requirements here:

Avoid jargon and technical terms; present simple, meaningful content instead. For example, avoid technical error messages like “034506451988 is invalid” and provide understandable text like “Incorrect date format.”

Provide expansions and abbreviations where necessary.

Avoid sudden changes in context (e.g., opening multiple windows), as it will affect the keyboard navigation.

Avoid changes of context when the user has different settings, like a larger font.

Provide clear, actionable label text for elements to help users take the right action. For example, an email address input field should have the label Email and a sample value like example@xyz.com.
	
- WCAG 2.0 calls out the following requirements for this principle:

The markup language content should follow standards like having opening and closing tags, no duplicates, unique IDs, etc., so that it is easily parsable by multiple assistive technologies.

The name, role, and state of each element, including those generated by scripts, should be available for assistive technologies (for example, role="checkbox" and aria-checked="true|false"). Provide the updated state of elements like checkboxes to the screen reader after selection.
	
- WAI-ARIA provides specifications for these attributes (e.g., roles, aria-checked, etc.) that must be adhered to during web development. 
	
- Automated Accessibility Auditing Tools

They come in the form of static code analyzers and runtime accessibility checkers. eslint-plugin-jsx-a11y is a linting tool for React; it’s an ESLint plug-in that enforces several accessibility standards directly in your JSX. Similarly, Codelyzer has linting rules for accessibility standards in TypeScript
https://oreil.ly/xsw0H
https://oreil.ly/xjLFv

- Manual testing 

https://www.usertesting.com/

- WAVE tool, WAVE is an online accessibility evaluation tool that you can use to check a web page for compliance with accessibility standards.

Open the WAVE website.
https://wave.webaim.org/

Enter your application URL in the “Web page address” box. Alternatively, you can use the WAI’s inaccessible demo website, which has intentionally been made inaccessible for learning purposes.

Click the arrow to run the audit.

- Lighthouse

If your application is not publicly accessible, you may not be able to use WAVE

https://oreil.ly/NkblQ

- Pa11y CI Node Module

Pa11y CI is a command-line tool that comes as a Node module. It runs accessibility audits against one or more URLs and reports issues
https://github.com/pa11y/pa11y-ci

- Axe-core
https://oreil.ly/Whu2x
The GitHub documentation for axe-core states that it can find, on average, 57% of WCAG issues automatically. 



	
# Cross-functional requirements testing 
-  prefer the term cross-functional, as it emphasizes that the requirements are spread across the application 

- CFR	Simple definition https://sarahtaraporewalla.com/agile/design/decade_of_cross_functional_requirements_cfrs
Accessibility	Ability of the system to enable user personas with disabilities to access the application seamlessly, as discussed in Chapter 9, such as through support for screen reader integration.
Archivability	Ability of the system to store and retrieve the history of application events and transactions as needed, such as storing a user’s online purchase order history.
Auditability	Ability of the system to track the business events and states of an application through logs, database entries, etc. As explained in Chapter 7, this feature helps defend against the threat of repudiation.
Authentication	Ability of the system to allow only authenticated users to access the application’s services in all layers. For example, a simple login feature.
Authorization	Ability of the system to restrict access to the application’s services based on permissions, such as restricting access to view account details to only certain bank employees.
Availability	Ability of the system to provide the application’s services for a defined period or threshold, as discussed in Chapter 8.
Compatibility	Ability of two or more systems to work in tandem without disrupting one another. For instance, the ability of the application to work with an earlier version of the same service (known as backward compatibility).
Compliance	Adherence of the system to legal requirements and industry standards, such as WCAG 2.0.
Configurability	Ability of the system to configure the behavior of the application with variables, such as the ability to configure the types of multifactor authentication.
Consistency	Ability of the system to produce consistent results in distributed environments without loss of information, such as being able to show comments in a social media post in the right order irrespective of the end user’s geolocation.
Extensibility	Ability of the system to plug in new features, such as being able to add a new type of payment method to the application.
Installability	Ability of the system to be installed on supported platforms, such as OSs and browsers.
Interoperability	Ability of the system to interact with applications that operate on multiple technologies and platforms. For example, an employee management system that integrates with insurance systems, payroll management products, performance assessment systems, and so on.
Localization/internationalization	Ability to scale the application to different regions with a different user experience, if necessary, and language translations. For example, amazon.de is localized for German-speaking users. This CFR is also commonly referred to as l10n/ i18n for the same reasons as a11y (see the note in Chapter 9).
Maintainability	Ability of the application to be easily maintained in the long run, with readable code, tests, etc. An example is creating meaningful method names.
Monitoring	Ability of the system to collect data about its activities and alert when predefined errors are encountered or when acceptable metrics go out of bounds. For instance, alerting when the server is down.
Observability	Ability of the system to analyze the information gathered by monitoring systems in order to debug and gain insights on application behavior, for example to understand how each feature is utilized during peak days, weeks, and so on.
Performance	Ability of the system to respond on time to the user’s requests even at times of peak load. For example, ride availability should be presented to the users in x seconds, even under peak load.
Portability	Ability of the application to be shipped to new environments, such as integrating with new database types and cloud providers.
Privacy	Ability of the system to protect private and sensitive user data, such as encrypting credit card details while storing them in the database.
Recoverability	Ability of the system to recover from system outages, for example by having automatic data backup mechanisms.
Reliability	Ability of the system to tolerate errors and continuously maintain the services and data with precision. For example, applications usually incorporate retry mechanisms to handle network and other transient failures.
Reporting	Ability of the system to present meaningful reports to the business and end users based on the events collected. For example, Amazon lets users create order history reports.
Resilience	Ability of the system to handle errors and downtime. For example, load-balancing solutions may be put in place so that requests are sent only to servers that are online.
Reusability	Ability of the system to reuse application code and services as needed to implement new features; for example, reusing design components across multiple suites of enterprise applications.
Scalability	Ability of the system to handle expansion to new regions, more users, etc. For example, most cloud providers have options to enable an auto-scaling feature, which ensures that additional computational resources are added when there is a heavy load.
Security	Ability of the system to curb vulnerabilities and defend against potential attacks, using the tools and methods discussed in Chapter 7.
Supportability	Ability of the system to support new developers onboarding to teams and new users onboarding to the application code. An example is automating the code base and test suite setup steps.
Testability	Ability of the system to simulate different test cases and experiment with the application. For example, creating mocks for third-party services in order to simulate different test cases and test the integrations.
Usability	Ability of the system to provide a user experience that is intuitive, meaningful, and easy. For example, having a consistent navigation layout with a header panel.

- remaining aspects here:

Localization/internationalization testing

User experience The user experience encompasses all the design-related aspects of the application, such as how intuitive the user flows are, how many clicks it takes the user to get the information they need

A/B testing is another way to get real-time feedback on the user experience in production. Though it’s called testing, this is really more experimentation: it involves presenting different UX designs of the same feature as prototypes to two different end user groups 

- Reliability

chaos engineering 
infrastructure testing 

- Infrastructure Testing

The term infrastructure at a high level refers to the computational resources (e.g., machines, VMs, containers), network structures (e.g., VPNs, DNS entries, proxies, gateways), and storage resources (AWS S3, SQL Server, secrets management systems, etc.) necessary to support the smooth functioning of the application. 

- Terraform by HashiCorp is a widely adopted open source tool for scripting infrastructure code using a declarative coding style

https://www.terraform.io/

- Compliance Testing

Two commonly implemented regulations on the web are the GDPR and WCAG 2.0.

General Data Protection Regulation (GDPR)
https://gdpr-info.eu/
The GDPR primarily aims to protect the private data of EU citizens. If you aim to sell goods to EU citizens, then your website will be subject to GDPR compliance.

- Perspectives: Evolvability and the Test of Time!

We have discussed how to harness quality by testing the application’s functional and cross-functional requirements



# Mobile testing 
- devices 

screen size 

pixel desity 

os 

hardware 

- app 

mobile web 
hybrid 
native 
progressive web, Progressive web apps (PWAs) are advanced versions of mobile web apps. Users can install them on their devices via a URL, and they take up very little storage space.

- mobile test strategy 

target customer segment 
focus market regions 
top bmobile vendors and os 
existing usage information 
ntework 

85% coverage  

- ios 

https://oreil.ly/lcUcw

- android 
android stuiod 
espresso 
talkback 
accesibility scanner 
https://oreil.ly/1c2Q9
https://oreil.ly/jFxWD
https://oreil.ly/jFxWD
https://oreil.ly/8cYmG

- Appium is an open source tool supported by a vibrant community. As a cross-platform automation tool, Appium bundles OS-specific automation frameworks such as XCUITest

- Robotic process automation (RPA) is a hot topic in the industry these days. It’s seen as a way to reduce the burden of mundane process-related manual tasks and accelerate operational efficiency by automating the business processes end-to-end.

- Android Studio’s Database Inspector

If you want to explore the local database of the mobile app, Android Studio provides a Database Inspector tool that provides easy GUI access. 

- Performance testing tool 

Monkey can be considered a Chaos Engineering equivalent for Android apps.
https://oreil.ly/fp9oQ

- MobSF

As mentioned earlier in this chapter, the Mobile Security Framework is an open source tool

- Qark is another open source security scanning tool for Android apps.
https://github.com/linkedin/qark


# Moving beyond in testing 
- Defect Prevention over Defect Detection
- Empathetic Testing
- Soft Skills Aid in Building a Quality-First Mindset



# Introduction to testing in emerging technologies 
- Testing ML Applications

Most ML applications adopt a typical service-based architecture with the ML component integrated into the services

- validating model quality 

Precision, as the name suggests, refers to the model’s ability to correctly predict a result
Recall, on the other hand, is the metric that tells us how many of the actual abusive posts were identified correctly by the model 
It is therefore critical to test both the input data and the ML model for biases. Facets is an open source tool that can help with this
https://oreil.ly/wVyQt

- block chains 

- Introduction to the IoT’s Five-Layer Architecture

There are varying views on defining the number of layers in an IoT architecture—three, four, or five

business layer 
application layer 
middleware layer mqtt mdns 
network layer 
perception layer 

- Augmented Reality and Virtual Reality

Augmented reality (AR) is a technology that superimposes graphics, texts, images, and other sensory information onto the real-world environment 

Thoughtworks is the functional test automation tool for Unity called Arium. Arium is open source and is available as a Unity package. 
https://oreil.ly/0F6mV



