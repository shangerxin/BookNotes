Git Notes;Note=Erxin

# introduction
- git functions is linked wit dash '-' which is not needed to call the function
git diff
git fetch
- get git 
git.or.cz
- configuration git
git config --global user.name
git config --global user.email
- check configuration
cat .gitconfig, shwo configure file
git config --list
- git support add alias name for function
git config --global alias.co checkout
- configure git to ignore difference white space for some kinds of language such as ruby, javascript, c
git config --global apply.whitespace nowarn

# basic commands
- .gitignore files add ignore files list support wideward match
stay with project
- .git/info/exclude is personal ignore setting
- add current directory

$ git add add .
for first time check in

check git changed status
$ git status

commit 
$ git commit -m "comments"

check current save in the git repository
$git ls-files

remove a file from repository
$ git rm lib/.DS_Store
- git is content control systems
- add more commit comments with current status
$ git commit -a

add diff message into to the commit message
$ git commit -v

check the log message
$ git log

check each line is added detail
git log --status

check the actual changes
$ git log -p

- branching
visualize branch
$ gitk all

add .gitk file to home


check current branch
$ git branch 
$ git branch --color

create branch human
$ git branch human

switch to a branch 
$ git checkout human

git will remove the added files when switch branches 

make master branch changes reflected in the human branch
$ git checkout human
$ git rebase master

merge human into master
$ git checkout master

list different between two branches
$ git diff master human

merge branch, stay on the master and merge human into master
$ git merge human

after merge rebase the master branch

revert from pre merge
$ git reset --hard ORIG_HEAD

show merge conflict files 
$ git merge branch_name

the conflict content will be added into the conflict files

edit each conflict files and manually add it into git again
$ git add edited_remove_conflicted

# get the latest 14 commit from a repo 
git clone --depth=14 https://github.com/angular/angular-phonecat.git

# part 2
- more branches
create branch and switch to it
$ git checkout -b vegetable

save temp changed just like TFS shelf
$ git stash "stared vegetable branch"

show all the stash
$ git stash list

switch to stash
$ git stash apply

delete branches
$ git branch -d branch_name

delete a branch is not a subset of current branch by 
$ git branch -D branch_name

clear the stash for the git visualization, remove the deleted branches
$ git stash clear
- repositories
pull from different repositories

get from repository
$ git clone uri

check .git/config file, where contain git detail about the current repository such as url of the remote server

check branch status, branch all
$ git branch -a

commit changes into remote server
$ git push 

update local changes from the remote repositories
$ git pull

fetch is used to get all data and git data from remote into local and keep sync local git repository to remote

merge is a local thing, combine remote branch into local

pull is fetch + merge
- undo add, undo git add before commit with
git reset <file>

- setup a repository
$ git remote show repository_name
show remote information

$ git remote add repository_name url_server
will add remote repository

$ git fetch remote_branch_name
get remote branch content

$ git checkout -b branch_name
check out the branch name

$ git pull branch_name_src branch_name_dst
get and merge to different branch

$ git merge repository_name/branch_name

$ git add url
$ git commit -a -v
git push repository_name branch_name
- setup track branch, this works like subversion control
push local branch into remote_repository branch
$ git push remote_repos local_branch

automatically setup to track, push and pull will transfer data to remote repository
$ git branch --track branch_name remote_repository/branch_name

or edit config file for git

- subversion, clone the subversion repository and make it works in locally
$ git-svn

the repository then will works like normal git repository

after changes, commit changes into svn
$ git-svn dcommit

get new copy of subversion repository
$ git-svn rebase

# update and checkout a single file in git 
git fetch
git checkout origin/master -- path/to/file

# printers 
shc01p167.prn.hp.com
shc01p109.prn.hp.com 

# setup git on windows
- ssh
http://www.timdavis.com.au/git/setting-up-a-msysgit-server-with-copssh-on-windows/

- file system
create a directory and switch to it. execute
$ git init --bare repo-name.git
then the a empty public git file server is created 
 
share the directory with read/write right for the specify uses 

If want to add existing repo to the new created empty public git server, then switch to the existing. Switch to the desire branch and add remote origin. Push the changes
$ git remote add origin //SHANGE2/gtest/gtest.git
$ git push origin master

If there is no code then just need to clone the empty repo by 
$git clone //computer-name/directory/repo-name.git work-directory


- git ignore files should locate at the same level as .git folder 

- merge.tool setting 
git config --global merge.tool name

names:
bc3 
codecompare 
deltawalker 
diffmerge 
diffuse 
ecmerge 
emerge 
gvimdiff 
gvimdiff2 
kdiff3 
meld 
opendiff 
p4merge 
tkdiff 
tortoisemerge 
vimdiff 
vimdiff2 
xxdiff 


# git openssl error 
- git clone 时提示Connection was reset, errno 10054类错误1ab0e09

fatal: unable to access 'https://github.com/...' OpenSSL SSL_read: Connection was reset, errno 10054d3b37

$ git config --global http.sslVerify "false"d3b37

$ git config --global core.longpaths true1b197fc

- 如果是上传push提示的话。可能是文件过大
500mb
$ git config http.postBuffer 524288000



