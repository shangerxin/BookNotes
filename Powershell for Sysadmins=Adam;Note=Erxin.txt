Powershell for Sysadmins=Adam;Note=Erxin


# part i, fundamentals 
- Get-Help Add-Content

display the documents 

- basic concepts

turn on strict mode:

PS> Set-StrictMode -Version Latest

- automatic variables 

The $null Variable
The $null variable is a strange one: it represents nothing.

The LASTEXITCODE Variable
Another commonly used automatic variable is $LASTEXITCODE.


output streams: Error, Warning, Verbose, Debug, and Information.

PS> Get-Variable -Name *Preference

Name                           Value
----                           -----
ConfirmPreference              High
DebugPreference                SilentlyContinue
ErrorActionPreference          Continue
InformationPreference          SilentlyContinue
ProgressPreference             Continue
VerbosePreference              SilentlyContinue
WarningPreference              Continue
WhatIfPreference               False

PS> $ErrorActionPreference = 'SilentlyContinue'

Boolean Values
Just about every programming language uses booleans, which have a true or false value (1 or 0).

- inspect object properties  everything it finds.

PS>  Select-Object -InputObject $color -Property *


list all of a particular objectâ€™s properties and methods

ps> get-member -InputObject $color 

- data structure 

array 
$colorPicker += @('pink','cyan')

hashtables 

$users = @{
    abertram = 'Adam Bertram';
    raquelcer = 'Raquel Cerillo';
    zheng21 = 'Justin Zheng'
}

- Creating custom objects, New-Object cmdlet to define a new object with a PSCustomObject type.

PS> $myFirstCustomObject = New-Object -TypeName PSCustomObject

define a hashtable in which the keys are property names, and the values are property values, and then cast it as PSCustomObject.

PS> $myFirstCustomObject = [PSCustomObject]@{OSBuild = 'x'; OSVersion = 'y'}


Get_Member cmdlet to check that it is a PSCustomObject type.

PS> Get-Member  -InputObject $myFirstCustomObject



# Combinding commands 
- start a windows service 

PS> $serviceName = 'wuauserv'
PS> Get-Service -Name $serviceName

- use the pipe operator (|) between two commands, like so:

PS> command1 | command2

- Piping Objects Between Commands
To send the output of Get-Service into Start-Service, use the code in Listing 3-2.

PS> Get-Service -Name 'wuauserv' | Start-Service

piping array between command 

ps> Get-Content -Path C:\Services.txt | Get-Service

