Getting started with reverse engineering=Josh;Note=Erxin

# Introduction
- basic structure of the courses 
- why to learn?
career opportunities 
    + break down complex problems into pieces and find root causes
    
necessary for some careers 

deeper understanding into how things work 

techinically challenging

defend your assets 

adversarial thinking

- career path 

incident responder 

malware analyst 

penetration tester 

vulnerability research 

software developer 

- module introduction 

verser engineering process 

tools and concepts 

intruction set architectures 

static versus dynamic analysis 

workflow 

native code obfuscation 

- the reverse engineering process, native code not interpreted languages 

a window environment 

essential tools for becoming an effective reverse engineer 

- tools and concepts 

assembly language, the core of reversing native code 

cpu architecture registers, virtual memory and more 

static analysis IDA pro, hex editors & binary parsing tools 

dynamic analysis windbg and tracing programs 

methodology how to apply these tools to find answers 

instruction set architectures (ISA), abstract model of a computer, defines what is need to pgram it 

example include intel x86 and x86-64, arm and AMD 

this course focus on intel x86 & x86-64 

concepts will overlap with other architectures 

- static vs dynamic analysis 

    + static 
    involves analyszing a program and its code without execution 
    
    + activities go from looking at strings to digging in with a disassembler 
    
    + dynamic analysis 
    
    involves analyszing the program during execution 
    
    process monitors, debuggers, network capture 
    
    + a combination approach can be very effective 
    
- a reverse workflow 

    1. unknown binary file 
    
    2. basic analysis, check the format and structures etc 
    
    3. advanced analysis, windbg ida pro do static and dynamic analysis 
    
    + reporting and documentation 
    
    + look for next sample 
    
    + native code obfuscation, authors will attempt to make their code difficult to analysze whether for malicious or non-malicious purposes 
    
    + anti-analysis techniques can also be employed to slow down your ability to reverse engineer software 
    
    + native code obfuscation can be difficultto detect, given enough time and effort it's not impossible though 
    
- examples of code obfuscation

    + interpreted code (javascript)
    
    + native code, assembly code pattern EA exes 
    
- summary 


# Assembly basics 
- module introduction 
cpu 

assembler and program segments 

intel instruction set architecture (ISA)

essential instructions 

bitwise operations, endianness and size 

- how cpu works 

program on disk -[load by os loader]-> primary memory -[fetch]-> cpu -[decode, execute]->

- CPU cores & clock cycles 

originally, cpus had a signle core, this limited the number of instructions it could execute concurrently 

modern systems now come with multiple physical cores 

virtual cores are also possible, but not perform as well as physical cores, intel's hyper-threading technology is an example 

cpu clock speeds indicate the number of instructions it can execute per second 

    + other components 
    network card 
    gpu 
    memory 
    etc. 
    
- layers of memory 

CPU registers 

caches 

primary  memory 

secondary storage, hard drive etc. 

input devices 

- registers 
    + 32 bit 
EAX AX  AL  AH
EBX 
ECX 
ESI 
EDI 
EBP 
ESP 
...

    + 64 BIT, extend registers and add more registers 
RAX     EAX     AX    AL    AH
RBX 
RCX 
RDX 
RSI 
RDI 
RBP 
RSP 
R8-R15
    
    + thinking in 1s and 0s 
    
- pointer registers 

    + 32 bit pointer registers with 16-b9it portions 
    
    EIP, instruction pointer 
    ESP, stack pointer 
    EBP, base pointer 
    
    + 64 bit pointer registers 
    RIP 
    
    RSP 
    
    RBP 
    
    + index registers 
    
    ESI, source index 
    
    EDI, destination index 
    
    RSI 
    RDI 
    
    common for copy 
    
    + EFLAGS & RLFAGS, 32 and 64 bit registers that represent the results of operations and the state of the CPU 

    carry flag, CF 
    zero flag, ZF 
    sign flag, SF 
    trap flag, TF 
    direction flag, DF 
    overflow flag, OF
    
    upper 32 bit RFLAG are reserved 
    
- the assembler and program segments 
    + binary file formats 
    
    exe {
        header {
            information about the binary files 
        }
        
        sections{
            Code (.text)
            imports/exports 
            read-only data 
            resources 
            other sections 
        }
    }
    
    + segment purposes 
    
    .text/.code program instructions in binary state, entry point of program 
    
    .data/.idata, initialized data 
    
    .rsrc, resources used by the program, icons, images, arbitrary binary data, malware author may inject arbitrary binary data such as shell code for hard reverse engineering 
    
    .bss, unitialized data, such as global defined variables 
    
    not all list of segments. the name of the segment can be changed 
    
    + executing a program decide which way we dealing with files 
    
        + exe file we talk about offset of the file and contents

        + loded into memory will be assigned to virtual memory with virtual addresses
        
    + sample program 
    
    [bits 32]               //defines architecture 
    
    section .text           //define the section of code 
    
    global _START           //define the entry point 
        
    _START                  //entry point 
    
        push ebp 
        
        mov esp, ebp        //instructions
        
        sub esp, 8h         //*nasm syntax 

- instruction set architecture

    + defines the instructions the CPU understands 
    
    this is machine code in binary state 
    
    compiler/assembler/interpreter translates source code into appropriate machine code 
    
    when reverse engineering, disasssemblers revert machine code back to assembly 
    
    decompilers may be able to generate code in original language 

- it starts with a Mnemonic 

mnemonics are human readable forms of the instructions add, move sub are some examples 

operands are arguments expected by the instructions 

operands can be a few types

OPCODES are simply the binary representation of the instruction and any operands often displayed as hexadecimal values 

- generating machine code 

write an instruction -> translate assembler compiler or interpreter -> results in machine code 

xor eax, eax            -->   0x31 0xC0 0011000111000000

- essential instructions 

1503 instructions defined in intel's ISA 

intel documentation is authority of source 

organized into few primary categories 
    + arthemetic 
    + memory 
    + comparison 
    + control flow
    + bit-minipulation 
    
- binary math 

addition, 
0+1 =1
1+1 = 10 

substraction 
0 - 1 = 1 ;borrow from upper 

multiple 
1x0 = 0 
...

division 
1010111/101 = 10001 R 10, remainder 

- arithmetic, many instructions require you to explicitly define the operands, such as 

addition 

ADD DEST, SOURCE 


uses an implicit argument based on operand size 

multiplication 

    + MUL unsigned multiply uses an implicit argument based on operand size, example 

    MUL BX 
    
    operand size   source (implicit)   source2(explicit)  destination
    
    + DIV unsigned divide uses an implicit argument based on operand size 
    
    DIV AX 
    
    IDIV AX
    
    signed divide 
    
    operand size   dividend     remainder   quotient
    8               AX          AH          AL
    
    dword           EDX:EAX     EDX         EAX    
    32 
    
- working with memory 

    + often necessary to move data 
    
    between registers 
    into and out of memory 
    
    + mov instruction
    
    mov dest, src 
    mov reg, mem 
    mov mem, reg 
    mov reg, const 
    mov mem, const 
    
    
    examples:
    
    move eax, ebx 
    mov dword ptr[ecx], 18h 
    
    ;the dword ptr indicate the ecx point to is 4 byte 
    
    + performing comparisons, 
    
    CMP instruction compares 2 values by performing subtraction 
    
    second operand is subtracted from first 
    
    cmp reg, reg 
    cmp reg, mem 
    cmp mem, reg 
    cmp reg, con 
    
    results of the comparison update corresponding "flag" in the E/RFlags register 
    CF, OF, SF, ZF, AF, PF 
    auxiliary flag, parody flag

    + control flow with jumps 
    
    unconditional jumps don't check the flag register, transfers control to arugment 
    
    conditoinal jumps allow for branching logic, checks the flags register to determine if it should take the jump 
    
    JE/JZ       jump equal or jmp zero 
    JNE/JNZ 
    JG/JNLG 
    JGE/JNL
    JL/JNGE
    JLE/JNG 
    
    + the call instruction, call is similar to a jump instruction, tells CPU where to go next, but the difference is CALL pushes the address of the next instruction onto the stack 
    
    A call is typically followed by a RET instruction 
    
    RET POPs the value on top of the stack into EIP 
    
    as long as the function is aligned, this allows a function to return to where it was called from 

    + bitwise operations
    
    AND, multiplies each register bit by bit 
    
    OR 
    
    XOR 

    + size directives 
    
    quad-word, q word, 8 bytes/64 bites 
    
    double-word, dword , 4 bytes / 32 bits 
    
    word 2 bytes/16 bits 
    
    byte: 8 bits 
    
    bit, a single 1 or 0 
    
    + endianness 
    big-endian, most significant byte first 
    little-endian, least significant byte first 
    
    only affects multie byte values 
    
- module conclusion


# Working with native code 
- Module introduction 
    + the portable executable (PE) file format 
    + an introduction to the windows 
    + demo: parsing PE files 
    + lab: analyzing PE files 
    + module conclusion 

- the portable executable file format 

    + binary file format used predominantly in windows operating systems 
    
    + houses executable code for executables (EXEs) and dynamic link libraries (DLLs)
    
    + a flag diffedrentiates between the two otherwise use the same format specifications 
    
    + made up of multiple sections at a minimum will have a section for code and another for data
    
- PE file format 

Exe 
|-------------
headers 
IMAGE_DOS_HEADER
    IMAGE_FILE_HEADER 
    IMAGE_OPTIONAL_HEADER 
    IMAGE_DAT_DIRECTORY
    
IMAGE_NT_HEADERS 

IMAGE_SECTION_HEADER

|--------------
sections 

    + sections 
.text/.code 
.bss 
.rdata 
export data 
import data 
resources 
thread-local storage 
debug information 

    + IMAGE_DOS_HEADER 
all PEs start with this header, first 64 bytes of file 

has 19 members, magic and e_lfanew etc 
        * magic contains values 4Dh, 4Ah (MZ), signifies a valid dos header 
        
        e_lfanew, DWORD, contains offset for IMAGE_NT_HEADERS 


    + IMAGE_DOS_HEADER structure 
    
IMAGE_DOS_HEADER STRUCT {
    e_magic     word 
    ... 58 bytes of additional members 
    e_lfanew    dword 
}

PE is little endian in memory 
E0 00 00 00 to address 000000E0

the e_lfanew pointed content will be IMAGE_NT_HEADERS
50 45 00 00   stands for PE... 

    + IMAGE_NT_HEADERS STRUCTURE 
    
IMAGE_NT_STRUCT {
    Signature dword 
    FileHeader IMAGE_FILE_HEADER 
    OptionalHeader IMAGE_OPTIONAL_HEADER32 
}

IMAGE_NT_HEADERS will contain entry point of the program, image base(virtual memory), whether it uses address space layout randomization (ASLR, data execution prevention (DEP)) and other security feature 

    + _IMAGE_OPTIONAL_HEADER {
    
    image_base  //optional used
    entry_point  //optional used
    }
    
    + IMAGE_DATA_DIRECTORIES 
    
holds at most 16 entries, array of IAMGE_DATA_DIRECTORY structures 

refers to different parts of code 
imports 
exports 
resources 
relocation tables 

typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD VirtualAddress;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

- IMAGE_SECTION_HEADER {
    BYTE Name
    
    union {
        DWORD PhysicalAddress //address when load into memory 
        DWORD VirtualSize 
    }
    DWORD VirtualAddress    //address of section in memory 
    DWORD SizeOfRawData     //size of section on disk 
    DWORD PointerToRawData  //beginning of section on disk 
    ...
    DWORD Characteristics  //characteristics of the image 
}

    + from disk to memory 
    
loader will navigate DOS header to find PE section, checks for validaity > section tables are read and sections mapped into memory > loader then parses other aspects of the image, such as imports and exports > finally, uses AddressOfEntry to calculate entry point and begins image execution 

- an introduction to the windows application program interface (API)

formerly known as the Win32 API, when reversing allows us to understand what a program does 

MSDN, microsoft developer network

    + document, msdn.microsoft.com 
    
    + core concepts 
    
    + types and Hungarian notation 
    
    BYTE, WORD and DWORD are used to represent 8, 16, 32 bit values. contrast to C types such as int, short and unsigned int 
    
    hungarian notation is a prefix notation used to identify a variable's type 
    
    + Handles, opened or created by the OS 
    
    provide access to windows, menus, files, directories, et cetera 
    
    similar in concept of a C pointer 
        * canot do arithmetic on them 
        * will look like a pointer in assembly 
    you can view process handles with tools like process hacker, used the value to back map to the type when reverse 
    
    + creating a process with the windows API 
    
BOOL WINAPI CreateProcess (
    _In_opt_ LPCTSTR lpApplicationName,
    _Inout_opt_ LPTSTR lpCommandLine,
    ...
)
    _opt_ means optional  
    
    + user mode there and back again 
    
User mode { windows API, kernel32, user32, ws2_32 and other dlls}
                A
                |
                V
                native API, NTDLL
|-----------------------------------------------------------------
                A
                |
                V
kernel mode  {  Kernel API}

    + linking code 
    
    static: directory copies code from the library into the executable, it is difficult to reverse 
    
    runtime: imports from the libraries only when the function is needed, malware often uses this technique 
    
    dynamic: os looks for libraries when executable is loaded, this is the most common 
    
    + Common dlls 
    Kernel32, core functionality, memory, proceses, files, and hardware 
    Advapi32, service manager, registry 
    User32, user interface 
    Ntdll, low level api, not intetneded to be called directly 
    WSock32/ws2_32, low-level network 
    Wininet, high level networking(HTTP, FTP, etc)    

- demo, parsing PE files 
    
    + use the following tools to automatically parse a PE file 
    010 hex editor 
    PE studio 
    dependency walker 
    
        * open a PE file with the hex editor 
        first two bytes are the magic 4D 5A 
        
        60H Aress contain the e_lfanew dword, will pointo the IMAGE_NT_HEADERS, will be the PE signature 
        
        * with the Template menu, we can apply the Exe template will display the results 
        
    + dependency walker 
    right top panel is the import functions, we can use the ordinal number to reference a function with the dependency walker  
    
    right left panel is the the avaliable functions 
    
    + PE studio, will list indicators, virustotal, this tool integrate with maware service total. 
    
    does-stub, will start display the file information 
    file-header 
    optional-header 
    directories 
    sections 
    ....
    
- lab, analyzing PE files 
    + tools you can used to parse a pe 
    010 hex editor 
    PE studio 
    dependency walker 
    
    + looking at PE fiel data 
    characteristics and properties 
    code and data section 
    imports and exports table 
    
    + use pestudio open the PE file 
    
    image base? does the dvd standard image based value used by most compilers? 
    
    what's the section does the entry point point to 
    
    where would be the .text section would be load in memory? 
    
    what other name of the sections in this file? 
    
    do any one deviate from the standard name? 
    
    based on the import function what does the function does the file did. 
    
    We are navigate PE file on disk not on memory.
    
    the name of the section just for human will not impact the real  program execution 
    
    will list the imports tab, will check the APIs which is referenced

    msdn will list all the function information 
    
        * answers 
        
        the image base is hide in the optional-header, which is the image-base. this is the value the compiler will provide when this program is created. os will use ASLR random address localization  
        
        we will also find the address-of-entry-point, pe studio will show you it is point to .text section 
        
        
        check the section tab we can see the section names. the unnormal section name will be marked as red 
    
    + 010 editor to open the PE file check the NT header, example 08 01 00 00. it's a little ending value. 00 00 01 08h
    
    0100h from the row and 8 offset from the column to the start of PE binary content will be 50 45 00 00, will be the signature of PE section 
    
    IMAGE_SECTION_HEADER structure will contain the header names , for the MS PE file the second entry is the import address, struct IMAGE_DATA_DIRECTORY import. 010 editor will automatic help us calculate the entry location from the section memory such as .rdata FOA=0x14244, the VirtualAddress value of the import entry is 15444h
    
    
    DWORD VirtualAddress will have a value such as 1000h, it will be used to caculate the virtual address when load the PE file into the memory by image_base * VirtualAddress
    DOWRD Size 
    
    we can also use the import table value manually calculate the entry location with the section range.
    import VirtualAddress(15444h) - Section header VirtualAddress (10000h) should locate in the SizeOfRawData (EA00h) 
    THe value is 5444h. It plus PointerToRawData  (EA00h) should equal to 14244h in the section .rdata. 
    
    if we navigate to the memory in .rdata section. 010 editor will auto apply the structure to the location. IMAGE_IMPORT_DESCRIPTOR. We can go to the member FirstThunk (1012Ch) if we navigate to the location. the comment list the location is .rdata FOA = 0xEF2Ch. If we navigate to the location 0xEF2Ch. will be list the value E2 55 01 00. It's a little ending value, another virtual address. we need to recalculate the value. 
    we will find the IMAGE_IMPORT_BY_NAME structure. will list the function entry name 

- module conclusion 


# Using debuggers 
- debugger functionality 
    + dynamic analysis, monitor execution
    
    + determine if the program have anti analysis capabilities. if it does it may change behavior when attach the debugger 
    
- reverse engineering tool Ida Pro
- executing software 

    + programs run in memory so you will be dealing with virtual addresses 
    
    add the virtual address to the image base 
    
    we can also debugging the interpreted languages in windbg like (python, php, javascript etc.)

    debugging dynamic link libraries(DLL) using rundll32 in windows this program take two arguments. The name of the dll and the export you want to call. the entry point is rundllmain. etc 
    
    many debuggers and debug environments avaliable
- source-level 
    + debug while coding 
    + may be built into an integrated development environment 
    + set breakpoints on lines of code in the source 
    
    + assembly level 
    operate on assembly code instead of source code 
    step through execution of a program one instruction at a time 
    
- kernel-mode vs user-mode 

kernel-mode is more difficult 

you can't break the os that you're using 
need multiple systems 
you can use VMs too 
opne system runs the program to be debugged, the other runs the debugger 

- debug symbols, symbols can provide information about functions and variable names 

generated a compile time 

may not available for the code 

microsoft provides symbols for many of their libraries 


- debugger commands 
- windbg under windows 
    + disassembly window 


# Practical assembly

# Reverse engineering 

# Conclusion 











