Learning Selenium Testing Tools, Third Edition=Packt Publishing;Note=Erxin

# Preface 
- selenium webdriver works with both web browsers and mobile browsers 
- what you need for this book 
mozilla firefox 
google chrome 
opera 
eclipse for intelliJ idea 
firebug 
firefinder 
xpath finder/xpath viewer(firefox add-ons)
selenium ide 
selenium grid 
ubuntu linux 


# Getting start with selenium ide 
- selenium can work on any browser that supports javascript, allow tester and developer to record actions to create test 
    + install selenium ide 
    http://seleniumhq.org/download/
    
    + there also several ide plugins as firefox addons tool such as python formater, ruby formatters 
    
- getting acquainted with the selenium ide via Firefox|web developer|selenium 
base url, is the url that the test will start at 
speed slider, fast/slow in screenshot 
play entire test suite 
play curernt test case 
pause/resume 
step icon when a test is paused 
record button 
command drop down list, which have auto complete 
target textbox allow to input the location of the element that you want to work against 
find button can clicked highlight the element 
value text is where you place the value needs to change 
table tab will keep track all your commands 
source tab will display all the htmp 
below value textbox is log area 

- rules in creating tests with selenium ide 
    + a known starting point 
    + should not rely on any other test to run 
    + only test one thing 
    + test should clean up after themselves 
    
- recording your first test with selenium 
    + in record mode 
    + navigate to http://book.theautomatedtester.co.uk/chapter1.
    + on the web application 
        * click record 
        * select another value from the drop box for example selenium rc 
        * click on the home page link 
        
- validating a test with assert and verify 
    + assert, this allows the test to check whether the element is on the page, add assert wth context menu and click on the target element 
    + use command verifyElementPresent with the verifybutton target in Selenium IDE
    + verify and assert methods 
    verifyElementPresent
    assertElementPresent 
    verifyElementNotPresent 
    assertElementNotPresent
    verifyText 
    assertText 
    verifyAttribute
    assertAttribute 
    verifyChecked 
    assertChecked 
    verifyAlert 
    assertAlert
    verifyTitle
    assertTitle 
        
    + selenium ide does not do this when recording, required manually add assert 
    
- creating comments in your tests 
    + click a created step 
    + select Insert New Comment 
    
- multipling windows 
    + open a web browser and click link to open another window 
    + add test logic for other window 
    + change ClickAndWait to Click command to prevent timeout 
    + use selectWindow command to select other window 
    
- test against ajax applications 
    + open ide and press record button 
    + navigate to a website 
    + trigger a logic which will send ajax request 
    + add a new command waitForElementPresent or select it from the drop-down menu 
    + then verify the present element 

- avaliable waitFor set of commands 
waitForAlertNotPresent 
waitForAlertPresent 
waitForElementPresent 
waitForElementNotPresent 
waitForTextPresent 
waitForTextNotPresent 
waitForPageToLoad 
waitForFrameToLoad

- storing information from the page in the test to let it be used later in a test 
    + use the saved variable with 
    ${variableName} or storedVars["variableName"]
    
    + record a script 
    + right click a test and select storeText command 
    + use type command 
    + type storeinput into the target box 
    + set the value ${variableName} 
    
- debugging tests 
    + useful command for help debugging 
    highlight a command 
    press the x key, this will make the command execute in the selenium IDE 
    
    if you are having issues to locate an element, could use Find button 

- creating test suites 
    + open ide 
    + create test case 
    + repeat the process and create more test case 
    + group tests together to to be used later 

- parameterization
    + use the storeEval command 
    + open notepad create input data as 
    searchData = 'Selenium IDE' 
    
    + save the file as google_search.js 
    + open selenium IDE and choose Option|Options menu 
    + under selenium IDE extensions, browse the saved google_search.js file after attaching the data file, and click ok to restart the IDE 
    
    + use storeEval command to read data from the added google_search.js file with ${searchDataValue}, verify the download selenium IDE text using an assertTextPresent command 
    
- generating source code from selenium IDE 
    + formatter plugin enables export the recorded steps to convert the user action into source code for a specific language Option|Format select a language 
    
- saving tests, File|Save Test Case. IDE will try to keep the relationships between the folders in step when saving the tests and the test suites 

- what you can not record 
    + silverlight ad flex/Flash application 
    + does not work with canvas 
    + selenium cannot do file uploads due to javascript sandbox, may be able to send text into the input 
    

# Locators 
- allow us to find elements on a page that can be used in our tests, in html it is seen as a good practice to make sure that every element you need to interact with has a id attribute and a name attribute 
- support locate by 
id 
name 
link 
xpath 
css 
dom 

- useful tools 
firebug 
firefinder, tool for testing xpath and css 
ie developer tools 
google chrome developer tools 

- locating element by id 
    + open IDE 
    + add a command and set the target to the element id 

- moving elements on the page, set the target to the name of the element in IDE , In the Target textbox, this would look like name=Element

- adding filters to the name, name=verifybutton1 value=chocolate; in the target text box of IDE 

- finding elements by link text set the link=link target

- finding element by accessing the dom via javascript, dom=document.links[0]; in target 

or 
dom=document.getElementById("id");

- finding element by xpath, xpath=xpath-expression 

- using direct xpath in your test 
    + direct xpath 
    xpath=/html/body/div[2]/div[3]/input into the Target
    
    + collection and index 
    //div[2]
    
    + element attributes 
    xpath=//element[@attribute='attribute value']

    + partial match on attribute element, also could use starts-with instead of contains
    //div[contains(@id,'time_')].
    
    + finding element by text in contains 
    //element[text()='inner text']

- leveraging the xpath axis with elements 
    + using axis 
    //input[@value='Button with ID']/following-sibling::input[@value='Sibling Button']

    xpath=//div[@class='leftdiv']/input[2]

- css selector  
div.leftdiv inputs 

css=div.leftdiv input into the Target

div[class='leftdiv']
 
- using child nodes to find the element  
css=div.leftdiv > input

- using sibling 
css=input#but1 + br + input

- using css class 
css=div.centerdiv

- using id in css 
css=div#divinthecenter

- find by attributes in css 
css=input[value='chocolate'] 

css=node[attr1='value1'][attr2='value2']

- partial matches on attributes content, use contains to find partial matches 
^=, this finds the starting with the value passed in, equivalent to xpath starts-with 
$=, this finds the ending with, equivalent to xpath ends-with 
*=, finds the item that matches the attribute that has the value, equivalent to xpath contains 

div[id^='time_'] or div[id*='time_']
//div[contains(@id,'time_')]

- finding the nth element with css with :nth-child, Selenium does not support the :nth-of-type pseudo-class
xpath=//div[@class='leftdiv']/input[2].
css=div#divinthecenter *:nth-child(3)

- finding an element by its inner text or partial text 
xpath=//div[contains(text(),'element has a ID')]

with css we will need to use the :contains pseudo class


# Overview of the selenium WebDriver 
- Environment 
IntelliJ, http://www.jetbrains.com/idea/download/
JUnit, https://github.com/junit-team/junit/wiki/Download-and-Install 
download selenium-server-<version>.zip from selenium.org http://code.google.com/p/selenium/downloads/list
Eclipse, http://www.eclipse.org/downloads 

- history 
    + original creater 
    + selenium RC, remote control, is created by Patrick Lightbody and Paul Hammant and it is implemented with jva as a web server that would proxy traiffic and inject selenium onto the page to supply cross domain restriction for javascript 
    
    it also support manipulate the browser for testing but have many disadvantage, such as hard to pick a right API and other compatibility issues 
    + Simon Stewart want to try a different way to driving the browser which is WebDriver project. It original as a way to drive HTMLUnit and internet explorer. provide object orientated API 
    
    design argitcal http://www.aosabook.org/en/selenium.html
    
- understanding the webdriver architecture 
    + we driver doesn't follow the same approach as selenium RC refer, http://docs.seleniumhq.org/docs/05_selenium_rc.jsp
    
    + it was purely javascript, it would automate the browser from within the browser or outside browser 
    
    webdriver API -> webdriver SPI -> JSON wire protocol -> selenium server 
    
- the webdriver API 
    http://selenium.googlecode.com/svn/trunk/docs/api/java/index.html?overview-summary.html
    
    example:
    driver.findElement(By.name("q"))
    
    element.sendKeys("I love cheese");
    
    these commands are then translate to the SPI which is stateless 
    
    stateless means no depended on previous actions 
    
- the webdriver SPI, stateless programming interface, it is then called to a mechanism that breaks down what the element is, using a unique id 

findElement(using="name", value="q")
sendKeys(element="webdriverID", value="I love cheese")

from here we call the JSON wire protocol we still use http, developers created the json wire protocol to communicate with browsers 

- the json wire protocol, it able to transport all the necessary elements to the code that controls it. it uses like a rest-like api 

- the selenium server

bindings(support different languages, c#, java, python...) <-> selenium webdriver api <-> drivers(different browsers IE, chrome, firefox, htmlunit, mobile,...)

- merging of two projects which is called selenium 2 
    + install jsdk 1.6+ 
    + set up java environment 
    
- setting up the intellij idea 
    + create new project 
    + create test dir 
    + File|Project structure click on modules 
    + click on test folder 
    + click on test sources button and test folder 
    + File|Project structure click on Global libraries add a new global library then select java and add selenium.jar and common.jar which in the same place as selenium-server.jar 
    
    add junit 
    + click on module link and click on dependencies tab add global libraries add selenium and junit  
    + then the environment is ready 

- setting up eclipse ide with java project for selenium webdriver and testing 


# Finding elements with webdriver api 
- assume you have already instance a webdriver 
WebDriver driver = new FirefoxDriver(); 
 
    + example 
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.*;
import org.testng.annotations.*;


public class TestExample1 {

  Webdriver driver;

  @BeforeTest
  public void setUp(){
    driver = new FirefoxDriver();
    driver.get("http://book.theautomatedtester.co.uk/chapter1");
  }

  @AfterTest
  public void tearDown(){
    driver.quit();
  }
  
  @Test
  public void testExamples(){
    // We will put examples in here
    // Get the webelement of a parent - Button
    WebElement element = ((FindsById)driver).findElementById("button");
    // Get the webelement of a Clild - Link
    WebElement childElement = element.findElement(By.tagName("a"));
  }
}

- find element by id, this will return a WebElement object 
findElementById(String using);

- find element by name 
findElementByName(String using);

- other API 
findElementByClassName(String using);
findElementByXpath(String using);
findElementByLinkText(String using);

- using findElement helper methods 
findElementByCssSelector
findElementsByCssSelector

- finding element using a more generic method, use the findElement() method, pass in the By abstract class, and call static methods on this class

driver.get("http://book.theautomatedtester.co.uk")
driver.findElement(By.linkText("Chapter1"));

- not found when an element does not exist. If it throws NoSuchElementException,

    + without error handling To get around this, we can use the findElements() call, and then we just need to check that the size of the list returned is 0.
    
List<WebElement> elements = driver.findElements(By.Id("myElement"));
elements.size(); //This should be zero and can be checked accordingly

- waiting for elements to appear on the page 
    + using implicit waits, implicit waits will be in place for the entire time the browser is open. Any search for elements on the page could take the time 
    
driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);driver.findElement(By.xpath("//div[@id='ajaxdiv']")

    + explicit waits, when we know what we want to happen 

WebElement element = (new WebDriverWait(driver, 10))
.until(new ExpectedCondition < WebElement > () {
	 @ Override
	public WebElement apply(WebDriver d) {
		return d.findElement(By.xpath("//div[@id='ajaxdiv']"));
	}
});


# Design patterns 
- using page object design 
- using PageFactory selenium library 
- using LoadableComponents 
- required lib 
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;

- page object pattern, and how to create your own DSL, domain specific language 

    + wrap selenium method into private methods, name the method with understandable statements relative to the test 
    
- using page factory with page object 

- loadable component is another way to approach page objects, it also wrap the selenium functions into meaningful methods 

- changing PageObject to use LoadableComponent


# Working with webdriver
- run a test with firefox and work with firefox profiles 
driver = new FirefoxDriver();
...
    
    + firefox profile perferences, some time we need to update preferences within Firefox. we could instantiate a Firefox profile object and then update the settings 
    
FirefoxProfile profile = new FirefoxProfile();
profile.setPreference("browser.startup.homepage", "http://book.theautomatedtester.co.uk");
driver = new FirefoxDriver(profile);

    + use different firefox binary which meaning you may install firefox in different place 
FirefoxBinary binary = new FirefoxBinary("/path/to/binary");driver = new FirefoxDriver(binary);

    + installing a firefox addon, with profile object 
    profile.addExtension("path/to/addon");
    
    + using webdriver with firebug 
    @ BeforeTest 
    public void setUp() {
        FirefoxProfile profile = new FirefoxProfile();
        profile.addExtension("firebug.xpi");
        profile.setPreference("extensions.firebug.currentVersion", "99.9");
        driver = new FirefoxDriver(profile);
        driver.get("http://book.theautomatedtester.co.uk/chapter4");
    }
    
- run a test with chrome or chromium 
    + install chrome driver if not install to default location need to 
    On Linux and Mac OS X, export PATH=$PATH:/path/to/chromedriver.

    On Windows, set PATH=$PATH;\path\to\chromedriver.

    + init 
    driver = new ChromeDriver();
    
    + chrome or chromium doesn't have a profile but have a chrome options like user profile 
    
    we can also tell it to install chromium 
    
        * instantiate a ChromeOptions object
    ChromeOptions options = new ChromeOptions();options.setBinary("/path/to/location");
    driver = new ChromeDriver(options);
    
        * pass argument to start a browser we can use setArguments()
        
        * add extension 
    ChromeOptions options = new ChromeOptions();options.addExtension("example.crx")

- update the capabilities of the browser 
- run a test with opera and work with opera profiles 
OperaProfile profile = new OperaProfile();
profile.preferences().set("Geolocation", "Enable geolocation", false);
driver = new OperaDriver(profile);

    + opera reference 
     http://www.opera.com/download/mirrors/config/  or visit http://www.opera.com/support/usingopera/operaini/

- run a test with internet explorer support ie6 to ie9 
driver = new InternetExplorerDriver();

- other important points, remember to call the quit() method in the test clean up method to release the resources which are used by WebDriver, the close() method may only close the window that WebDriver is currently on but not release the resources  


# Automation framework development and building utilities 
- use automation frameworks 
- evolution of frameworks 
    + generation 1 record/playback 
    selenium RC and selenium IDE 
        * advantages 
        user friendly 
        don't required scripting or programming 
        
        * disadvantages 
        tool dependent 
        no reusability 
        scripts contain hard code data,, parameterization play load is high 
        not reliable 
        tester make an error enter data then the script must be re-record 
        no customized reports or logs, user have to dependent on the tool 
        
    + g2 action driven 
    QTP/UFT or TestComplete 
    
    each step or group are converted to reusuable actions and resused to form a test scenario 
    
        * advantages
        user friendly 
        resuability 
        it's good to know basic scripting 
        
        * disadvantage
        tool dependent 
        reusability is achieved to some extent 
        data parameterization challenges still occur 
        reports and logs require programming skills 
        scripts are have and become difficult to manage 
    
    + g3 data driven, data pass by excel, text, xml 
        * advantages
        script can be developed at the stage of application development 
        reusability
        actual input is easy to maintain 
        
        * disadvantage
        requires some knowledge of scripting 
        maintain input large input data 
        
    + g4 keyword driven, once the data table is ready and master driver reads the data and executes the respective keyword one by one based on the action provide on the data table 
        
        * example datasheet 
keyword             locator                inputs      wait
enterText           Id =Username    Testuser
enterText           Id =Password     Testuser
click                   Id =Login                              10
verify                 Id =Logout          Logout

        * advantages
        detail test plan is written in excel 
        keywords are developed by a few people who are experts in automation tools 
        tester needs to understand the keyword and the formats of the inputs 
        keywords are designed and planned well 
        
        * disadvantage
        development keywords and generic utilities require scripting knowledge
        tester have to remember keyword and the format 
    
    + current hybrid, data driven + keyword driven 
    Selenium WebDriver 
    Eclipse IDE 
    Java 
    TestNG, This is a testing framework inspired by JUnit and NUnit.
    
    + automation framework 
    config 
    test data 
    page object factory 
    library 
    reports 
    logs 
    
- form an automated test case using keywords 
    
- understanding hybrid automation framework using WebDriver, TestNG on Eclipse 


# Mobile devices 
- requirement android 4.0+ known as Ice Cream Sandwich and download android-server-<version>.apk, where <version> is the latest version

http://code.google.com/p/selenium/downloads/list

ios will required xcode 

- working with android 
    + emulator with android sdk, http://developer.android.com/sdk/index.html
    
    + download selenium android webdriver 
    + install command prompt and start emulator device 
    <path to>/android_sdk/platform-tools/adb devices

    + take serial number 
    + install adnroid sdk with 
    $ adb -s <serialId> -e install -r  android-server.apk

    + on device the webdriver icon will displayed if successed 

- using the android driver 
    + open command prompt 
    + start the server syntax 
    $ adb shell am start -a android.intent.action.MAIN -n <package>/<activity class>
    
    + touching the app 
    $ db shell am start -a android.intent.action.MAIN -n
    
    + forward all the HTTP traffic to the device or emulator 
    $ adb -s <serialId> forward tcp:8080 tcp:8080

    + write the tests 
import junit.framework.TestCase;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.android.AndroidDriver;
public class TestChapter7 {
	WebDriver driver;
	 @ Before public void setUp() {
		driver = new AndroidDriver();
		driver.get("http://book.theautomatedtester.co.uk/chapter4");
	}
	 @ After public void tearDown() {
		driver.quit();
	}
	 @ Test public void testExamples() {
		WebElement element = driver.findElement(By.id("nextBid"));
		element.sendKeys("100");
	}
}

- for ios check https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/iOS_Simulator_Guide/


# Getting started with the selenium grid 
- selenium grid is allowed teams to set up a number of selenium instances and then have one central point to send your selenium commands to 

selenium grid hub <---> selenium grid node0 + selenium server <-> webdriver <-> browser 
^                              |-> selenium grid node1 + selenium server <-> webdriver <-> browser 
|                              \-> selenium grid nodeN...
|
v
client 

- setting up the selenium grid hub 
    + open command prompt 
    $ java -jar selenium-server-standalone-x.xx.xx.jar -role hub
    
    + view the grid hub in browser with  http://nameofmachine:4444/grid/console
    
    + adding a server with the defaults
    selenium server will try and use 5555 port 
    
    execute command to register server to hub 
    $ java -jar selenium-server-standalone-2.20.0. jar -role node  -hub http://localhost:4444/grid/register
    
    
- setting up the selenium grid remote control register different machine 
$ java -jar selenium-server-standalone.jar -role node  -hub http://<name of server>:4444/grid/register 

We learned about the –hub argument that is needed when launching the Selenium Server. 

the grid console page will display all the regsited servers 

- setting the environment when starting selenium remote control 
$ java -jar selenium-server-standalone.jar -role node  -hub http://localhost:4444/grid/register -browser browserName="internet explorer",maxInstances=1,platform=WINDOWS

- using selenium grid 1 with your yaml file with argument -gridlYml with content 
hub:  
port: 4444  
remoteControlPollingIntervalInSeconds: 180
sessionMaxIdleTimeInSeconds: 300  
environments:    
    - name:    "Firefox on Windows"      
    browser: "*firefox"

- using selenium grid 1 configuration 
$ java -jar selenium-server-standalone.jar -role hub -grid1Yml selenium-grid-1.0.8/grid_configuration.yml

- writing tests against the grid 
    + working against selenium grid is exactly the same as working with selenium webdrivers RemoteWebDriver 
    create a new test file 
    populate the file with a test script that accesses an item on the grid 
    
import org.junit. * ;
import org.openqa.selenium. * ;
import org.openqa.selenium.firefox. * ;
import java.io.File;
import java.util.Dictionary;
public class TestExample1 {
	WebDriver driver;
	 @ Before public void setUp() {
		DesiredCapabilities capability = DesiredCapabilities.firefox();
		capability.setBrowserName("firefox"); // Set the platform we want our tests to run on
		capability.setPlatform("LINUX");
		driver = new RemoteWebDriver(new URL("http://<grid hub>:4444/wd/hub"), capability);
		driver.get("http://book.theautomatedtester.co.uk/chapter1");
	}
	 @ After public void tearDown() {
		driver.quit();
	}
	@ Test public void testExamples() { // We will put examples in here  }
}
        
- running test in parallel 
    + open your testng xml config file 
    + add parallel=methods to the suite node 
    + add thread-count=3 to the suite node 
    + right click the configuration file in IDEA and run the tests 
        

# Advanced user interactions 
- advanced user interactions allows us to build complex interactions such as holding down control and clicking, dragging, etc 

- keyboard 
void sendKeys(CharSequence..., keysToSend), similar to existing sendKeys(...)
void pressKey(Keys keyToPress), this sends a key press only without releasing 
void releaseKey(Keys keyToRelease), releases a modifier key 

- mouse allows for mouse clicks, double-clicks and context clicks as well as moving 
void click(WebElement onElement)
doubleClick
mouseDown 
mouseMove 
mouseMove(WebElement toEelement, long xOffset, long yOffset)
contextClick, performs a context-click(right-click) on an element 

- actions class allows us to build a chain of actions that we would like to perform, such as "press shift and typing something and then release" 

// Create Actions object passing in a WebDriver object
Actions builder = new Actions(driver);
// Chain some calls together and call build
Action dragAndDrop = builder.clickAndHold(someElement)
                                                 .moveToElement(otherElement)
                                                 .release(otherElement).build();
// Perform the actions
dragAndDrop.perform();

 - drag and drop
WebDriver driver = new FirefoxDriver();
driver.get("http://www.theautomatedtester.co.uk/demo2.html");
WebElement someElement = driver.findElement(By.xpath("//div[contains(@class,'draggable')]"));
WebElement otherElement = driver.findElement(By.className("droppable"));
Actions builder = new Actions(driver);
Action dragAndDrop = builder.clickAndHold(someElement)
                                     .moveToElement(otherElement)
                                     .release(otherElement).build();
dragAndDrop.perform();

- moving
WebDriver driver = new FirefoxDriver();
driver.get("http://www.theautomatedtester.co.uk/demo2.html");
WebElement drag = driver.findElement(By.className("draggable"));
Actions builder = new Actions(driver);
Action dragAndDrop = builder.dragAndDropBy(drag, 10, 20).build();
dragAndDrop.perform();

- context click 
WebDriver driver = new FirefoxDriver();
driver.get("http://book.theautomatedtester.co.uk/multi-select.html");
Actions builder = new Actions(driver);
WebElement element = driver.findElement(By.tagName("body"));
Action contextClick = builder.contextClick(element).build();
contextClick.perform();

- clicking on multiple items in a select elemeent, choose a number of items in the selection 
var driver = new FirefoxDriver();
driver.get("http://book.theautomatedtester.co.uk/multi-select.html");
Actions builder = new Actions(driver);
WebElement select = driver.findElement(By.xpath("//select[2]"));
List < WebElement > options = select.findElements(By.tagName("option"));
Action multipleSelect = builder.keyDown(Keys.SHIFT).click(options.get(0)).click(options.get(2)).build();
multipleSelect.perform();

- click and holding down mouse, this may encounter in a paint website 
WebDriver driver = new FirefoxDriver();
driver.get('http://www.theautomatedtester.co.uk/demo1.html')Actions builder = new Actions(driver);
WebElement canvas = driver.findElement(By.id("tutorial"));
Action dragAndDrop = builder.clickAndHold(canvas).moveByOffset(-40, -60).moveByOffset(20, 20).moveByOffset(100, 150).release(canvas).build();
dragAndDrop.perform();

- remote webdriver 
import java.io.File;
import java.net.URL;

import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

public class Testing {
    
    public void myTest() throws Exception {
        WebDriver driver = new RemoteWebDriver(
                                new URL("http://localhost:4444/wd/hub"), 
                                DesiredCapabilities.firefox());
        
        driver.get("http://www.google.com");
        
        // RemoteWebDriver does not implement the TakesScreenshot class
        // if the driver does have the Capabilities to take a screenshot
        // then Augmenter will add the TakesScreenshot methods to the instance
        WebDriver augmentedDriver = new Augmenter().augment(driver);
        File screenshot = ((TakesScreenshot)augmentedDriver).
                            getScreenshotAs(OutputType.FILE);
    }
}

# Working with HTML5 
- application cache 
    + Selenium WebDriver has AppCacheStatusenum that represents the current status of the application cache
    UNCACHED 
    IDLE 
    CHECKING 
    DOWNLOADING 
    UPDATEREADY 
    OBSOLETE 
    
    + getting the current status of application cache 
AppCacheStatus status = (ApplicationCache) driver).getStatus();

importorg.junit. * ;
importorg.openqa.selenium. * ;
public class TestChapter10 {
	WebDriver driver;
	 @ Before 
     public void setUp() {
		driver = new AndroidDriver();
		driver.get("http://book.theautomatedtester.co.uk/");
	}
	 @ After 
     public void tearDown() {
		driver.quit();
	}
	 @ Test 
     public void testAppCacheStatus() {
		AppCacheStatus status = (ApplicationCache)driver).getStatus();
		assertEqual(status AppCacheStatus.UNCACHED);
	}
}
    
- browser connections, seeing if a browser is online during a test can be quite useful when we are testing how our application works offline 
    + checking the browser status 
assertTrue(((BrowserConnection) driver).isOnline());

importorg.junit. * ;
importorg.openqa.selenium. * ;
public class TestChapter10 {
	WebDriver driver;
	 @ Before 
     public void setUp() {
		driver = new AndroidDriver();
		driver.get("http://book.theautomatedtester.co.uk/");
	}
	 @ After 
     public void tearDown() {
		driver.quit();
	}
	 @ Test 
     public void testBrowserConnection() {
		assertTrue(((BrowserConnection)driver).isOnline());
	}
}

    + setting browser offline or online 
((BrowserConnection) driver).setOnline(false);

importorg.junit. * ;
importorg.openqa.selenium. * ;
public class TestChapter10 {
	WebDriver driver;
	 @ Before 
     public void setUp() {
		driver = new AndroidDriver();
		driver.get("http://book.theautomatedtester.co.uk/");
	}
	 @ After 
     public void tearDown() {
		driver.quit();
	}
	 @ Test 
     public void testBrowserConnectionOnline() {
		assertTrue(((BrowserConnection)driver).isOnline());
	}
	 @ Test 
     Public void testTurnOffConnectivity() {
		BrowserConnectionnetworkAwareDriver = (BrowserConnection)driver;
		networkAwareDriver.setOnline(false);
		assertFalse(networkAwareDriver.isOnline());
		networkAwareDriver.setOnline(true);
		assertFalse(networkAwareDriver.isOnline());
	}
}

- web storage 
    + local storage 
LocalStoragestorageDriver = (LocalStorage)driver;
storageDriver.size(); // returns 0 if there is nothing in there

importorg.junit. * ;
importorg.openqa.selenium. * ;
public class TestChapter10 {
	WebDriver driver;
	 @ Before 
     public void setUp() {
		driver = new AndroidDriver();
		driver.get("http://book.theautomatedtester.co.uk/    localStorage.html");
	}
	 @ After 
     public void tearDown() {
		driver.quit();
	}
	 @ Test 
     public void testShouldReturnCurrentLocalStorageSize() {
		assertEqual(0, ((LocalStorage)driver).size();
    }
}
    
    + session storage 
SessionStorage storage = (SessionStorage)driver;
assertEquals(0, storage.size());

importorg.junit. * ;
importorg.openqa.selenium. * ;
public class TestChapter10 {
	WebDriver driver;
	 @ Before 
     public void setUp() {
		driver = new AndroidDriver();
		driver.get("http://book.theautomatedtester.co.uk/    localStorage.html");
	}
	 @ After 
     public void tearDown() {
		driver.quit();
	}
	 @ Test 
     public void testShouldReturnCurrentLocalStorageSize() {
		assertEqual(0, ((SessionStorage)driver).size();
    }
}
	+ websql


# Advanced Topics 
- necessary items 
    + install Browsermob Proxy: https://github.com/webmetrics/browsermob-proxy/downloads
    
    + XVFB, only works on linux 
    $ sudo apt-get install xvfb 
- capturing screenshots 
    + require library 
import static openqa.selenium.OutputType.*;

    + get snapshot 
driver.get(http : //book.theautomatedtester.co.uk);
String screenshotBase64 = ((Screenshot)driver).getScreenshotAs(base64);

    + saving the screenshot to bytes 
driver.get(http://book.theautomatedtester.co.uk);
Bytes screenbytes = ((Screenshot)driver).getScreenshotAs(bytes);

    + saving a screenshot to file 
driver.get(http://book.theautomatedtester.co.uk);
File savedImage = ((Screenshot)driver).getScreenshotAs(file);
    
- using XVFB with selenium, If you want to push the running of your tests to the background, you need to use XVFB (X11 Virtual Frame Buffer).
    + setup XVFB server 
    $ Xvfb :1 -screen 0 1600x1200x32
    
    + run test 
- working with browsermob proxy, BrowserMob Proxy allows you to control the way traffic is filtered to the browser
    + make sure start the proxy 
    + ad browsermob jar files to project and use 
    ProxyServer proxy = New ProxyServer(9876);
    proxy.start();
    ...
    proxy.stop()

    + capture network traffic 
FirefoxProfile profile = new FirefoxProfile();
profile.setProxy(proxy.seleniumProxy);
WebDriver driver = new FirefoxDriver(profile);
proxy.newHar("PageName");
driver.get("http://book.theautomatedtester.co.ukproxy.getHar();


# Migrating from remote control to webdriver 
- Selenium Core development team has created the WebDriverBackedSelenium object that we can use. This allows us to create our tests with Selenium Remote Control syntax that we already know but have some of the benefits of WebDriver with a very minor change to what you currently have. 

String baseUrl = "http://book.theautomatedtester.co.uk";
String remoteControl = "localhost";
Int port = 4444;
String browser = "*firefox";
Selenium selenium = new DefaultSelenium(remoteControl, port, browser, baseUrl);
selenium.start();
selenium.open("/");
selenium.click("link=chapter1"); // rest of the test code

//previous codes need to be changed to 
WebDriver driver = new FirefoxDriver();
String baseUrl = "http://book.theautomatedtester.co.uk";
Selenium selenium = new WebDriverBackedSelenium(driver, baseUrl);
selenium.open("/");
selenium.click("link=chapter1"); // rest of the test code

- it is not provide full features as webdriver 




