Python for Excel=Felix Zumstein;Note=Erxin 


# Introduce to python 


# Why python for excel 
- extensively, including pandas, OpenPyXL, and xlwings

- package management 

conda                       pip 
conda list                  pip freeze 
conda install package       pip install package 
conda update package        pip install --upgrade package 

- jupyter notebooks 

(base)> cd C:\Users\username\python-for-excel
(base)> jupyter notebook

- keyboard shortcuts 

Shift+Enter       Run the cell (works also in edit mode)

↑ (up-arrow)      Move cell selector up

↓ (down-arrow)    Move cell selector down

b                 Insert a new cell below the current cell

a                 Insert a new cell above the current cell

dd                Delete the current cell (type two times the letter d)

m                 Change cell type to Markdown

y                 Change cell type to code


- requires 

a local installation of excel 

binder is a serviceprovided py project jupyter 

kaggle notebooks a platform for data science 

google colab, a google's notebook platform 

- text editor 

sublime 

notepad++ 

vim or emacs 

- ides 

pycharm 

spyder 

jupyterlab, webbased ide 

wing python ide 

komodo ide 

pydev, python envivronment base on eclipse 



# Introduction to pandas 

# Numpy fundamentals 
- array axies 

 -> axies 1 
|
V 
axies 0 

- array.dtype 

- universal functions, ufunc 

np.arange(2 * 5).reshape(2, 5)




# Time series analysis with panda
- data frame and series 

series is axis 0 numpy array 


dataframe is two dimension array or we can say it's maxtrix 

- read excel 

```
import pandas as pd 

pd.read_excel("xl/course_participants.xlsx")
```

- An index will allow pandas to look up data faster and is essential for many common operations

- select data  which rows and columns you want to retrieve:

df.loc[row_selection, column_selection]


Selection	                        Return Data Type	                    Example
Single value                        Scalar                                  df.loc[1000, "country"]

One column (1d)                     Series                                  df.loc[:, "country"]

One column (2d)                     DataFrame                               df.loc[:, ["country"]]

Multiple columns                    DataFrame                               df.loc[:, ["country", "age"]]

Range of columns                    DataFrame                               df.loc[:, "name":"country"]

One row (1d)                        Series                                  df.loc[1000, :]

One row (2d)                        DataFrame                               df.loc[[1000], :]

Multiple rows                       DataFrame                               df.loc[[1003, 1000], :]

Range of rows                       DataFrame                               df.loc[1000:1002, :]

- select by position 

Single value    Scalar      df.iloc[1, 2]


df2.replace("USA", "U.S.")
 

- unique and duplicate data 

df["country"].is_unique

- view with copy 

whether loc and iloc return views or copies, which makes it one of the more confusing topics.

- concatenating, concat glues DataFrames together along the rows and aligns the columns automatically

- descriptive statistics and data aggregation, the groupby method and the pivot_table function.


df.groupby(["continent"]).mean()


pivot = pd.pivot_table(sales,
                    index="Fruit", columns="Region",
                    values="Revenue", aggfunc="sum",
                    margins=True, margins_name="Total")
                    
- matplotlib 

- Plotly is a JavaScript-based library and can—since version 4.8.0

- other libraries 

Seaborn 

Bokeh 

Altair 

HoloViews 

- import and export data 

pd.read_csv       pd.to_csv 
pd.read_json 
pd.read_html 
pd_read_excel 
pd.read_sql       ...




 

# Excel manipulate with pandas 
- read 

```
import pandas as pd
df = pd.read_excel("sales_data/new/January.xlsx")
df.info()

```

- ExcelFile Class
stores = pd.ExcelFile("xl/stores.xlsx")



# Programming the excel application with Xlwings 
- packages 

    + excel file format xlsx, xlsm, xltx, xltm
    
    OpenPyXL

    + excel file format xlsx, xlsm  
    
    XlsxWriter

    + excel file xlsb

pyxlsb

    + excel file format supported

    + xls, xlt 

xlrd

xlwt

xlutils

- example 

```
import openpyxl
from openpyxl.drawing.image import Image
from openpyxl.chart import BarChart, Reference
from openpyxl.styles import Font, colors
from openpyxl.styles.borders import Border, Side
from openpyxl.styles.alignment import Alignment
from openpyxl.styles.fills import PatternFill
import excel

# Instantiate a workbook
book = openpyxl.Workbook()

# Get the first sheet and give it a name
sheet = book.active
sheet.title = "Sheet1"

# Writing individual cells using A1 notation
# and cell indices (1-based)
sheet["A1"].value = "Hello 1"
sheet.cell(row=2, column=1, value="Hello 2")

# Formatting: fill color, alignment, border and font
font_format = Font(color="FF0000", bold=True)
thin = Side(border_style="thin", color="FF0000")
sheet["A3"].value = "Hello 3"
sheet["A3"].font = font_format
sheet["A3"].border = Border(top=thin, left=thin,
                         right=thin, bottom=thin)
sheet["A3"].alignment = Alignment(horizontal="center")
sheet["A3"].fill = PatternFill(fgColor="FFFF00", fill_type="solid")

# Number formatting (using Excel's formatting strings)
sheet["A4"].value = 3.3333
sheet["A4"].number_format = "0.00"

# Date formatting (using Excel's formatting strings)
sheet["A5"].value = dt.date(2016, 10, 13)
sheet["A5"].number_format = "mm/dd/yy"

# Formula: you must use the English name of the formula
# with commas as delimiters
sheet["A6"].value = "=SUM(A4, 2)"

# Image
sheet.add_image(Image("images/python.png"), "C1")

# Two-dimensional list (we're using our excel module)
data = [[None, "North", "South"],
     ["Last Year", 2, 5],
     ["This Year", 3, 6]]
excel.write(sheet, data, "A10")

# Chart
chart = BarChart()
chart.type = "col"
chart.title = "Sales Per Region"
chart.x_axis.title = "Regions"
chart.y_axis.title = "Sales"
chart_data = Reference(sheet, min_row=11, min_col=1,
                    max_row=12, max_col=3)
chart_categories = Reference(sheet, min_row=10, min_col=2,
                          max_row=10, max_col=3)
# from_rows interprets the data in the same way
# as if you would add a chart manually in Excel
chart.add_data(chart_data, titles_from_data=True, from_rows=True)
chart.set_categories(chart_categories)
sheet.add_chart(chart, "A15")

# Saving the workbook creates the file on disk
book.save("openpyxl.xlsx")
```

- pandas can also read and write file with basic data formats 




# Execel automation 
- xlwings can complete ui automation and support excel vba addins 

An app contains the books collection

A book contains the sheets collection

A sheet gives access to range objects and collections such as charts

A range contains one or more contiguous cells as its items

- python sql library 

https://sqlite.org/

database connection 

https://sqlalchemy.org/



# Python powered excel tools 
- install xlwings addin 

$ xlwings addin install

- quick start project 

$ xlwings quickstart first_project

- add RunPython method into excel vba 

Sub SampleCall()
    RunPython "import hello; hello.hello_world()"
End Sub

- reference 

https://oreil.ly/QWz7i



# The python package tracker 

# User defined functions, UDFs 
-  enable excel vba 

Excel: go to File > Options > Trust Center > Trust Center Settings > Macro Settings and activate the checkbox to “Trust access to the VBA project object model,”

- google trends 

https://oreil.ly/G6TpC

- example 

```
import xlwings as xw
import pandas as pd
import matplotlib.pyplot as plt


@xw.func
@xw.arg("df", pd.DataFrame)
def plot(df, name, caller): 1
    plt.style.use("seaborn") 2
    if not df.empty: 3
        caller.sheet.pictures.add(df.plot().get_figure(), 4
                                  top=caller.offset(row_offset=1).top, 5
                                  left=caller.left,
                                  name=name, update=True) 6
    return f"<Plot: {name}>" 7
```




# Conda environment 
- create a new environment with the name xl38 that uses Python 3.8:

(base)> conda create --name xl38 python=3.8

conda install lxml=4.6.1 matplotlib=3.3.2 notebook=6.1.4 openpyxl=3.0.5
                      pandas=1.1.3 pillow=8.0.1 plotly=4.14.1 flake8=3.8.4
                      python-dateutil=2.8.1 requests=2.24.0 sqlalchemy=1.3.20
                      xlrd=1.2.0 xlsxwriter=1.3.7 xlutils=2.0.0 xlwings=0.20.8
                      xlwt=1.3.0

- Disable Auto Activation for base environment 

If you don’t want the base environment to be activated automatically whenever you fire up an Anaconda Prompt, you can disable it: this will require you to type conda activate base


$ conda config --set auto_activate_base false

