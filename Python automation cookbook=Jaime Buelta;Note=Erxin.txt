Python automation cooke book=Jaime Buelta;Note=Erxin

# Reference 
https://learning.oreilly.com/library/view/python-automation-cookbook/9781800207080/Text/Chapter_1.xhtml#_idParaDest-28




# Begin automation journey 
- libraries 
request 
https://requests.readthedocs.io/en/master/.

delorean
http://delorean.readthedocs.io/en/latest/

https://requests.readthedocs.io/en/master/.

- install packages 

$ pip install -r requirements.txt

- yank the modules into a rqeuirement.txt 

At any point, the freeze command can be used to display all of the installed modules. 

- format parameters 

result = template.format(*parameters)

- extracting data from structured strings 

>>> import delorean
>>> from decimal import Decimal

- Python called parse (https://github.com/r1chardj0n3s/parse), which allows us to reverse format strings

```
LOG = '[2018-05-06T12:58:00.714611] - SALE - PRODUCT: 1345 - PRICE: $09.99'
FORMAT = '[{date}] - SALE - PRODUCT: {product} - PRICE: ${price}'
result = parse(FORMAT, LOG)
result
<Result () {'date': '2018-05-06T12:58:00.714611', 'product': '1345', 'price': '09.99'}>
result['date']
'2018-05-06T12:58:00.714611'
result['product']
'1345'
```


# Automating tasks made easy 
- send email 

```
import smtplib 
from email.message import EmailMessage
def main(to_email, server, port, from_email, password):
    print(f'With love, from {from_email} to {to_email}')
    # Create the message
    subject = 'With love, from ME to YOU'
    text = '''This is an example test'''
    msg = EmailMessage()
    msg.set_content(text)
    msg['Subject'] = subject
    msg['From'] = from_email
    msg['To'] = to_email
    # Open communication and send
    server = smtplib.SMTP_SSL(server, port)
    server.login(from_email, password)
    server.send_message(msg)
    server.quit()
```

- argparser 
- logging 
- configparser
- Cron is an old-fashioned but reliable way of executing commands. It has been around since the 1970s in Unix

The task should be as self-contained as possible to avoid problems with environment variables, such as using the wrong Python interpreter, or what path should execute.

It is Unix-specific.

Only fixed periodic times are available.

It doesn't control how many tasks run at the same time. Each time the countdown goes off, it creates a new task. For example, a task that takes 1 hour to complete, and that is scheduled to run once every 45 minutes, will have 15 minutes of overlap

```
import argparse
import sys
from datetime import datetime
import configparser
def main(number, other_number, output):
    result = number * other_number
    print(f'[{datetime.utcnow().isoformat()}] The result is {result}', 
          file=output)
if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--config', '-c', type=argparse.FileType('r'),
                        help='config file',
                        default='/etc/automate.ini')
    parser.add_argument('-o', dest='output', type=argparse.FileType('w'),
                        help='output file',
                        default=sys.stdout)
    args = parser.parse_args()
    if args.config:
        config = configparser.ConfigParser()
        config.read_file(args.config)
        # Transforming values into integers
        args.n1 = int(config['ARGUMENTS']['n1'])
        args.n2 = int(config['ARGUMENTS']['n2'])
    main(args.n1, args.n2, args.output)
```

- building your first web scraping application 



# first web scraping application 
- download webpage with request 

- parsing html with beautifulsoup4

- crawling the web 

urllib.parse 

subscribing to feeds using the feedparser module 

- access web api 

>>> result = requests.get('https://jsonplaceholder.typicode.com/posts/2')
>>> result

- selenium webdriver 

- password protected pages 

test this kind of authentication in https://httpbin.org.

- jinjia template 

- formatting text in markdown 

use the Dillinger online editor at https://dillinger.io/.

Mistune full docs are available here: http://mistune.readthedocs.io/en/latest/.

- create pdf with fpdf module 

different platforms: https://github.com/Belval/pdf2image#first-you-need-pdftoppm.

- watermarking and encrypting a pdf use the pdf2image module to transform PDF documents to PIL images. Pillow



# fun with spreadsheets 
- wring a csv spreadsheet 

- updating csv files 

- reading an excel sptreadsheet 

openpyxl module 

- updating an excel spreadsheet 

"openpyxl==3.0.3" >> requirements.txt

- creating charts 

>>> data = [
...     ('Name', 'Admissions'),
...     ('Gone With the Wind', 225.7),
...     ('Star Wars', 194.4),
...     ('ET: The Extraterrestrial', 161.0),
... ]
>>> sheet = xlsfile['Sheet']
>>> for row in data:
...   sheet.append(row)
>>> chart = BarChart()
>>> chart.title = "Admissions per movie"
>>> chart.y_axis.title = 'Millions'
>>> data = Reference(sheet, min_row=2, max_row=4, min_col=1, max_col=2)
>>> chart.add_data(data, from_rows=True, titles_from_data=True)

- Creating a macro in LibreOffice
LibreOffice is a free productivity suite that's an alternative to MS Office and other office packages

- cleaning and processing data, We will use the parse module and the delorean module. We should install the modules 

delorean documentation can be found online at https://delorean.readthedocs.io/.



# Develop stunning graphs 
- matplotlib 



# Dealing with communication channels 
- mistune module, which will compile Markdown documents into HTML.
- send email with smtp 

use the smtplib module, which is part of Python's standard library.

>>> import smtplib
>>> from email.mime.multipart import MIMEMultipart
>>> from email.mime.text import MIMEText

>>> with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
...     server.login(USER, PASSWORD)
...     server.sendmail(sent_from, send_to, msg.as_string())

- reading email 

We'll use the IMAP4 standard, which is the most commonly used standard for reading emails.

Import the imaplib and email modules:
>>> import imaplib
>>> import email
>>> from email.parser import BytesParser, Parser
>>> from email.policy import default

Connect to the email server:
>>> mail = imaplib.IMAP4_SSL('imap.gmail.com')
>>> mail.login(USER, PASSWORD)

Select the inbox folder:
>>> mail.select('inbox')

Read all email UIDs and retrieve the latest received email:
>>> result, data = mail.uid('search', None, 'ALL')
>>> latest_email_uid = data[0].split()[-1]
>>> result, data = mail.uid('fetch', latest_email_uid, '(RFC822)')
>>> raw_email = data[0][1]

Parse the email into a Python object:
>>> email_message = BytesParser(policy=default).parsebytes(raw_email)

Display the subject and sender of the email:
>>> email_message['subject']
'[Ref ABCDEF] Subject: Product A'
>>> email.utils.parseaddr(email_message['From'])
('Sender name', 'sender@gmail.com')

- reference 

done through IMAP4. Check RFC 3501 at https://tools.ietf.org/html/rfc3501 and RFC 6851 at https://tools.ietf.org/html/rfc6851 for further details

- adding subscribers to an email newsletter. A well-known one is MailChimp (https://mailchimp.com/).

recommended way is to use ones available on the market. A well-known one is MailChimp (https://mailchimp.com/).

- API key as the password, and any user (as described by the MailChimp documentation: https://developer.mailchimp.com/documentation/mailchimp/guides/get-started-with-mailchimp-api-3/).

- sending notfications via email 

we will use Mailgun (https://www.mailgun.com), which is able to send these kinds of emails, as well as communicate responses.

- find the instructions on how to do this here: https://documentation.mailgun.com/en/latest/quickstart-sending.html#verify-your-domain.

- producing sms messages 

 create an account for Twilio at https://www.twilio.com/. Go to the page and register a new account.
 
 

# Producing SMS message 
-  create an account for Twilio at https://www.twilio.com/. Go to the page and register a new account.

https://support.twilio.com/hc/en-us/articles/223180048-Adding-a-Verified-Phone-Number-or-Caller-ID-with-Twilio.

>>> from twilio.rest import Client
>>> ACCOUNT_SID = 'Your account SID'
>>> AUTH_TOKEN = 'Your secret token'
>>> FROM = '+353 12 345 6789'
>>> client = Client(ACCOUNT_SID, AUTH_TOKEN)
>>> message = client.messages.create(body='This is a test message from Python!', 
                                     from_=FROM, 
                                     to='+your authorised number')
                                     
available_numbers = client.available_phone_numbers("IE").local.list()
number = available_numbers[0]
new_number = client.incoming_phone_numbers.create(phone_number=number.phone_number)                         

- receiving SMS message

nables services such as delivering information on request (for instance, send INFO GOALS to receive the results from the Soccer League)

an account in Heroku.
You'll need to install the command-line interface for Heroku (instructions for all platforms can be found at https://devcenter.heroku.com/articles/getting-started-with-python#set-up) and then log in to the command line:


app.py with the one in GitHub at https://github.com/PacktPublishing/Python-Automation-Cookbook-Second-Edition/blob/master/Chapter09/app.py. The key part of this is to obtain the body of the request and send it back with some extra information.

- Creating a Telegram bot
Telegram Messenger is an instant messaging app that has good support for creating bots. Bots are small applications that aim to produce automatic conversations. The big promise of bots

- done through an interface called the BotFather, which is a Telegram special channel that allows us to create a new bot. You can access the channel here: https://telegram.me/botfather.



# Automate your marketing campaign 
- presented in this book, delorean, requests, and BeautifulSoup. We need to add them to our virtualÂ environment
- easily learned. A good introduction article is https://thebestvpn.com/cryptography/. Python also has a good number of cryptographic functions; see the documentation at https://docs.python.org/3/library/crypto.html



# Machine learning for automation 
- analyzing with google cloud vision ai 
- analyzing text with google cloud natural language 

```
import argparse
from google.cloud import language
from google.cloud import translate_v2 as translate
from google.cloud.language import enums
from google.cloud.language import types
def main(image_file):
    content = image_file.read()
    print(f'Text: {content}')
 document = types.Document(content=content,
                              type=enums.Document.Type.PLAIN_TEXT)
    client = language.LanguageServiceClient()
    response = client.analyze_sentiment(document=document)
    lang = response.language
    print(f'Language: {lang}')
    sentiment = response.document_sentiment
    score = sentiment.score
    magnitude = sentiment.magnitude
    print(f'Sentiment Score (how positive the sentiment is): {score}')
    print(f'Sentiment Magnitude (how strong it is): {magnitude}')
    if lang != 'en':
        # Translate into English
        translate_client = translate.Client()
        response = translate_client.translate(content, 
  target_language='en')
        print('IN ENGLISH')
        print(response['translatedText'])
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(dest='input', type=argparse.FileType('r'),
                        help='input text')
    args = parser.parse_args()
    main(args.input)
```



# Automatic testing routines 
- ytest as a tool to run various tests.
- using mock  
- prepare testing senarios 
- running test selectively 


# Debugging technology 
- globals() will return all the lobal defined variables 
- dir will display all attribtributes of the object 

- debug using break point 

Add breakpoint(), after the while statement, just before line 7, resulting in the following:

entering into the interactive Pdb mode

-  set trace 

import pdb;
pdb.set_trace()

- an internet server (httpbin.org, a test site) to get them back

Done. 