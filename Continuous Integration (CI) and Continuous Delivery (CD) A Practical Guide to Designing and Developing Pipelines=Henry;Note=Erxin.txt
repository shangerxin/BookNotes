Continuous Integration (CI) and Continuous Delivery (CD): A Practical Guide to Designing and Developing Pipelines=Henry;Note=Erxin 


# CI/CD concepts 
- continuous delivery 3.0 maturity model 
                    foundation              novice              intermediate                    advanced                                        expert
intelligence        custoer behaviour       basic monitor       advanced customer monitor       all metrics and reports                         real time collection
                    feedback server         feedback            a/b testing in place            decision making based on detailed analytics     ai 

planning            centralized backlog     managed by digital  automatic backlog item          automatic proposewd backlog                     backlog with ai 
                                            backlog             creation 

integration         centralized version     nightly builds      automatic build on commit       staged integration                              CI as service 
                    control                 workflow orchestrator                               usage of microsewrvices                         automatic scale 
                    centralized build       ci report           one build for all envs          realtime integration reporting 
                    server 

testing             centralized ut          ut in CD pipeline   integration test in pipeline    acceptance tests in pipeline                    CI as service 
                    manual ut               automatic integration                               automatced performance and security test        automatic scale 
                                            test start manually                                 start by manually 
                                                                automated acceptance tests      behaviour driven development 
                                                                started manually 
                                            
deploymnet          deployment server       basic deployment    automatic deployment pipline    zero downtime deplyments                        deployments on 
                                            scripts             from build to product                                                           on endless scalable
                                            automatic deployment                                                                                platforms 
                                            to test env after 
                                            successful build 
                                            
                                            
# Requirement analysis 
- requirement has a owner 
- way of working 

the way of working of the business organization 

the team's branching stratgy do they use a trunk-based workflow, a feature branch workflow, or the “old-fashioned” Gitflow

test strategy of the team, ci/cd process, unit test, integration tests, funtional tests, regression tests, manual tests, load tests, stress tests, performance tests, break tests and preproduction/staging tests 

release strategy, defines the candence to release artifacts 

the production deployment strategy 

- using simple branching strategy 

- keep freature branches short lived 

- choose the release strategy you want, but keep the mainline production ready 

- preform manual testing only if needed 

- create a pipeline per microservice 

- automate the creation of ephemeral test environment 

- Don’t re-create test environments in every pipeline run.

- Automate the creation of ephemeral test environments.

- Use short feedback loops, but don’t overload teams with too much information

- Refine access by setting permissions for a user or group.

-  drift detection.

Drift detection checks whether the actual infrastructure is still the same as compared to the infrastructure code

- Perform a vulnerability analysis on third-party libraries.

Log4J versions 2.x until 2.16 contained vulnerability CVE-2021-44228. This was a good example of a vulnerable third-party library.

- Prevent deletion of resources.

- Roll back or roll forward if a deployment goes bad.

- Test data is anonymous.

- Pipelines are scanned for compliance.

-  Store binaries (artifacts and dependencies) in an artifact repository.

- Keep your pipeline code manageable.

- Build once, run anywhere.

- Define key performance indicators (KPIs) that make sense.

Execution time of each stage in the pipeline

Queued pipeline distribution per day

Test success rate

The number of failed builds per day

Availability of the ALM platform/integration server per monthaasfasdf

- the BPMN diagrams help you understand the software delivery process flow, the individual stages and tasks in the process, and the interaction with other systems.

BPMN Elements Overview BPMN uses various elements—icons—to model business flows.




# Pipeline design
- gitflow 

    + feature branch 
    
    validate entry > execute build > perform unittests > package artifact > publish artifact > notfiy 
    
    + develop 
    
    validate entry > execute build > perform unittests > analysze code > package artifact > publish artifact > provision test environment >  notfiy 
    
    deploy artifact to test > perform test 
    
    + release 
    
     validate entry > execute build > perform unittests > analysze code > package artifact > publish artifact > provision test environment >  notfiy 
     
     deploy artifact to test > perform test > validate infrastructure compliance > perform dual control > provision production environment > deploy artifact to production 
     
     + hotfix same as release 
     
- test strategy 

usability tests 
disaster tolerance tests 
end to end tests 
performance avaliability tests 
api tests 
pre-production/staging tests 
security tests 
regression and acceptance tests 
system tests 
integration tests 
contract tests 
unit tests 

- A/B Test Strategy

A/B testing is not a real deployment strategy at all. It is a way to test new features in production with a representative user group. In A/B testing, both the old version and the new version are active. Some requests are routed to the old version, and other requests are routed to the new version.


- caching 

Caching decreases the time to build an artifact. Different platforms have implemented caching in different ways. In one of the researched platforms (CircleCI), it is implemented as an integrated construct in the pipeline declaration and is accessed by using the save_cache and restore_cache keywords

- A matrix is used to declare an action using all permutations of variables declared in the matrix. The matrix implements a fan-out pattern and can be used for the implementation of a cross-platform build strategy.

- auto-cancel construct, all already running instances of the same pipeline are canceled if a new pipeline instance is started.

- A fail fast means that if a stage, job, or task fails, the whole pipeline stops immediately. 

- The secret must be

“injected” directly into the application or deployed as a file accompanied by the application. This is depicted in Figure 5-16.

-  This is a secure solution because the secret in the vault is accessible only by a trusted party: the app. This trust is based on security policies and other infrastructure measures.ll

- Pipeline of Pipelines (DevOps Assembly Line)



# Testing pipelines 
-  a few test types must be performed.
Unit (and integration) tests

Performance tests

Pipeline compliance and security tests

Acceptance tests



# Pipeline implementation 


# Operate and monitor 
- Check for almost expired certificates: The pipeline determines the expiration date of certificates according to a daily schedule.

- system monitor,  such as the following:
CPU usage

Memory usage

Disk usage

Network usage, like HTTP sessions and HTTP response times

Errors and logs

Threads and processes


- business monitor 

Lead time is the time measured from the moment a work item is created and the moment it becomes in a final state (Done)

Cycle time gives better insight into the performance of the team. It measures the time between a developer committing themselves to a work item and the moment the code for the particular feature has been developed and tested.

- security monitoring 



# Use case 
- Quality Gate
To prevent an incorrect release version from being deployed to production, an additional quality gate is added to the myapp-production-deployment pipeline.


# Reference 
[1]

Cambridge Bitcoin Electricity Consumption Index

https://ccaf.io/cbeci/index

[2]

Business Process Model and Notation

https://www.omg.org/spec/BPMN/2.0

[3]

Cloudbees CD

https://docs.cloudbees.com/docs/cloudbees-cd/10.0/

[11]

National Cyber Security Center

https://www.ncsc.gov.uk/

20]

Microsoft Teams: Webhooks and Connectors

https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-

	
Feature Management Systems

https://www.getunleash.io/

https://launchdarkly.com/