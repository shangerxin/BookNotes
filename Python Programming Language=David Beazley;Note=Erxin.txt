Python Programming Language=David Beazley;Note=Erxin

# Introduction 
# Working Environment 
- topics 
- interactive interpreter 
- project, catching the bus 
- reading command line arguments and making a script 
- debugging 
    + stop on error and run into interpreter
python -i *.py 

    + set break point with pdb 
import pdb; pdb.set_trace()

# Program structure and execution model 
- topics 
- project, mortgage calculator 
- project, formatted output and file/io 

# Text processing and files 
- topics 
- file and string basics 
- project reading from a file and performing a calculator 
- project using the csv module to read data 

# functions and errors handling 
- topics 
- defining and using simple functions 
- project, moving a script to a function 
- project, handling bad data and exception handling 
- project, function design considerations 

# data structures and data manipulation 
- topics 
- basic materials, tuples, lists, sets and dicts
- project, building a data structure from a file 
- data manipulation 
- example sorting and grouping 

# library functions and import 
- topics 
- module basics 
    + import a python script a module will be created all the global variable in the file are exposed 
    
    everything in a imported module are location in there own space 
    
    + the from * import * statement is still parse and execute all the python script and only expose desired property 
    
    it will not improve performance 
    
    + the global defined variable in a file is pinned relative to the python file 
    
    + duplicate import module will not run the module again 
    
    the cache is located at sys.modules which is a dict if you del the relative module then the import will re evaluate the moduel again 
    
    + the import statement will search the sys.path for the source code/module 
    
    alternative way is set a environment variable before run python 
    PYTHONPATH=..
    
    + check if the module is execute as main entrance 
    if __name__ == '__main__':
    
    every single module known it's own name when imported. the global variable is __name__ 
    
- project, writing a general purpose csv parsing module 
- making a package 


# Classes and objects 
- topics 
- introduction, from simple data structures to classes 
- understanding attribute access 
- advanced class methods and alternate constructors 
    + class only have a __init__ function 
    + use @classmethod which is like a static method 
    class Date(object):
        def __init__():
            pass 
            
        @classmethod 
        def from_string(class_type, s):
            return class_type()
    + use super 
    def __init__(*args, **argk):
        super().__init__(*args, **argk)
        
    + override parent method by redefine it 

    
# Inheritance 
- topics 
- inheritance concepts, multiple inheritance 
- inheritance in practice, building an extensible library 
- advanced inheritance 
- designing for inheritance 
- defensive programming with abstract base classes 
class FormatterAbstract(object):
    @abstractmethod 
    def row():
        raise NotImplementedError 

    + instance checking with 
    isinstance(object, ClassType)
        
- advanced, how inheritance actually works 
class Parent(object):
    def spam(self):
        print('parent.spam');
        
calss A(parent):
    def spam(self):
        print('A.spam')
        super().spam()
        
every class keep a reference to its parence ClassType.__mro__ till the root of the inheritance chain 

    + in multiple inheritance
class C(Parent):
    def spam(self):
        print('C.spam')
        super().spam()
    
class D(Parent):
    def spam(self):
        print('D.spam')
        super().spam()
    
class M(C, D):
    def spam(self):
        print('M.spam')
        super().spam()

    + any child class should be check before its parent 
    + if you have multiple parent, the parent will be checked based on the inheritance order 
    
    + super() function move the current class to the next __mro__ chain 
    
    
# python magic method(a.ka., speaking python)
- topics 
- background, use of magic methods to implement operators 
__add__ 
__mul__ 

these kinds of method called magic method which is used to provide operations 
- making objects printable and debuggable, override the magic method 

__repr__(self) for a class just like toString in c#. which will also be automatically called in interpreter
__str__(self) which used to get a nice formatted string. which will be used by print and string conversion

- making custom container object 
__len__ 
__getitem__ 
__iter__ 
- making a custom context manager, with statement 
lock = threading.Lock()
with lock:
    ...
    
    + create a context manager by our self which could be work with with statement 
    
class Manager(object):
    def __enter__(self):
        pass 
        
    def __exit__(self, ty, val, tb):
        pass 


# Encapsulation(owning the dot)
- topics 
- instance representation attribute access and naming conventions 

every python class instance have its own __dict__ contain all the attributes live 

the method of class are relative to the class type which also have its own __dict__ 

ClassType.__dict__['propertyName']

    + naming conventions of python indicate 
    self._value which is private 
    self.__value is only relative to the current class which will add additional prefix in the inherited class  

- managed attributes with properties 
class C(object):
    def __init__(*args, **kwargs):
        self._prop
        
    @property 
    def prop(self):
        return self._prop
        
    @prop.setter 
    def prop(self, new_value):
        self._prop = new_value 
        
        
- managed attributes with descriptors. which is used to provide elegant way to handling repeat logic for property or methods 

    + when access a property in python by a instance. python will first check if a property exist 
    
ins.__class__.__dict__['propertyName']

will get a property object 
hasattr(propertyInstance, '__get__')
propertyInstance.__get__(ins)

this is the dot operator do in the background 

    + override the __get__ __set__ method could provide a elegant way to 
    
class Integer(object):
    def __init__(self, name):
        self.name = name 
        
    def __get__(self, instance, cls):
        return instance.__dict__[self.name]
        
    def __set__(self, instance, value):
        if not instance(value, int):
            raise TypeError('Expected int')
            
        instance.__dict__[self.name] = value 
        
class Point(object):
    x = Integer('x')
    y = Integer('y')
    
    def __init__(self, x, y):
        self.x = x 
        self.y = y 
        
the Integer has to be class level. It is like a manager to overseeing 

    + more elegant way 
class Typed(object):
    expected_type = object 
    def __init__(self, name):
        self.name = name 
        
    def __get__(self, instance, cls):
        return instance.__dict__[self.name]
        
    def __set__(self, instance, value):
        if not instance(value, expected_type):
            raise TypeError('Expected int')
            
        instance.__dict__[self.name] = value     
        
class Integer(Typed):
    expected_type = int 

class Float(Typed):
    expected_type = float 

- object wrappers and proxies 
    + access a property is not exist 
    ins.__setattr__('attributeName', value)
    
    del ins.attributeName
    ins.__delattr__('attributeName')
    
    __getattr__
    
    override these functions to provide wrapper or proxy functionality 
    
    + override __getattr__ could provide a simulate inheritance 
    class ListLikeType(object):
        def __init__(self):
            self._holder = []
            
        def __getattr__(self, name):
            return getattr(self._holder, name)


# Higher order functions and closures 
- topics 
- functions as object, callback 
def func(callblack):
    callback()
- generating code with closures 
    + use function to generate the repetitive property declaration 

class Holding(object):
    def __init__(self, name, date, shares, price):
        self.name = name 
        
    @property 
    def name(self):
        return self._name
        
    @name.setter 
    def name(self, value):
        if not isinstance(value, str):
            raise TypeError('Expected string')
        self._name = value 
        
//we could change the previous redundancy definition to 
def typed_property(name, expected_type):
    private_name = '_' + name 
    
    @property 
    def prop(self):
        return getattr(self, private_name)
        
    @prop.setter 
    def prop(self, value):
        if not isinstance(value, expected_type):
            raise TypeError('Expected {}'.format(expected_type))
            
        setattr(self, private_name, value)
        
    return prop 
    
class Holding(object):
    name = typed_property('name', str)
    
    def __init__(self, name):
        self.name = name 
        
//a more improved version is 
Integer = lambda name: typed_property(name, int)
String = lambda name: typed_property(name, str)


# Metaprogramming and decorators 
- topics 
- background, function argument passing and calling conventions 
def foo(*args, **kwargs):
    pass 
data = (1,2,3)
foo(*data) #equal to foo(1,2,3)
    
- don't repeat your self, introducing decorators 

    + define a log function 
from functools import wraps 
def log(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        print('calling ', func.__name__)
        ret = func(*args, **kwargs)
        print('complete call with return', ret)
        return ret 
    return wrapper 
    
@log
def add(x, y):
    pass 
    
- decorators with arguments, use a wrapper function to provide a environment for the decorator function 

from functools import wraps 
def logformat(fmt):
    def log(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            print(fmt.format(func=func))
            ret = func(*args, **kwargs)
            print('complete call with return', ret)
            return ret 
        return wrapper 
    return log 
    
@logformat('calling {func.__name__}')
def add(x, y):
    pass 
    
or save in a local variable 

logged = logformat('calling {func.__name__}')

@logged 
def add(x, y):
    pass 
    
- class decorators 
def dec(cls):
    pass 
    
@dec 
class C(object):
    pass 
    
decorator also support class, for example add log for all the methods in a class definition 

vars function return a set of properties defined in a class 

def logmethod(cls):
    for key, value in list(vars(cls).items()):
        if callable(value):
            setattr(cls, key, logged(value))
            
    return cls 
    
@logmethod
class C(object):
    pass 
    
    + for the previous type property definition we could use decorator to reduce the repetitive 
def typed(cls):
    for key, value in vars(cls).items():
        if isinstance(value, Typed):
            value.name = key 
    return cls 
    
class Typed(object):
    def __init__(self, name=None):
        self.name = name 
        
    def __get__(self):
        pass 
        
    def __set__(self): #omit the validation
        pass 
    
class String(Typed):
    expected_type = str 
    
class Integer(Typed):
    expected_type = int 
    
@typed 
class Holding(object):
    name = String()
    shares = Integer()
    
    + implement validation with class decorator
def validate(**kwargs):
    def decorator(cls):
        for name, val in kwargs.items():
            setattr(cls, name, val(name))
        return cls 
    return decorator
    
@validate(name = String, shares = Integer)
class Holding(object):
    def __init__(self, name, shares):
        self.name = name 
        self.shares = shares 
        
with the help of this decorator we don't need to defined the typed property in the class level 
    

# Metaclasses 
- topics 
- background, types and metaclasses introduced 
every object created in python is a type of an object 

type(ins) will return the value of __class__
ins.__class__

class C(object):
    pass 
type(C) 
will return <class 'type'>, type is a class create other classes in python 

    + class definition does in python 
name = 'Point' 
base = (object,)
def __init__(self, x, y):
    self.x = x 
    self.y = y 
    
def move(self, dx, dy):
    self.x += dx 
    self.y += dy 
    
methods = {
    '__init__':__init__,
    'move': move 
}

Point = type(name, bases, methods)
then type will create a class Point for you 

    + this provide a way to modify the type creation process 
class mytype(type):
    def __new__(meta, clsname, bases, methods):
        print('Creating:', clsname)
        print('Bases:', bases)
        return super().__new__(meta, clsname, bases, methods)
        
Point = mytype(name, bases, methods)

    + meta class is making class as result. It could provide a way to monitor or supervise a class definition 
    
    the benefit of it is all the inherited subclass are all monitored by the meta class 

- project, tracking subclasses in a framework 
    + example, automatic register subclasses for a factory function 
    
class TableMeta(type):
    def __init__(cls, clsname, bases, methods):
        super().__init__(clsname, bases, methods)
        if hasattr(cls, 'name'):
            _formatters[cls.name] = cls 
            
class TableFormatter(metaclass=TableMeta):
    name = 'text'
    pass 
    
class CSVTableFormatter(metaclass=TableMeta):
    name = 'csv'
    pass 

then all the formatter and subclasses are automatically call the register function 

    + with metaclass there will be some tricky things need to handle for example the @abstractmethod decorator of python is also implemented with metaclass. To work with this feature we have to inherit from the ABS class instead of type 
            
- project, filling in missing details and code generation 
    + improve the previous class decorator with metaclass which will prevent others forget to add the decorator
  
class structuretype(type):
    def __new__(meta, name, bases, methods):
        cls = super().__new__(meta, name, bases, methods)
        cls = typed(cls)
        return cls 
        
class Structure(metaclass=structuretype):
    pass 
    
class Holding(Structure):
    name = String()
    date = String()
    pass 


# Iterators and generators 
- topics 
- iteration protocol and customization via generators 
    + whenever python execute a loop it will call the __iter__() method for the iterable object and get a iterator 
    
    and call the __next__ method on the iterator 
    
    + use the yield statement to create the generator function 
- project watching real-time data source with a generator 
    + example simulate the tail command in *nix 
    
import os 

def follow(filename):
    f = open(filename, 'r')
    f.seek(0, os.SEEK_READ)

    while True:
        line = f.readline()
        if not line:
            time.sleep(0.1)
            continue 
        yield line 
    
for line in follow('continue_updated.csv'):
    row = line.split(',')
    change = float(row[4])
    
    if change < 0:
        name = row[0]
        pass
- processing pipline and workflows, use generator to customize for loop 
    

# Coroutines 
- topics 
- defining and calling coroutines with async/await 
async def foo():
    pass 
    
foo() will return a coroutine object 

    + python asyncio implemented with this technology 
    
import asyncio 
loop = asyncio.get_event_loop()
loop.run_until_complete(g)

await asyc_method() 

- project, asynchronous echo server with coroutines and asycio 

instead of threading module use async/await to achieve heavy performance intensive works 

from socket import * 
import asyncio 

async def echo_server(address, loop):
    sock = socket(AF_INET, SOCK_STREAM)
    sock.bind(address)
    sock.listen(1)
    sock.setblocking(False)
    while True:
        client, addr = await loop.sock_accept(sock)
        print('Connection from', addr)
        loop.create_task(echo_handler(client, loop))
        
async def echo_handler(client, loop):
    while True:
        data = await loop.sock_recv(client, 1000)
        if not data:
            break 
        await loop.sock_sendall(client, b'Got:' + data)
    print('Connection closed')
    client.close()
    
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(echo_server(('', 25000)), loop)
    
- under the covers enhanced generators 
async def foo():
    return 'hello' 
    
g = foo() 
import asyncio 
g.send(None) # will get a StopIteration exception 
the returned exception will contain a result property which contain the return value of the function 

def coro():
    n = 0 
    while True:
        result = yield n 
        print('Got ', result)
        n+1 
        
c = coro() 
c.__next__()
0
c.send('Hello') # the send value will be passed as the result 
'Got Hello'
1

    + simple implementation with generator 
import types 
@types.coroutine 
def sock_recv(sock, maxsize):
    result = yield('recv', sock, maxsize)
    return result 
    
s = sock_recv('somesocket', 1000)
s.send(None)
   
s.send(b'Some data')

# summary 
- python programming 








