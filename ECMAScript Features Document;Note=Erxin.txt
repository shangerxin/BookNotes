ECMAScript Features Document;Note=Erxin

# Information

-   reference
https://en.wikipedia.org/wiki/ECMAScript#11th_Edition_%E2%80%93_ECMAScript_2020

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference


# JS engines 
- chakra, microsoft 
https://github.com/chakra-core/ChakraCore.git

- spidermonkey, mozilla 
https://mozilla-spidermonkey.github.io/

- v8, google 
https://v8.dev/

- javascriptcore, safari 
https://webkit.org/getting-the-code/



# 6th Edition 2015

-   let and const

-   arrow functions

```
// After ES2015: arrow functions
[1, 2, 3, 4].forEach((element, idx) => {
    console.log(element);
});
```

-   class

```
class Vehicle {
    constructor(maxSpeed) {
        this.maxSpeed = maxSpeed;
    }

    get maxSpeed() {
        return maxSpeed;
    }
}

class Car extends Vehicle {
    constructor(maxSpeed) {
        super(maxSpeed);
        this.wheelCount = 4;
    }
}
```

-   object literal

```
function getKey() {
    return 'some key';
}

let obj = {
    // Prototypes can be set this way
    __proto__: prototypeObject,
    // key === value, shorthand for someObject: someObject
    someObject,
    // Methods can now be defined this way
    method() {
        return 3;
    },
    // Dynamic values for keys
    [getKey()]: 'some value'
};
```

-   string template string

```
`Hello ${a} world ${b}`;
```

-   promise

```
const p = new Promise((resolve, reject) => {
    try {
        const result = action(data);
        resolve(result);
    } catch(e) {
        logger.error(e.toString());
        reject(e);
    }
});
```

-   generators, iterators, iterables and for...of

```
function* counter() {
    let i = 0;
    while(true) {
        yield i++;
    }
}
```

-   spread synatx

```
let arr = [1, 2, 3, 4];

manyArgs(...arr);
```

-   destructing in javascript

```
for(let [key, value] of map) {
    console.log(`${key}: ${value}`);
}
```

-   javascript module

```
// helloworld.js

export function hello() {
    console.log('hello');
}
export function world() {
    console.log('world');
}

export default hello;

console.log('Module helloworld.js');

// main.js
import { hello, world } from 'helloworld.js';

hello();
world();

// hello and world available.
import * from 'helloworld.js';
// HelloWorld is an object that contains hello and world.
import * as HelloWorld from 'helloworld.js';
// helloFn is hello and worldFn is world in this module.
import { hello as helloFn, world as worldFn } from 'helloworld.js';
// h is the default export from helloworld.js, namely hello.
import h from 'helloworld.js';
// No elements are imported, but side-effects from the helloworld.js module
// are run (the console.log statement in it is a side-effect).
import 'helloworld.js';
```

-   object proxy

```
let obj = {
    a: 1,
    b: 2,
    c: 'hello',
    d: 3
};

let obj2 = new Proxy(obj, {
    get: function(object, property) {
        const value = object[property];
        if(value instanceof Number || typeof value === 'number') {
            return value + 1;
        } else {
            return value;
        }
    }
});

console.log(obj2.a); // 2
console.log(obj.a);  // 1
obj2.a = 4;
console.log(obj.a);  // 4
console.log(obj2.a); // 5
```

-   reflection, proxies provide a get operation that overrides access to properties, Reflect provides a get operation that provides access to a property

```
let obj = {
    a: 1,
    b: 2,
    c: 'hello',
    d: 3
};

// Equivalent to obj['a'];
console.log(Reflect.get(obj, 'a')); // 1

function SomeConstructor() {
    return { a: 1 };
}

// Equivalent to new SomeConstructor
const newObj = Reflect.construct(SomeConstructor, []);
console.log(newObj.a); // 1

// Equivalent to 'a' in newObj
console.log(Reflect.has(newObj, 'a'));
```

-   symbols

```
const obj = {
    [Symbol.iterator]: function* () {
        yield 1;
        yield 2;
    }
}

for(const v of obj) {
    console.log(v);
}
```

-   typed arrays

```
const arr = new Uint8Array(1024);
arr[8] = 255;
```

-   minor features

```
class SpecialArray extends Array {
    constructor(...args) {
        super(...args);
    }

    get lengthWithTerminator() {
        return this.length + 1;
    }
}

const arr = new SpecialArray(1, 2, 3);
console.log(arr.lengthWithTerminator);
```

-   unicode

```
const str = '\u{10437}'; // 𐐷
str.codePointAt(0) === 0x10437;
```

-   2017

```
const updateStatement = '...';

async function apiDoSomething(withThis) {
    const url = 'https://some.cool.backend.com/api/justDoIt';
    try {
        const result = await httpLib.request(url, withThis);
        return database.update(updateStatement, parseResult(result));
    } catch(e) {
        logger.error(`ERROR: ${e} (from url: ${url})`);
        // Our API is such that rollbacks are considered no-ops in case
        // the original request did not succeed, so it is OK to call it here.
        apiRollbackSomething(withThis);
    }
}

```

-   single instruction multiple data(SIMD)

```
const a = SIMD.Float32x4(1, 2, 3, 4);
const b = SIMD.Float32x4(5, 6, 7, 8);
const c = SIMD.Float32x4.add(a, b); // [6,8,10,12]

Although not evident from the API, if a hardware operation is available to perform the addition in less instructions than four independent additions, it will be used.
```

-   asynchronous iterations

```
for await (const line of readLines(filePath)) {
  console.log(line);
}

async function* readLines(path) {
  let file = await fileOpen(path);

  try {
    while (!file.EOF) {
      yield await file.readLine();
    }
  } finally {
    await file.close();
  }
}
```

-   auth0's javascript library to authenticate
    https://github.com/auth0/auth0.js

# 7th Edition 2016

-   array.prototype.includes

```
if(numbers.includes(2)) {  console.log('Array contains value');}
```

-   exponentiation operator

```
let base = 3;let exponent = 4;let result = base**exponent;
```

# 8th Edition 2017

-   Object.entires

```
let data = { "King" : "Jon Snow",
             "Queen" : "Daenerys Targaryen",
             "Hand" : "Tyrion Lannister"}

console.log(Object.entries(data))

> [["King","Jon Snow"],["Queen","Daenerys Targaryen"],["Hand","Tyrion Lannister"]]

```

-   Object.values

```
let data = { "King" : "Jon Snow",
             "Queen" : "Daenerys Targaryen",
             "Hand" : "Tyrion Lannister"}

console.log(Object.values(data))
> ["Jon Snow","Daenerys Targaryen","Tyrion Lannister"]
```

-   String padding

```
> 'a'.padStart(5, 'xy')
'xyxya'
> 'a'.padStart(4, 'xy')
'xyxa'
> '1234'.padStart(2, '#')
'1234'
> '###'.padStart(10, '0123456789')
'0123456###'
> 'a'.padStart(10)


> 'a'.padEnd(5, 'xy')
'axyxy'
> 'a'.padEnd(4, 'xy')
'axyx'
> '1234'.padEnd(2, '#')
'1234'
> '###'.padEnd(10, '0123456789')
'###0123456'
> 'a'.padEnd(10)
'a         '
```

-   Object.getOwnPropertyDescriptors

```
const obj = {
    id: 123,
    get bar() { return 'abc' },
};
console.log(Object.getOwnPropertyDescriptors(obj));

>   { id:
       { value: 123,
         writable: true,
         enumerable: true,
         configurable: true },
      bar:
       { get: [Function: bar],
         set: undefined,
         enumerable: true,
         configurable: true } }

```

-   Trailing commas in function parameter lists anca calls

```
// All the code snippets below are acceptable

let obj = {
    first: 'Naruto',
    last: 'Uzumaki',
}

let array = [
    'red',
    'green',
    'blue',
]

function killAllMonsters(
    hero,
    weapons,
)
```

-   Async functions

```
// Current syntax
function fetchJson(url) {
    return fetch(url)
    .then(request => request.text())
    .then(text => {
        return JSON.parse(text);
    })
    .catch(error => {
        console.log(`ERROR: ${error.stack}`);
    });
}

// New async functions
async function fetchJson(url) {
    try {
        let request = await fetch(url);
        let text = await request.text();
        return JSON.parse(text);
    }
    catch (error) {
        console.log(`ERROR: ${error.stack}`);
    }
}
```

-   Exponentiation Operator

```
let squared = 2 ** 2 // value of squared is 4
  , cubed = 2 ** 3 // value of cubed is 8
```

-   Array.prototype.includes, we are checking for the index of the first occurrence of the element in the array. Additionally, this would fail for NaN (eg: [NaN].indexOf(NaN) === -1). includes method to the Array to check whether an element is present in the Array.

```
array.includes(element)
```

# 9th Edition 2018

-   Rest/Spread properties

```
const input = {x:1, y:2};
const {x, y, ...} = input;
//x = 1
...
```

-   asynchronous iteration

```
for await (const line of readlines(filePath)){
    console.log(line);
}
```

-   Promise.prototype.finally()

```
fetch(url)
    .then(r=>{
    })
    .catch(e=>{
    })
    .finally(()=>{
    })
```

-   RegExp related features
    s (dotAll) flag for regular expressions, https://github.com/tc39/proposal-regexp-dotall-flag

```
/(?<year>\d{4})-(?<month>\d{2})/u
```

RegExp named capture groups, https://github.com/tc39/proposal-regexp-named-groups

RegExp lookbehind assertions, https://github.com/tc39/proposal-regexp-lookbehind

RegExp Unicode property escapes, https://github.com/tc39/proposal-regexp-unicode-property-escapes

# 10th Edition 2019

-   Array.Flat()

```
The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth

var arr = [1,2,3[4,5,6,[7,8,9]]];

arr.flat() //[1,2,3,4,5,6,Array4];

arry.flat().flat() [1,2,3,4,5,6,7,8,9];

//equal to

arr.flat(Infinity);
```

-   Array.flatMap()

The flatMap() method first maps each element using a mapping function

-   Object.fromEntries, transforms a list of key-value pairs into an objects

```
var obj = {
    k1:'v1',
    k2:'v2'
}

var entries = Object.entries(obj);
//(3) [Array(2), Array(2)]
//0: ["k1", "v1"]
...
```

-   String.trimStart(), String.trimEnd()

-   Optional Catch binding

```
try{
}
catch { //no parameter for catch
}
```

-   Function.toString()

-   Symbol.description, is a string returning the optional description of Symbol objects

```
var s = Symbol('My symbol description')
```

-   well formed JSON.Stringify()

-   Array.Sort stability, with same rating retain their sorting order

-   ECMA-262 syntax into a superset of JSON
    ECMA-262 can be extended to allow unescaped U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR characters.

https://github.com/tc39/proposal-json-superset


# 11th Edition 2020

-   function-like import()

```
import(specifiier)

import(`./language-packs/${navigator.language}.js`)
```

-   BigInt created by appending n to the end of integer or calling the constructor

```
BigInt("12341231234123412341234124")

12341234123412341234n
```

-   matchAll method to produce an iterator for all matched objects generated by a global regular

-   Promise.allSettled, a promise combinator that does not short-circuit, This returns a promise that is fulfilled with an array of promise state snapshots

-   globalThis, universal way to access global this
-   export \* as ns from 'module'
-   import.meta
-   Nullish coalescing, a value selection operator for better handling of cases involving property access

```
const size = settings.zie ?? 42;

const customerCity = invoice?.customer?.address?.city;
```

nullish values(null or undefined)

-   optinal chaining a property access and function inovation operator that will short-circuit if the value to access/inovke is nullish


# ES.Next
- ES.Next is a dynamic name that refers to whatever the next version is at the time of writing
