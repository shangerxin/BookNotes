Curl manpage=Note=Erxin


# Support protocols 
- supports these protocols: 

DICT  Lets you lookup words using online dictionaries.

FILE  Read or write local files. curl does not support accessing file:// URL remotely, but when running on Microsoft Windows using the native UNC approach works.

FTP(S) curl supports the File Transfer Protocol with a lot of tweaks and levers. With or without using TLS.

GOPHER(S) Retrieve files.

HTTP(S)   curl supports HTTP with numerous options and variations. It can speak HTTP version 0.9, 1.0, 1.1, 2 and 3 depending on build options and the correct command line options.

IMAP(S)  Using the mail reading protocol, curl can download emails for you. With or without using TLS.

LDAP(S) curl can do directory lookups for you, with or without TLS.

MQTT    curl supports MQTT version 3. Downloading over MQTT equals subscribe to a topic while uploading/posting equals publish on a topic. MQTT over TLS is not supported (yet).

POP3(S) Downloading from a pop3 server means getting a mail. With or without using TLS.

RTMP(S) The Realtime Messaging Protocol is primarily used to serve streaming media and curl can download it.

RTSP   curl supports RTSP 1.0 downloads.

SCP    curl supports SSH version 2 scp transfers.

SFTP   curl supports SFTP (draft 5) done over SSH version 2.

SMB(S) curl supports SMB version 1 for upload and download.

SMTP(S) Uploading contents to an SMTP server means sending an email. With or without TLS.

TELNET  Telling curl to fetch a telnet URL starts an interactive session where it sends what it reads on stdin and outputs what the server sends it.

TFTP    curl can do TFTP downloads and uploads.

The URL syntax is protocol-dependent. You find a detailed description in RFC 3986.

- globbing, The URL syntax is protocol-dependent. You find a detailed description in RFC 3986.

a list with three different names like this:

 
"http://site.{one,two,three}.com"

alphanumeric series by using [] as in:

 
"ftp://ftp.example.com/file[1-100].txt"
 
"ftp://ftp.example.com/file[001-100].txt"


 letters through the alphabet:

 
"ftp://ftp.example.com/file[a-z].txt"

ones next to each other:

 
"http://example.com/archive[1996-1999]/vol[1-4]/part{a,b,c}.html"

a step counter for the ranges to get every Nth number or letter:

 
"http://example.com/file[1-100:10].txt"
 
"http://example.com/file[a-z:2].txt"

other characters treated special, like for example '&', '?' and '*'.

Switch off globbing with -g, --globoff

- variables 

Set variables with --variable name=content or --variable name@file (where "file" can be stdin if set to a single dash (-)).

Variable contents can be expanded in option parameters using "{{name}}" if the option name is prefixed with "--expand-".

    + default value 
    
To provide a default value if it is not set, use --variable %name=content or --variable %name@content.

if USER is not set:
```
--variable '%USER'
--expand-url = "https://example.com/api/{{USER}}/method"
```


- progress meter 

You can also disable the progress meter completely with the -s, --silent option

-  latest curl version is by running

 
curl https://curl.se/info

- Options 

When -:, --next is used, it resets the parser state and you start again with a clean option state, except for the options that are global

specify all the options -O, -L and -v at once as -OLv.

global: --fail-early, --libcurl, --parallel-immediate, -Z, --parallel, -#, --progress-bar, --rate, -S, --show-error, --stderr, --styled-output, --trace-ascii, --trace-config, --trace-ids, --trace-time, --trace and -v, --verbose.

```
    + HTTP HTTPS
    
-j, --junk-session-cookies

(HTTP) When curl is told to read cookies from a given file, this option makes it discard all "session cookies"
    
--hsts <file name>

(HTTPS) This option enables HSTS for the transfer. If the file name points to an existing HSTS cache file, that is used.

--http0.9

(HTTP) Tells curl to be fine with HTTP version 0.9 response.

-0, --http1.0

(HTTP) Tells curl to use HTTP version 1.0 instead of using its internally preferred HTTP version.

--http1.1

(HTTP) Tells curl to use HTTP version 1.1.

--http2-prior-knowledge

(HTTP) Tells curl to issue its non-TLS HTTP requests using HTTP/2 without HTTP/1.1 Upgrade.

--http2

(HTTP) Tells curl to use HTTP version 2.

--http3-only

(HTTP) Instructs curl to use HTTP/3 to the host in the URL, with no fallback to earlier HTTP versions.      

--http3

(HTTP) Tells curl to try HTTP/3 to the host in the URL, but fallback to earlier HTTP versions

--ignore-content-length

(FTP HTTP) For HTTP, Ignore the Content-Length header. 

-i, --include

(HTTP FTP) Include response headers in the output.
    
--abstract-unix-socket <path>, Connect through an abstract Unix domain socket, instead of network 

--haproxy-clientip <IP address>

(HTTP) Sets a client IP in HAProxy PROXY protocol v1 header at the beginning of the connection.

--haproxy-protocol

(HTTP) Send a HAProxy PROXY protocol v1 header at the beginning of the connection

-I, --head

(HTTP FTP FILE) Fetch the headers only! HTTP-servers feature the command HEAD which this uses to get nothing but the header of a document.

-H, --header <header/@file>

(HTTP IMAP SMTP) Extra header to include in information sent. When used within an HTTP request, it is added to the regular request headers.

-h, --help <category>

Usage help. This lists all curl command line options within the given category.

--alt-svc <file name>

(HTTPS) This option enables the alt-svc parser in curl. If the file name points to an existing alt-svc cache file

--anyauth

(HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support. 

--aws-sigv4 <provider1[:provider2[:region[:service]]]>

(HTTP) Use AWS V4 signature authentication in the transfer.

--basic

(HTTP) Tells curl to use HTTP Basic authentication with the remote host. 

--compressed

(HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.

--fail-with-body

(HTTP) Return an error on server errors where the HTTP response code is 400 or greater).

-f, --fail

(HTTP) Fail fast with no output at all on server errors. 

-b, --cookie <data|filename>

(HTTP) Pass the data to the HTTP server in the Cookie header.

--data-ascii <data>, --data-ascii can be used several times in a command line

(HTTP) This is just an alias for -d, --data.

curl --data-ascii @file https://example.com

--max-filesize <bytes>

(FTP HTTP MQTT) Specify the maximum size (in bytes) of a file to download.

--max-redirs <num>

(HTTP) Set maximum number of redirections to follow. 

-m, --max-time <fractional seconds>

Maximum time in seconds that you allow each transfer to take

--metalink

This option was previously used to specify a Metalink resource

--negotiate

(HTTP) Enables Negotiate (SPNEGO) authentication.

This option requires a library built with GSS-API or SSPI support. Use -V, --version to see if your curl supports GSS-API/SSPI or SPNEGO.

--data-binary <data>

(HTTP) This posts data exactly as specified with no extra processing

--data-raw <data>

(HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.

--ntlm-wb

(HTTP) Enables NTLM much in the style --ntlm does, but hand over the authentication to the separate binary "ntlmauth" application that is executed when needed.

--ntlm

(HTTP) Enables NTLM authentication. 

--data-urlencode <data>

(HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.

-d, --data <data>

(HTTP MQTT) Sends the specified data in a POST request to the HTTP server

--digest

(HTTP) Enables HTTP Digest authentication. This is an authentication scheme that prevents the password from being sent over the wire in clear text.

-D, --dump-header <filename>

(HTTP FTP) Write the received protocol headers to the specified file. If no headers are received, the use of this option creates an empty file.

--etag-compare <file>

(HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag

--etag-save <file>

(HTTP) This option saves an HTTP ETag to the specified file

--expect100-timeout <seconds>

(HTTP) Maximum time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.

--form-escape

(HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.

--form-string <name=string>

(HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.

 curl --form-string "name=data" https://example.com
 
-F, --form <name=content>, Content-Type multipart/form-data according to RFC 2388.

(HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button. 

curl -F profile=@portrait.jpg https://example.com/upload.cgi
curl -F "web=@index.html;type=text/html" example.com
curl -F "name=daniel;type=text/foo" example.com


Send it as a plain text field, but get the contents for it from a local file:
curl -F "story=<hugefile.txt" https://example.com/
curl -F "file=@localfile;filename=nameinpost" example.com

the following command sends an SMTP mime email consisting in an inline part in two alternative formats: plain text and HTML. It attaches a text file:
curl -F '=(;type=multipart/alternative' \
     -F '=plain text message' \
     -F '= <body>HTML message</body>;type=text/html' \
     -F '=)' -F '=@textfile.txt' ...  smtp://example.com

    + FTP 
-l, --list-only

(FTP POP3 SFTP) (FTP) When listing an FTP directory, this switch forces a name-only view. 
    
-a, --append

(FTP SFTP) When used in an upload, this option makes curl append to the target file instead of overwriting it. If the remote file does not exist

--disable-eprt

(FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers.

-ftp-account <data>

(FTP) When an FTP server asks for "account data" after user name and password has been provided, this data is sent off using the ACCT command.
 curl --ftp-account "mr.robot" ftp://example.com/
 
--ftp-alternative-to-user <command>

(FTP) If authenticating with the USER and PASS commands fails, send this command

--krb <level>

(FTP) Enable Kerberos authentication and use. 

--ftp-create-dirs

(FTP SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server

--ftp-method <method>

(FTP) Control what method curl should use to reach a file on an FTP(S) server.

--ftp-pasv

(FTP) Use passive mode for the data connection.

-P, --ftp-port <address>

(FTP) Reverses the default initiator/listener roles when connecting with FTP. 

--ftp-pret

(FTP) Tell curl to send a PRET command before PASV (and EPSV). Certain FTP servers

--ftp-skip-pasv-ip

(FTP) Tell curl to not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection.

--ftp-ssl-ccc-mode <active/passive>

(FTP) Sets the CCC mode. The passive mode does not initiate the shutdown

--ftp-ssl-ccc

(FTP) Use CCC (Clear Command Channel) Shuts down the SSL/TLS layer after authenticating. 

--ftp-ssl-control

(FTP) Require SSL/TLS for the FTP login, clear for transfer. 

-G, --get

(HTTP) When used, this option makes all data specified with -d, --data, --data-binary or --data-urlencode to be used in an HTTP GET request instead of the POST request

-g, --globoff

This option switches off the "URL globbing parser". When you set this option

    + TLS 
--key <key>

(TLS SSH) Private key file name. Allows you to provide your private key in this separate file. For SSH, if not specified, curl tries the following candidates in order: "~/.ssh/id_rsa", "~/.ssh/id_dsa", "./id_rsa", "./id_dsa".
    
--key-type <type>    DER, PEM, and ENG are supported

(TLS) Private key file type.
    
--false-start

(TLS) Tells curl to use false start during the TLS handshake. False start is a mode where a TLS client starts sending application data before verifying the server's Finished message
    
--engine <name>

(TLS) Select the OpenSSL crypto engine to use for cipher operations. Use --engine list to print a list of build-time supported engines
    
--egd-file <file>

(TLS) Deprecated option (added in 7.84.0). Prior to that it only had an effect on curl if built to use old versions of OpenSSL.
    
--ca-native

(TLS) Tells curl to use the CA store from the native operating system to verify the peer.

--cacert <file>

(TLS) Tells curl to use the specified certificate file

--capath <dir>

(TLS) Tells curl to use the specified certificate directory

--cert-status

(TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.

--cert-type <type>

(TLS) Tells curl what type the provided client certificate is using. PEM, DER, ENG and P12 are recognized types

-E, --cert <certificate[:password]>

(TLS) Tells curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.

--ciphers <list of ciphers>

(TLS) Specifies which ciphers to use in the connection.

--crlfile <file>

(TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates 

--curves <algorithm list>

(TLS) Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1. Multiple algorithms can be provided by separating them with ":"

-k, --insecure

(TLS SFTP SCP) By default, every secure connection curl makes is verified to be secure before the transfer takes place.

--interface <name>

Perform an operation using a specified interface. You can enter interface name, IP address or host name. An example could look like:

    + SCP SFTP

--compressed-ssh

(SCP SFTP) Enables built-in SSH compression. This is a request, not an order;

--create-file-mode <mode>

(SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols

--hostpubmd5 <md5>

(SFTP SCP) Pass a string containing 32 hexadecimal digits. 

--hostpubsha256 <sha256>

(SFTP SCP) Pass a string containing a Base64-encoded SHA256 hash of the remote host's public key.

    + IPFS 
    
--ipfs-gateway <URL>

(IPFS) Specify which gateway to use for IPFS and IPNS URLs. Not specifying this will instead make curl check if the IPFS_GATEWAY environment variable is set,

    + common 
-K, --config <file>

Specify a text file to read curl arguments from. The command line arguments found in the text file are used as if they were provided on the command line.

```
url = "https://curl.se/docs/"
 
# --- Example file ---
# this is a comment
url = "example.com"
output = "curlhere.html"
user-agent = "superagent/1.0"
 
# and fetch another URL too
url = "example.com/docs/manpage.html"
-O
referer = "http://nowhereatall.example.com/"
# --- End of example file ---
```

$  curl --config file.txt https://example.com

--connect-timeout <fractional seconds>

Maximum time in seconds that you allow curl's connection to take. 

--connect-to <HOST1:PORT1:HOST2:PORT2>

For a request to the given "HOST1:PORT1" pair,

-C, --continue-at <offset>

Continue/Resume a previous file transfer at the given offset. 

-c, --cookie-jar <filename>

(HTTP) Specify to which file you want curl to write all cookies after a completed operation.

--create-dirs

When used in conjunction with the -o, --output option, curl creates the necessary local directory hierarchy as needed. 

    + DNS 
    
--dns-interface <interface>

(DNS) Tell curl to send outgoing DNS requests through the given interface

--dns-ipv4-addr <address>

(DNS) Tell curl to bind to a specific IP address when making IPv4 DNS requests

--dns-ipv6-addr <address>

(DNS) Tell curl to bind to a specific IP address when making IPv6 DNS requests, so that the DNS requests originate from this address

--dns-servers <addresses>

(DNS) Set the list of DNS servers to be used instead of the system default. 

--doh-cert-status

Same as --cert-status but used for DoH (DNS-over-HTTPS).

--doh-insecure

Same as -k, --insecure but used for DoH (DNS-over-HTTPS).

--doh-url <URL>

Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames

    + SMTP 
--mail-rcpt <address>

(SMTP) Specify a single email address, user name or mailing list name.

--mail-rcpt-allowfails

(SMTP) When sending data to multiple recipients, by default curl aborts SMTP conversation if at least one of the recipients causes RCPT TO command to return an error.

--mail-from <address>

(SMTP) Specify a single address that the given mail should get sent from.
    
--mail-auth <address>

(SMTP) Specify a single address. 

    + FTP SMTP 
    
--crlf

(FTP SMTP) Convert line feeds to carriage return plus line feeds in upload

--delegation <LEVEL>

(GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.

-q, --disable

If used as the first parameter on the command line, the curlrc config file is not read or used

--disallow-username-in-url

This tells curl to exit if passed a URL containing a username. This is probably most useful when the URL is being provided at runtime or similar

--fail-early

Fail and exit on the first detected transfer error.

--happy-eyeballs-timeout-ms <milliseconds>

Happy Eyeballs is an algorithm that attempts to connect to both IPv4 and IPv6 addresses for dual-stack hosts

-4, --ipv4

This option tells curl to use IPv4 addresses only when resolving host names

-6, --ipv6

This option tells curl to use IPv6 addresses only when resolving host names, and not for example try IPv4.

--json <data>

(HTTP) Sends the specified JSON data in a POST request to the HTTP server

--keepalive-time <seconds>

This option sets the time a connection needs to remain idle before sending keepalive probes and the time between individual keepalive probes.

--libcurl <file>

Append this option to any ordinary curl command line, and you get libcurl-using C source code written to the file that does the equivalent of what your command-line operation does!

--limit-rate <speed>

Specify the maximum transfer rate you want curl to use - for both downloads and uploads. 

--local-port <num/range>

Set a preferred single number or range (FROM-TO) of local port numbers to use for the connection(s).

--location-trusted

(HTTP) Like -L, --location, but allows sending the name + password to all hosts that the site may redirect to

-L, --location

(HTTP) If the server reports that the requested page has moved to a different location

--login-options <options>

(IMAP LDAP POP3 SMTP) Specify the login options to use during server authentication.

--netrc-file <filename>

This option is similar to -n, --netrc, except that you provide the path (absolute or relative) to the netrc file that curl should use. 

--netrc-optional

Similar to -n, --netrc, but this option makes the .netrc usage optional and not mandatory as the -n, --netrc option does.

-n, --netrc

Makes curl scan the .netrc file in the user's home directory for login name and password.

-:, --next

Tells curl to use a separate operation for the following URL and associated options.

-N, --no-buffer

Disables the buffering of the output stream. In normal work situations, curl uses a standard buffered output stream that has the effect that it outputs

--no-clobber

When used in conjunction with the -o, --output, -J, --remote-header-name, -O, --remote-name, or --remote-name-all options, curl avoids overwriting files that already exist.

--no-keepalive

Disables the use of keepalive messages on the TCP connection. curl otherwise enables them by default.

--no-npn

(HTTPS) curl never uses NPN, this option has no effect (added in 7.86.0).

--no-progress-meter

Option to switch off the progress meter output without muting or otherwise affecting warning and informational messages like -s, --silent does.

--no-sessionid

(TLS) Disable curl's use of SSL session-ID caching. By default all transfers are done using the cache.

--noproxy <no-proxy-list>

Comma-separated list of hosts for which not to use a proxy, if one is specified. 

--oauth2-bearer <token>

(IMAP LDAP POP3 SMTP HTTP) Specify the Bearer Token for OAUTH 2.0 server authentication.

--output-dir <dir>

This option specifies the directory in which files should be stored, when -O, --remote-name or -o, --output are used.  you can use "#" followed by a number in the file name
curl "http://{one,two}.example.com" -o "file_#1.txt"

--parallel-immediate

When doing parallel transfers
```


...

- curl delete 
```
curl --request "DELETE" <URL>
```