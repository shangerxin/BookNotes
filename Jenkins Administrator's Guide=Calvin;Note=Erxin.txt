Jenkins Administrator's Guide=Calvin;Note=Erxin


# Why jenkins 
- Java and Groovy to specify the build steps. This allows us to write real code to express our build logic using variables, conditionals, loops, exceptions, and sometimes even classes and methods, rather than being bound by a domain-specific language (DSL) that is often limiting.

- hudson Java package (https://github.com/jenkinsci/jenkins/tree/master/core/src/main/java/hudson),

- Pipeline DSL is the custom programming language for a Jenkins Pipeline (or simply Pipeline with a capital P (https://www.jenkins.io/doc/book/pipeline/#overview). Pipelines are enabled through the Pipeline plugin (https://plugins.jenkins.io/workflow-aggregator/), which used to be called Workflow

- jenkins architecture 

    + controller is the central server for jenkins 
    
    The Jenkins controller runs as a Docker container listening on port 8080 for HTTP and port 50000 for inbound agents
    
    aws controller, AWS controller has an Elastic IP (EIP) attached to it. The EIP provides a static IP that doesn't change, and the inbound agent will connect to the EIP's address.
    
    corporate firewalled controller 
    
    + The endpoint for a production-grade web service should be on HTTPS with a domain name rather than on HTTP with an IP. This requires that we have domain names, TLS certificates, a load balancer, and a reverse proxy.
    
    jenkins-aws.lvin.ca points to the AWS Jenkins controller.
    jenkins-firewalled.lvin.ca points to the firewalled Jenkins controller.
    HTTPS is provided through a load balancer, reverse proxy, or directly on Jenkins.
    The AWS Jenkins controller uses an Elastic Load Balancer (ELB) for TLS termination.
    The firewalled Jenkins controller uses an NGINX reverse proxy or the Jenkins controller itself for TLS termination.
    The load balancer and reverse proxy receive traffic from HTTP port 80 and redirects it to HTTPS port 443 for secure communication.
    The load balancer and reverse proxy receive traffic from HTTPS port 443, terminate the TLS, and proxy it to HTTP port 8080, which is where the Jenkins controller listens.
    
    network architecture of DNS, TLS, the load balancer, and the reverse proxy. Let's continue and look at agents.
    
    + agents  set up our agents as follows:

    There are two nodes for agents – one on AWS and another inside a corporate firewall.
    The agent nodes also run on VMs running Ubuntu 20.04.
    Each agent node connects to both Jenkins instances (yes, it's possible to connect a node to multiple Jenkins controllers).
    The AWS agent has an EIP attached to it. The EIP provides a static IP that doesn't change, and the firewalled controller will connect to the EIP's address.
    The firewalled agent connects to the AWS Jenkins controller on port 50000 as an inbound agent. 
    The AWS agent's hostname is aws-agent, and it runs as the ubuntu user. Therefore, the commands that are run on it will start with ubuntu@aws-agent:<path>$.
    The firewalled agent's hostname is firewalled-agent, and it runs as the robot_acct user. Therefore, the commands that are run on it will start with robot_acct@firewalled-agent:<path>$.
    The commands starting with agent:<path>$ indicate the commands that can run on either agent.
    
    + Docker cloud.

    Docker cloud

    Docker cloud is used to dynamically generate an agent using Docker containers.

    The Docker hosts also run on VMs running Ubuntu 20.04.
    The Docker hosts are not Jenkins agents. Each provides a TCP endpoint for ephemeral Docker agents to be dynamically generated.
    A controller communicates with a Docker host on TCP port 2376, which is secured with an X.509 certificate. We will follow the steps in the official document4.
    The AWS Docker host's hostname is aws-docker-host, and it runs as the ubuntu user. Therefore, the commands that are run on it will start with ubuntu@aws-docker-host:<path>$.
    The firewalled Docker host's hostname is firewalled-docker-host, and it runs as the robot_acct user. Therefore, the commands that are run on it will start with robot_acct@firewalled-docker-host:<path>$.
    The commands starting with docker-host:<path>$ indicate the commands that can run on either Docker host.
    
    + all together 
    
    machines all running Ubuntu 20.04. The NGINX reverse proxy runs on the same machine running the firewalled Jenkins controller:

    AWS Jenkins controller (ubuntu@aws-controller)
    AWS Jenkins agent (ubuntu@aws-agent)
    AWS Docker host (ubuntu@aws-docker-host)
    Firewalled Jenkins controller (robot_acct@firewalled-controller)
    Firewalled Jenkins agent (robot_acct@firewalled-agent)
    Firewalled Docker host (robot_acct@firewalled-docker-host)
    
- installing docker on our vms 

Follow the installation steps in Docker's official documentation (https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository).



# Jenkins with docker on HTTPS on AWS and inside a corporate firewall 
-  Custom image to match the UID/GID for a bind mount

a look at the Dockerfile for the jenkins/jenkins image, lines 20 to 26 (https://github.com/jenkinsci/docker/blob/jenkins-docker-packaging-2.235.1/Dockerfile)


```
FROM openjdk:8-jdk-stretch

# Install git lfs on Debian stretch per https://github.com/git-lfs/git-lfs/wiki/Installation#debian-and-ubuntu
# Avoid JENKINS-59569 - git LFS 2.7.1 fails clone with reference repository
RUN apt-get update && apt-get upgrade -y && apt-get install -y git curl && curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && apt-get install -y git-lfs && git lfs install && rm -rf /var/lib/apt/lists/*

ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=1000
ARG http_port=8080
ARG agent_port=50000
ARG JENKINS_HOME=/var/jenkins_home
ARG REF=/usr/share/jenkins/ref

ENV JENKINS_HOME $JENKINS_HOME
ENV JENKINS_SLAVE_AGENT_PORT ${agent_port}
ENV REF $REF

# Jenkins is run with user `jenkins`, uid = 1000
# If you bind mount a volume from the host or a data container,
# ensure you use the same uid
RUN mkdir -p $JENKINS_HOME \
  && chown ${uid}:${gid} $JENKINS_HOME \
  && groupadd -g ${gid} ${group} \
  && useradd -d "$JENKINS_HOME" -u ${uid} -g ${gid} -m -s /bin/bash ${user}

# Jenkins home directory is a volume, so configuration and build history
# can be persisted and survive image upgrades
VOLUME $JENKINS_HOME

# $REF (defaults to `/usr/share/jenkins/ref/`) contains all reference configuration we want
# to set on a fresh new installation. Use it to bundle additional plugins
# or config file with your custom jenkins Docker image.
RUN mkdir -p ${REF}/init.groovy.d

# Use tini as subreaper in Docker container to adopt zombie processes
ARG TINI_VERSION=v0.16.1
COPY tini_pub.gpg ${JENKINS_HOME}/tini_pub.gpg
RUN curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture) -o /sbin/tini \
  && curl -fsSL https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static-$(dpkg --print-architecture).asc -o /sbin/tini.asc \
  && gpg --no-tty --import ${JENKINS_HOME}/tini_pub.gpg \
  && gpg --verify /sbin/tini.asc \
  && rm -rf /sbin/tini.asc /root/.gnupg \
  && chmod +x /sbin/tini

# jenkins version being bundled in this docker image
ARG JENKINS_VERSION
ENV JENKINS_VERSION ${JENKINS_VERSION:-2.176.2}

# jenkins.war checksum, download will be validated using it
ARG JENKINS_SHA=33a6c3161cf8de9c8729fd83914d781319fd1569acf487c7b1121681dba190a5

# Can be used to customize where jenkins.war get downloaded from
ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war

# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum
# see https://github.com/docker/docker/issues/8331
RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \
  && echo "${JENKINS_SHA}  /usr/share/jenkins/jenkins.war" | sha256sum -c -

ENV JENKINS_UC https://updates.jenkins.io
ENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental
ENV JENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementals
RUN chown -R ${user} "$JENKINS_HOME" "$REF"

# for main web interface:
EXPOSE ${http_port}

# will be used by attached slave agents:
EXPOSE ${agent_port}

ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log

USER ${user}

COPY jenkins-support /usr/local/bin/jenkins-support
COPY jenkins.sh /usr/local/bin/jenkins.sh
COPY tini-shim.sh /bin/tini
ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/jenkins.sh"]

# from a derived Dockerfile, can use `RUN plugins.sh active.txt` to setup ${REF}/plugins from a support bundle
COPY plugins.sh /usr/local/bin/plugins.sh
COPY install-plugins.sh /usr/local/bin/install-plugins.sh
```

    + Container user and host user with matching UID/GID  Create the following Dockerfile. Let's use the 2.263.1-lts tag for now – we will upgrade to the latest LTS in Chapter 8, Upgrading the Jenkins Controller, Agents, and Plugins:
    
jenkins.dockerfile
```
FROM jenkins/jenkins:2.263.1-lts
USER root
RUN  usermod -u 123 -g 30 jenkins
USER jenkins
```

Build the image and name it <Docker Hub ID>/jenkins:2.263.1-lts:
$ docker build -t calvinpark/jenkins:2.263.1-lts -f jenkins.dockerfile .

- set up aws and nginx 

- installing plugins and configuring jenkins plugins 

- configure system Read through and configure as needed, and be sure to configure these four items:

number of executors: 0.
Jenkins URL: https://<Jenkins URL>/ (for example, https://jenkins-firewalled.lvin.ca/).
Pipeline Default Speed/Durability Level: Performance-optimized.
Global Build Discarders: Add a Specific Build Discarder that keeps a maximum of 100 builds.

- Configure Global Security

Choose the Authentication Security Realm that you plan to use. In a corporate setting, Active Directory or LDAP works well. 

In Authorization Strategy, choose Project-based Matrix Authorization Strateg

Secrets are an important part of automation. Click Manage Jenkins on the left | Manage Credentials | (global). This is the Global Credentials page where we store secrets

attaching ssh and inbound agents, An inbound agent allows us to add an agent even when the controller can't reach the agent due to a network restriction such as a firewall, but the agent can reach the controller 

- Labels and Usage  Here is some more information about the Labels and Usage fields on the agent

- Generating a CA, server certificates, and client certificates We'll start by generating the necessary certificates.

- Storing the certificates Save the CA and server certificates in /etc/ssl/docker-host/



# GitOps driven CI pipeline with github 
- Creating or updating a PR triggers a premerge build in Jenkins to compile the project, run unit tests, and generate a code coverage repo

- pipeline example 

```
pipeline {
    agent {
        dockerfile {
            label 'docker'
    }   }
    stages {
        stage('Compile') {
            steps {
                sh 'python3 -m compileall adder.py'
        }   }
        stage('Run') {
            steps {
                sh 'python3 adder.py 3 5'
        }   }
        stage('Unit test') {
            steps {
                sh '''python3 -m pytest \
                    -v --junitxml=junit.xml \
                    --cov-report xml --cov adder adder.py
                '''
    }   }   }
    post {
        always {
            junit 'junit.xml'
            cobertura coberturaReportFile: 'coverage.xml'
}   }   }
```

- Creating a premerge CI pipeline with GitHub PR hooks

when a PR is created or updated, Jenkins runs the build, and Jenkins reports the status back to the PR in GitHub

GitHub personal access token as a credential in Jenkins. Go to Global Credentials and click Add Credentials. Use the following configuration:
Kind: Secret text
Scope: Global
Secret: <personal access token>
ID: github-<GitHub Username>-pat
Description: github-<GitHub Username>-pat

GitHub Pull Request Builder System Configuration
We can configure the common settings in System Configuration to avoid redundant work. Go to System Configuration and find the GitHub Pull Request Builder section

Configuring the premerge trigger

check the box for GitHub Pull Request Builder:
GitHub API credentials: https://api.github.com : <GitHub Username>.
Admin list: <GitHub Username> (for example, calvinpark. This allows PRs from the specified GitHub user to start a build without additional check

    + pipeline and click Configure. Find the Pipeline | Definition | SCM section and apply the following configurations:

Repositories | Advanced | Refspec (This is one long space-delimited line. See the book's GitHub repository for a text file with this line that you can copy): +refs/heads/*:refs/remotes/origin/* +refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/*
Branches to build | Branch Specifier: ${ghprbActualCommit}
Lightweight checkout: Uncheck

    + requiring a successful build for a merge 
    
adder repository in GitHub | Settings | Branches | Branch protection rules |Add rule. Configure as follows:
Branch name pattern: main
Require status check pass before merging: Check
Status checks that are required: Jenkins CI



# GitOps-Driven CD pipeline with docker hub and more jenkinsfile features 