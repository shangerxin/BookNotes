What's new in c# 9.0;Note=Erxin

# Reference 
- link 
https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9

- version, C# 9.0 is supported on .NET 5.


# Records 
- C# 9.0 introduces record types, which are a reference type that provides synthesized methods to provide value semantics for equality. immutable by default 

public record Person
{
    public string LastName { get; }
    public string FirstName { get; }

    public Person(string first, string last) => (FirstName, LastName) = (first, last);
}

public record Teacher : Person
{
    public string Subject { get; }

    public Teacher(string first, string last, string sub)
        : base(first, last) => Subject = sub;
}

public sealed record Student : Person
{
    public int Level { get; }

    public Student(string first, string last, int level) : base(first, last) => Level = level;
}


The record definition creates a Person type that contains two readonly properties: FirstName and LastName. The Person type is a reference type

compiler synthesizes several other methods for you 

    Methods for value-based equality comparisons
    Override for GetHashCode()
    Copy and Clone members
    PrintMembers and ToString()

If the base type is object, the property is virtual. If the base type is another record type, the property is an override. If the record type is sealed, the property is sealed. The synthesized GetHashCode uses the GetHashCode from all properties and fields declared in the base type and the record type

The types of the two records must match as well as all properties shared among the record types being equal

var person = new Person("Bill", "Wagner");
var student = new Student("Bill", "Wagner", 11);

Console.WriteLine(student == person); // false

- Deconstruct method for positional records. The Deconstruct method has parameters that match the names of all public properties in the record type

public record Pet(string Name)
{
    public void ShredTheFurniture() =>
        Console.WriteLine("Shredding furniture");
}

public record Dog(string Name) : Pet(Name)
{
    public void WagTail() =>
        Console.WriteLine("It's tail wagging time");

    public override string ToString()
    {
        StringBuilder s = new();
        base.PrintMembers(s);
        return $"{s.ToString()} is a dog";
    }
}

- with expressions. A with expression instructs the compiler to create a copy of a record, but with specified properties modified

Person brother = person with { FirstName = "Paul" };



# Init only setters 
- Init only setters provide consistent syntax to initialize members of an object. Property initializers make it clear which value is setting which property

public struct WeatherObservation
{
    public DateTime RecordedAt { get; init; }
    public decimal TemperatureInCelsius { get; init; }
    public decimal PressureInMillibars { get; init; }

    public override string ToString() =>
        $"At {RecordedAt:h:mm tt} on {RecordedAt:M/d/yyyy}: " +
        $"Temp = {TemperatureInCelsius}, with {PressureInMillibars} pressure";
}

caller can use property initializer syntax to set the values, while still preserving the immutability 

var now = new WeatherObservation 
{ 
    RecordedAt = DateTime.Now, 
    TemperatureInCelsius = 20, 
    PressureInMillibars = 998.0m 
};

a Main method. In a sense, you can think that one file contains the statements that would normally be in the Main method of a Program class.


# Top-level statements 
- remove unnecessary veremony from many applications, The top-level statements may contain async expressions. In that case, the synthesized entry point returns a Task, or Task<int>.

using System;

Console.WriteLine("Hello World!");



# Pattern matching enhancements 
- c# 9.0 include new patterns 

Type patterns match a variable is a type
Parenthesized patterns enforce or emphasize the precedence of pattern combinations
Conjunctive and patterns require both patterns to match
Disjunctive or patterns require either pattern to match
Negated not patterns require that a pattern doesnâ€™t match
Relational patterns require the input be less than, greater than, less than or equal, or greater than or equal to a given constant.

- examples 

public static bool IsLetter(this char c) =>
    c is >= 'a' and <= 'z' or >= 'A' and <= 'Z';
    
public static bool IsLetterOrSeparator(this char c) =>
    c is (>= 'a' and <= 'z') or (>= 'A' and <= 'Z') or '.' or ',';

- fit and finish features, omit the new type when the left side already provide the type information; 

private List<WeatherObservation> _observations = new();

var forecast = station.ForecastFor(DateTime.Now.AddDays(2), new());

- you use the _ for any argument. For more information, see the Input parameters of a lambda expression section of the Lambda expressions article

https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#input-parameters-of-a-lambda-expression



# Native sized integers 

# Function pointers 

# Suppress emitting localsinit flag

# Target-typed new expressions 

# Static anonymous functions 
- Starting in C# 9.0, you can add the static modifier to lambda expressions or anonymous methods. Static lambda expressions are analogous to the static local functions: a static lambda or anonymous method can't capture local variables or instance state.

Must be static
Must be parameterless
Must return void
Must not be a generic method
Must not be contained in a generic class
Must be accessible from the containing module



# Target-typed conditional expressions 

# Covariant return types 

# Extension GetEnumerator support for foreach loops 

# Lambda discard parameters 

# Attributes on local functions 

# Mondule initializers 

# New features for partial methods 



The document is not completed yet till now 
https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9








