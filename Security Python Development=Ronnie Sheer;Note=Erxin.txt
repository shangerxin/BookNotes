Security Python Development=Ronnie Sheer;Note=Erxin


# Reference 
- https://www.linkedin.com/learning/secure-coding-in-python/developing-securely?autoplay=true&dApp=52800306&resume=false&u=2101329

- OWASP Top 10, list of top 10


# Setting up 
- avoid cluttering, typo url 

- dependency management 

pip install

includes a simple security check 

- common vulnerabilities 

publish known

pipenv uses safety 

$ pipenv check 
- avoiding python pitfalls 

- a few words about encryption and injection 
https://xkcd.com/327/

sql injection 


# Avoiding python pitfalls 
- dynamic typing with python 

True, False values access several kinds of default 'True'/'False types 

explicit check type 

- explicit assertions with pythons 

great for testing and bugging 

```
assert can_access
```

instead of explicit check instead of using assert 

code has optimized mode. python will ignore assertions 

$ pipenv run python -O *.py 

- don't get yourself into a Pickle, insecure serialize 

class DeleteImportant:
    def __reduce__(self):
        """
        will automatic run during unpickle process 
        """
        return (subprocess.Popen, (('rm', 'important.txt')))
        
data = pickle.dumps(DeleteImportant())

pickle.load(data) 


- challenge secure the endpoint 




# Securing django 
- django support several kinds of security sensitive middle wares 
- using a separate python environment 
 

$ pipenv install 
will install isolate environment 

- generating new projects 

secret key 

put secret key into file system

change django admin path to harder to guess, we can also trace the ips who want to access admin page 

- django settings module keeping secrets and the dangers of debug mode 

debug mode 

using djang git ignore template avoid commit unitendent database into source control 



# Securing a restful API 
- sensitive data exposure, safe serializing 

robust serializer 

will introduce problem, explicit expose fields  

fields = '__all__' 
...



- permissions 

no author can not login without acceptence 

.isField is True 

- testing and security

code without tests is broken by design

automated testing ensures senstive data is not exposed in the future 

keeps intengrity of authentication and permissions 
  

- challenge, run the test fix the code 

- solution run the test, fix the code 

remove the fields limitation from the djang meta class definiton 

```
class PostSerializer(serializer.MOdelSerilizer):
    class Meta:
        model = Post 
        fields = ['author', 'text']
        
    ...
```


# Challenge of securing flask 
- Check the package maintance frequency 

- flask secrets 

verify flexible 

- password hashing with Flask 

```
import os 
print(os.urandom(64))
```

or 
$ python -c 'import os; print(os.urandom(64))'

to generate secret key 

app = Flask(__name__)

app.secret_key = f.read()


- password hashing nightmare, never store password in plaintext 




# Conclusion 