Functional python programming=Steven F. Lott;Note=Erxin


# Preface
- exploratory data analysis (EDA)
- sample

https://github.com/PacktPublishing/Functional-Python-Programming-Second-Edition/


- classic functional programming 

Research Topics in Functional Programming:

http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf



# Understanding functional programming 
- first-class 

higher order functions, These are functions that accept a function as an argument or return a function as a value

pure functions, pure function in Python, we have to write local-only code. This means we have to avoid the global statements

immutable data, We can make extensive use of tuples and namedtuples to provide more complex data structures that are immutable

strict and non-strict evaluation 

recursion instead of an explicit loop state, example \
```
not any(n%p==0 for p in range(2,int(math.sqrt(n))+1))
```

functional type systems 

- tools 

pylint, mypy can be part of a toolchain used to produce high-quality

- Currying: The type systems will employ currying to reduce multiple-argument functions to single-argument functions. 

- Referential transparency: When looking at lazy evaluation and the various kinds of optimizations

- Monads: These are purely functional constructs that allow us to structure a sequential pipeline

PyMonad library for this

- Tail Call Optimization (TCO): we must optimize recursions manually using a generator expression.

- always use file in with 

```
def open(iname: str, oname: str):
    global ifile, ofile
    ifile= open(iname, "r")
    ofile= open(oname, "w")  
```

- generators 

g_f_x = (g(y) for y in (f(x) for x in range()))

- support for maintaining a list in sorted order without having to sort the list after each insertion

- stateful sets,  frozenset from an iterable in the same way we create a tuple object from an iterable fronzenset(some_iterable) method


# Working with collections 
- built-in functions 

any()
all()
zip()
sum()
reversed()
enumerate()

- function varieties 
scalar functions 
collection functions 
reduction, fold values in the collection together 
mapping 
filter, applies a scalar function to all items of a collection 

- parsing an xml 
- parsing a file at a higher level, JSON 
- pairing up items from a sequence, zip
- use iter() an explicit next() function

clarify the use of the next() and iter() functions

- applying generator expressions to scalar functions 

- using sum and count for statistics 

- reverse() 
- enumerate()



# Higher-order functions 
- looked at 

max() and min()
map()
filter()
iter()
sorted()

- filter() function is to use and apply a decision function called a predicate to each value in a collection.
-  iter(object[, sentinel]) function creates an iterator over an object of one of the collection classes. The iterator created in this case will call object with no arguments for each call to its __next__() method; if the value returned is equal to sentinel, StopIteration will be raised

- define a callable class 

from typing import Callable, Optional, Any

class NullAware:
    def __init__(
            self, some_func: Callable[[Any], Any]) -> None:
        self.some_func = some_func
    def __call__(self, arg: Optional[Any]) -> Optional[Any]:
        return None if arg is None else self.some_func(arg)
        
- patterns 
return a generator, 
act as a generator, 
materialize a collection, 
reduce a collection, 
scalar, Some functions act on individual data items. These can be higher-order functions if they accept another function as an argument

- Parallelism: We can create two copies of the data and rank each copy.
- Serialism: We can compute ranks on one variable and save the results as a wrapper that includes the original raw data



# The itertools module 
- count, unlimited version of range()
- cycle(), reiterate a cycle of values 
- repeat(), repeat a single value an indefinite number of times 
- accumulate()
- chain()
- compress()
- dropwhile()
- filterfalse()
- groupby()
- islice() 
- starmap()
- takewhile()
- tee(), it1, it2, ...itn splits one iterator into n 
- zip_longest(), with fillvalue 
- product() 
- permutations()
- combinations()
- combinations_with_replacement()
- other functions can be implemented 
take(n, iterable)
tabulate(function, start=0)
consume(iterator,n)
nth(iterable, n, default=None)
qualify(iterable,pred=bool), counts how many times the predicate is true 
padnone(iterable), returns the sequence elements and then returns None 
ncycles(iterable, n), this returns the sequence elements n times 
dotproduct(vec1, vec2), this is the essential definition of a dot product 
flatten(listOfLists), this flattens one level of nesting 
repeatfunc(func, times=None, *args), call to func repeatedly with specified arguments 
pairwise(iterable), s -> (s0, s1), (s1, s2)...
grouper(iterable, n, fillvalue=None)
roundrobin(*terables), roundrobin('ABC', 'D', 'EF') --> A D E B F C 
partition(pred, iterable), this use a predicate to partition entries into False entries and True entries 
unique_everseen(iterable, key=None), list unique elements, preserving order 
unique_justeen(iterable, key=None), lists unique elements, preserving order
iter_except(func, exception, first=None), repeatedly until an exception is raised 

- Euclidean distance measures the hypotenuse of a right-angled triangle among the three points in an RGB space. The Manhattan distance sums the edges of each leg of the right-angled triangle among the three points

- WSGI standard

A great deal of information is present at the following link: http://wsgi.readthedocs.org/en/latest/.

WSGI implementations, visit: https://wiki.python.org/moin/WSGIImplementations.

- table of the Cumulative Distribution Function (CDF) for selected  values and given degrees of freedom
- taln = (n-1)! The complete gamma function for integers can rely on the factorial function we defined previously.

(2n)!/(4^n * n!) * pi^0.5









