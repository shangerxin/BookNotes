Python GUI programming with Tkinter=Alan D. Moore;Note=Erxin


# Introduction 
- reference 
Python GUI programming with Tkinter
https://learning.oreilly.com/library/view/python-gui-programming/9781801815925/

Python GUI programming a complete reference 
https://learning.oreilly.com/library/view/python-gui-programming/9781838988470/

- hello world 
```
import tkinter as tk
root = tk.Tk()
# set the title
root.title('Banana interest survey')
# set the root window size
root.geometry('640x480+300+300')
root.resizable(False, False)
label = tk.Label(root, text="Hello World")
label.pack()
root.mainloop()
```

- build widget

title = tk.Label(
  root,
  text='Please take the survey',
  font=('Arial 16 bold'),
  bg='brown',
  fg='#FF0'
)

- three geometry manager methods available:

pack() is the oldest, and simply adds widgets to one of the four sides of a window sequentially.
grid() is newer and preferred, and allows you to place widgets within a 2-dimensional grid table.
place() is a third option, which allows you to put widgets at specific pixel coordinates. 

name_label.grid(row=1, column=0)
title.grid(columnspan=2)

- response to user action 

def on_submit():
  """To be run when the user submits the form"""
  pass
submit_btn.configure(command=on_submit)

- there are four types of control variables:

StringVar: Used to store strings of any length
IntVar: Used to store integers
DoubleVar: Used to store floating-point values
BooleanVar: Used to store Boolean (True/False) values

- special abilities 

We can create a two-way binding between a control variable and a widget

We can set up a trace on the variable. A trace binds a variable event to callback function 

We can establish relationships between widgets. 

	+ example 
	
name_var = tk.StringVar(root)
name_label = tk.Label(root, text='What is your name?')
name_inp = tk.Entry(root, textvariable=name_var)

eater_var = tk.BooleanVar()
eater_inp = tk.Checkbutton(
  root, variable=eater_var, text='Check this box if you eat bananas'
)

num_var = tk.IntVar(value=3)
num_label = tk.Label(text='How many bananas do you eat per day?')
num_inp = tk.Spinbox(
  root, textvariable=num_var, from_=0, to=1000, increment=1
)

color_var = tk.StringVar(value='Any')
color_label = tk.Label(
  root, 
  text='What is the best color for a banana?'
)
color_choices = (
  'Any', 'Green', 'Green Yellow', 'Yellow', 'Brown Spotted', 'Black'
)
color_inp = tk.OptionMenu(
  root, color_var, *color_choices
)

# Example, don't add this to the program
menu = tk.OptionMenu(parent, ctrl_var, opt1, opt2, ..., optN)

plantain_var = tk.BooleanVar()
plantain_yes_inp = tk.Radiobutton(
  plantain_frame, text='Yes', value=True, variable=plantain_var
)
plantain_no_inp = tk.Radiobutton(
  plantain_frame, 
  text='Ewww, no!', 
  value=False, 
  variable=plantain_var
)

output_var = tk.StringVar(value='')
output_line = tk.Label(
  root, textvariable=output_var, anchor='w', justify='left'
)

def on_submit():
	"""To be run when the user submits the form"""
	name = name_var.get()
	
	+ Extracting the value of our OptionMenu, Checkbutton, and Radiobutton widgets

color = color_var.get()
banana_eater = eater_var.get()
plantain_eater = plantain_var.get()

- control variables is the way to make two way binging 

output_var = tk.StringVar(value='')
# remove the call to output_line.grid() in the layout section!
tk.Label(
	root, textvariable=output_var, anchor='w', justify='left'
).grid(row=100, columnspan=2, sticky="NSEW")



# Design GUI application 
- used controls 

Labels
Date entry
Text entry
Number entry
Check boxes
Radio buttons
Select list
Long text entry
Buttons
Boxed frames with headers

myentry = ttk.Entry(root, textvariable=my_string_var, width=20)

- radio buttons 

buttons = tk.Frame(root)
r1 = ttk.Radiobutton(
  buttons,
  variable=my_int_var,
  value=1,
  text='One'
)
r2 = ttk.Radiobutton(
  buttons,
  variable=my_int_var,
  value=2,
  text='Two'
)

- combobox widget 

mycombo = ttk.Combobox(
  root, textvariable=my_string_var,
  values=['This option', 'That option', 'Another option']
)

- label frame 

mylabelframe = ttk.LabelFrame(
  root,
  text='Button frame'
)
b1 = ttk.Button(
  mylabelframe,
  text='Button 1'
)
b2 = ttk.Button(
  mylabelframe,
  text='Button 2'
)
b1.pack()
b2.pack()

- button 

mybutton = ttk.Button(
  root,
  command=my_callback,
  text='Click Me!',
  default='active'
)

- create controls 

variables['Lab'] = tk.StringVar()
ttk.Label(r_info, text='Lab').grid(row=2, column=0)
labframe = ttk.Frame(r_info)
for lab in ('A', 'B', 'C'):
  ttk.Radiobutton(
    labframe, value=lab, text=lab, variable=variables['Lab']
).pack(side=tk.LEFT, expand=True)
labframe.grid(row=3, column=0, sticky=(tk.W + tk.E))

- pack 

buttons = tk.Frame(drf)
buttons.grid(sticky=tk.E + tk.W)
save_button = ttk.Button(buttons, text='Save')
save_button.pack(side=tk.RIGHT)
reset_button = ttk.Button(buttons, text='Reset')
reset_button.pack(side=tk.RIGHT)



# Organizing our code with classes 
- Begin the new variable class by creating a subclass of tk.StringVar called JSONVar

class JSONVar(tk.StringVar):
  """A Tk variable that can hold dicts and lists"""
  
    def __init__(self, *args, **kwargs):
		kwargs['value'] = json.dumps(kwargs.get('value')
		super().__init__(*args, **kwargs)
	
	def set(self, value, *args, **kwargs):
		string = json.dumps(value)
		super().set(string, *args, **kwargs)
	
	def get(self, *args, **kwargs):
		string = super().get(*args, **kwargs)
		return json.loads(string)
	
	root = tk.Tk()
	var1 = JSONVar(root)
	var1.set([1, 2, 3])
	var2 = JSONVar(root, value={'a': 10, 'b': 15})
	print("Var1: ", var1.get()[1])
	# Should print 2
	print("Var2: ", var2.get()['b'])
	# Should print 15

- subclassing Tk 

# tkinter_classes_demo.py
class Application(tk.Tk):
  """A simple form application"""
  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
	
    self.jsonvar = JSONVar(self)
    self.output_var = tk.StringVar(self)
	
    self.jsonvar.trace_add('write', self._on_data_change)
	
  def _on_data_change(self, *args, **kwargs):
    data = self.jsonvar.get()
    output = ''.join([
    f'{key} = {value}\n'
    for key, value in data.items()
    ])
    self.output_var.set(output)
	
- trace_add() specifies the event that the trace will trigger on; it can be one of the following:

read: The variable value is read (by a get() call, for example).
write: The variable value is modified (by a set() call, for example).
unset: The variable is deleted.
array: This is an artifact of Tcl/Tk, not really meaningful in Python, but still valid syntax. You will likely never us


# Reducing user error with validation and automation 
- validation 

validate: This option determines which type of event will trigger the validation callback.
validatecommand: This option takes the command that will determine if the data is valid.
invalidcommand: This option takes a command that will run if validatecommand returns False.

- validation arguments 

Value 		Trigger event

none		Never. This option turns off validation.

focusin		The user selects or enters the widget.

focusout	The user leaves the widget.

focus		Both focusin and focusout.

key			The user presses a key while in the widget.

all			Any of the focusin, focusout, or key events.

passing the always_good function to root.register(). Then we can pass this reference in a tuple to validatecommand.

- validatecommand tuple 

Code	Value passed

%d		A code indicating the action being attempted: 0 for delete, 1 for insert, and -1 for other events. Note that this is passed as a string, and not as an integer.

%P		The proposed value that the field would have after the change (key events only).

%s		The value currently in the field (key events only).

%i		The index (from 0) of the text being inserted or deleted on key events, or -1 on non-key events. Note that this is passed as a string, not an integer.

%S		For insertion or deletion, the text that is being inserted or deleted (key events only).

%v		The widget's validate value.

%V		The event type that triggered validation, one of focusin, focusout, key, or forced (indicating the widget's variable was changed).

%W		The widget's name in Tcl/Tk, as a string.

- usefule validated entry 

# validate_demo.py
# Place just before root.mainloop()
entry2 = tk.Entry(root)
entry2.grid(pady=10)
def no_t_for_me(proposed):
  return 't' not in proposed
validate2_ref = root.register(no_t_for_me)
entry2.configure(
  validate='all',
  validatecommand=(validate2_ref, '%P')
)

- invalidcommand argument works as same as validatecommand argument 
1036831036R
entry3 = tk.Entry(root)
entry3.grid()
entry3_error = tk.Label(root, fg='red')
entry3_error.grid()
def only_five_chars(proposed):
  return len(proposed) < 6
def only_five_chars_error(proposed):
  entry3_error.configure(
  text=f'{proposed} is too long, only 5 chars allowed.'
  )
validate3_ref = root.register(only_five_chars)
invalid3_ref = root.register(only_five_chars_error)
entry3.configure(
  validate='all',
  validatecommand=(validate3_ref, '%P'),
  invalidcommand=(invalid3_ref, '%P')
)

- creating validated widget classes 

# five_char_entry_class.py
class FiveCharEntry(ttk.Entry):
  """An Entry that truncates to five characters on exit."""
  def __init__(self, parent, *args, **kwargs):
    super().__init__(parent, *args, **kwargs)
    self.error = tk.StringVar()
    self.configure(
      validate='all',
      validatecommand=(self.register(self._validate), '%P'),
      invalidcommand=(self.register(self._on_invalid), '%P')
    )
  def _validate(self, proposed):
    return len(proposed) <= 5
  def _on_invalid(self, proposed):
    self.error.set(
      f'{proposed} is too long, only 5 chars allowed!'
    )
	
root = tk.Tk()
entry = FiveCharEntry(root)
error_label = ttk.Label(
  root, textvariable=entry.error, foreground='red'
)
entry.grid()
error_label.grid()
root.mainloop()

- creating a date field 

# DateEntry.py
import tkinter as tk
from tkinter import ttk
from datetime import datetime
class DateEntry(ttk.Entry):
  """An Entry for ISO-style dates (Year-month-day)"""
  def __init__(self, parent, *args, **kwargs):
    super().__init__(parent, *args, **kwargs)
    self.configure(
      validate='all',
      validatecommand=(
        self.register(self._validate),
        '%S', '%i', '%V', '%d'
      ),
      invalidcommand=(self.register(self._on_invalid), '%V')
    )
    self.error = tk.StringVar()
	
  def _toggle_error(self, error=''):
    self.error.set(error)
    self.config(foreground='red' if error else 'black')
	
  def _validate(self, char, index, event, action):
    # reset error state
    self._toggle_error()
    valid = True
    # ISO dates only need digits and hyphens
    if event == 'key':
      if action == '0':
        valid = True
      elif index in ('0', '1', '2', '3', '5', '6', '8', '9'):
        valid = char.isdigit()
      elif index in ('4', '7'):
        valid = char == '-'
      else:
        valid = False
		
if __name__ == '__main__':
  root = tk.Tk()
  entry = DateEntry(root)
  entry.pack()
  ttk.Label(
    textvariable=entry.error, foreground='red'
  ).pack()
  # add this so we can unfocus the DateEntry
  ttk.Entry(root).pack()
  root.mainloop()
  
- building a validating mixin class 

# data_entry_app.py
class ValidatedMixin:
  """Adds a validation functionality to an input widget"""
  def __init__(self, *args, error_var=None, **kwargs):
    self.error = error_var or tk.StringVar()
    super().__init__(*args, **kwargs)
	
    vcmd = self.register(self._validate)
    invcmd = self.register(self._invalid)
    self.configure(
      validate='all',
      validatecommand=(vcmd, '%P', '%s', '%S', '%V', '%i', '%d'),
      invalidcommand=(invcmd, '%P', '%s', '%S', '%V', '%i', '%d')
    )
	
  def _toggle_error(self, on=False):
    self.configure(foreground=('red' if on else 'black'))
	
  def _validate(self, proposed, current, char, event, index, action):
    self.error.set('')
    self._toggle_error()
    valid = True
    # if the widget is disabled, don't validate
    state = str(self.configure('state')[-1])
    if state == tk.DISABLED:
      return valid
    if event == 'focusout':
      valid = self._focusout_validate(event=event)
    elif event == 'key':
      valid = self._key_validate(
      proposed=proposed,
      current=current,
      char=char,
      event=event,
      index=index,
      action=action
    )
    return valid
	
  def _focusout_validate(self, **kwargs):
    return True
  def _key_validate(self, **kwargs):
    return True
	
  def _invalid(self, proposed, current, char, event, index, action):
    if event == 'focusout':
      self._focusout_invalid(event=event)
    elif event == 'key':
      self._key_invalid(
        proposed=proposed,
        current=current,
        char=char,
        event=event,
        index=index,
        action=action
      )
  def _focusout_invalid(self, **kwargs):
    """Handle invalid data on a focus event"""
    self._toggle_error(True)
  def _key_invalid(self, **kwargs):
    """Handle invalid data on a key event.  
    By default we want to do nothing"""
    pass
	
  def trigger_focusout_validation(self):
    valid = self._validate('', '', '', 'focusout', '', '')
    if not valid:
      self._focusout_invalid(event='focusout')
    return valid
	
- building validating input widgets with ValidatedMixin

# data_entry_app.py
class RequiredEntry(ValidatedMixin, ttk.Entry):
  """An Entry that requires a value"""
  def _focusout_validate(self, event):
    valid = True
    if not self.get():
      valid = False
      self.error.set('A value is required')
    return valid
	
	
class DateEntry(ValidatedMixin, ttk.Entry):
  """An Entry that only accepts ISO Date strings"""
  def _key_validate(self, action, index, char, **kwargs):
    valid = True
    if action == '0':  # This is a delete action
      valid = True
    elif index in ('0', '1', '2', '3', '5', '6', '8', '9'):
      valid = char.isdigit()
    elif index in ('4', '7'):
      valid = char == '-'
    else:
      valid = False
    return valid
  def _focusout_validate(self, event):
    valid = True
    if not self.get():
      self.error.set('A value is required')
      valid = False
    try:
      datetime.strptime(self.get(), '%Y-%m-%d')
    except ValueError:
      self.error.set('Invalid date')
      valid = False
    return valid
	
- range limited spinbutton 
-- validating radio button widget can also be implemented 


# Planning for exapnsion of app 
- MVC, model view controller 
- readme file information 

README file, but as a basic guideline, consider the following sections:

Description: A brief description of the program and its function. We can reuse the description from our specification, or something like it. This might also contain a brief list of the main features.

Author information: The names of the authors and copyright date. This is especially important if you plan to share your software, but even for something in-house, it's useful for future maintainers to know who created the software and when.

Requirements: A list of the software and hardware requirements for the software, if any.

Installation: Instructions for installing the software, its prerequisites, dependencies, and basic setup.

Configuration: How to configure the application and what options are available. This is generally aimed at the command-line or configuration file options, not options set interactively in the program.

Usage: A description of how to launch the application, command-line arguments, and other notes a user would need to know to use the basic functionality of the application.

General notes: A catch-all for notes or critical information users should be aware of.
Bugs: A list of known bugs or limitations in the application.

- use version control, git 
- create python package 


# Creating menus with menu and tkinter dialogs 
- dialogs 
messagebox, for displaying simple messages and warnings
filedialog, for prompting the user for a file or folder path
simpledialog, for requesting string, integer, or float values from a user

- message box 

import tkinter as tk
from tkinter import messagebox
see_more = messagebox.askyesno(
  title='See more?',
  message='Would you like to see another box?',
  detail='Click NO to quit'
)
if not see_more:
  exit()
messagebox.showinfo(
  title='You got it',
  message="Ok, here's another dialog.",
  detail='Hope you like it!'
)

messagebox.showerror(
	title='Error',
	message=message,
	detail=detail
)

- using filedialog 

askdirectory()
askopenfile()
askopenfilename()
askopenfilenames() 
asksaveasfile()
asksaveasfilename()

	+ example 
filename = filedialog.asksaveasfilename(
  title='Select the target file for saving records',
  defaultextension='.csv',
  filetypes=[('CSV', '*.csv *.CSV')]
)

- menu widget 

# menu_demo.py
import tkinter as tk
root = tk.Tk()
root.geometry('200x150')
main_text = tk.StringVar(value='Hi')
label = tk.Label(root, textvariable=main_text)
label.pack(side='bottom')

main_menu = tk.Menu(root)
root.config(menu=main_menu)

main_menu.add('command', label='Quit', command=root.quit)

- menu item types 

Item type		Description

command			A labeled item that executes a command when clicked

checkbutton		A labeled checkbutton that can be tied to a Boolean control variable

radiobutton		A labeled radio button that can be tied to a control variable

separator		A system-appropriate visual separator, usually a black line

cascade			A submenu, implemented as a second Menu instance

- create submenu 

text_menu = tk.Menu(main_menu, tearoff=False)

text_menu.add_command(
  label='Set to "Hi"',
  command=lambda: main_text.set('Hi')
)
text_menu.add_command(
  label='Set to "There"',
  command=lambda: main_text.set('There')
)

main_menu.add_cascade(label="Text", menu=text_menu)

- using checkbutton and radiobutton items 

font_bold = tk.BooleanVar(value=False)
font_size = tk.IntVar(value=10)
def set_font(*args):
  size = font_size.get()
  bold = 'bold' if font_bold.get() else ''
  font_spec = f'TkDefaultFont {size} {bold}'
  label.config(font=font_spec)
font_bold.trace_add('write', set_font)
font_size.trace_add('write', set_font)
set_font()

appearance_menu = tk.Menu(main_menu, tearoff=False)
main_menu.add_cascade(label="Appearance", menu=appearance_menu)
appearance_menu.add_checkbutton(label="Bold", variable=font_bold)

size_menu = tk.Menu(appearance_menu, tearoff=False)
appearance_menu.add_cascade(label='Font size', menu=size_menu)
for size in range(8, 24, 2):
  size_menu.add_radiobutton(
    label="{} px".format(size),
    value=size, variable=font_size
  )
  
root.mainloop()

- implementing the ABQ application menu 

```
# mainmenu.py
"""The Main Menu class for ABQ Data Entry"""
import tkinter as tk
from tkinter import messagebox
# application.py, at the top after the import statements
from .mainmenu import MainMenu

class MainMenu(tk.Menu):
  """The Application's main menu"""
  def __init__(self, parent, **kwargs):
    super().__init__(parent, **kwargs)
	
	
	self.title("ABQ Data Entry Application")
	self.columnconfigure(0, weight=1)
	menu = MainMenu(self)
	self.config(menu=menu)
	
	# mainmenu.py, inside MainMenu.__init__()
    help_menu = tk.Menu(self, tearoff=False)
    help_menu.add_command(label='About…', command=self.show_about)
	
    file_menu.add_command(
      label="Select file…",
      command=lambda: self.event_generate('<<FileSelect>>')
    )
	
```

- add cascade menu items 
```
	# mainmenu.py, at the end of MainMenu.__init__()
    self.add_cascade(label='File', menu=file_menu)
    self.add_cascade(label='Options', menu=options_menu)
    self.add_cascade(label='Help', menu=help_menu)
	
```

- persistent settings 

pickle 

config-parser 

json 

xml

sqlite 



# Navigating records with TreeVIew and Notebook 
- treeview 

tv = ttk.Treeview(
  root, columns=['size', 'modified'], selectmode='none'
)

tv.heading('#0', text='Name')
tv.heading('size', text='Size', anchor='center')
tv.heading('modified', text='Modified', anchor='e')

- attributes 

text: The text displayed for the heading. By default, it's blank.
anchor: The alignment of the text; it can be any of eight cardinal directions or center, specified as strings or Tkinter constants.
command: A callback to run when the heading is clicked. This might be used to order the rows by that column, or select all the values in the column, for example.
image: An image to display in the heading.

- column 

tv.column('#0', stretch=True)
tv.column('size', width=200)

- treeview configure 

tv.pack(expand=True, fill='both')

- populating a treeview widget with data 

mytreeview.insert(
  parent, 'end', iid='item1',
  text='My Item 1', values=['12', '42']
)

- treeview virtual events 

Event	Generated

<<TreeviewSelect>>	When the user selects an item

<<TreeviewOpen>>	When a parent item is expanded to display child items

<<TreeviewClose>>	When an open parent item is closed again

	+ example 
# treeview_demo.py
status = tk.StringVar()
tk.Label(root, textvariable=status).pack(side=tk.BOTTOM)

tv.bind('<<TreeviewOpen>>', show_directory_stats)
tv.bind('<<TreeviewClose>>', lambda _: status.set(''))

- notebook, multiple tabs 
```
# notebook_demo.py
import tkinter as tk
from tkinter import ttk
root = tk.Tk()
notebook = ttk.Notebook(root)
notebook.grid()

notebook.add(b_label, text='Bananas', padding=20)
notebook.add(p_label, text='Plantains', padding=20)

notebook.insert(1, p_label, text='Plantains', padding=20)

notebook.tab(0, underline=0)
notebook.tab(1, underline=0)

notebook.enable_traversal() # enable general key traversal 

notebook.select(0)

notebook.select(p_label)


# application.py, in Application.__init__()
self.notebook = ttk.Notebook(self)
self.notebook.enable_traversal()
self.notebook.grid(row=1, padx=10, sticky='NSEW')
```

- add new sub menu 

go_menu = tk.Menu(self, tearoff=False)
go_menu.add_command(
  label="Record List",
  command=self._event('<<ShowRecordlist>>')
)
go_menu.add_command(
  label="New Record",
  command=self._event('<<NewRecord>>')
)


# Improve the look with styles and themes 
- PhotoImage

myimage = tk.PhotoImage(file='my_image.png')

mylabel_1 = tk.Label(root, text='Banana', image=myimage)
mylabel_2 = tk.Label(
  root,
  text='Plantain',
  image=myimage,
  compound=tk.LEFT
)

- extend image support with Pillow 

import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
from PIL import Image, ImageTk, ImageFilter

class PictureViewer(tk.Tk):
	def __init__(self, *args, **kwargs):
		super().__init__(*args, **kwargs)
		self.title('My Image Viewer')
		self.geometry('800x600')
		self.rowconfigure(0, weight=1)
		self.columnconfigure(0, weight=1)

		self.image_display = ttk.Label(self)
		self.image_display.grid(columnspan=3)
		ttk.Button(
		  self, text='Select image', command=self._choose_file
		).grid(row=1, column=0, sticky='w')
	
	def _choose_file(self):
		filename = filedialog.askopenfilename(
		  filetypes=(
			('JPEG files', '*.jpg *.jpeg *.JPG *.JPEG'),
			('PNG files', '*.png *.PNG'),
			('All files', '*.*')
		  ))
		if filename:
		  self.image = Image.open(filename)
		  self.photoimage = ImageTk.PhotoImage(self.image)
		  self.image_display.config(image=self.photoimage)
		  
- adding the company logo to ABQ data entry 

# application.py, in Application.__init__()
self.logo = tk.PhotoImage(file='abq_logo_32x20.png')
ttk.Label(
  self, text="ABQ Data Entry Application",
  font=("TkDefaultFont", 16),
  image=self.logo, compound=tk.LEFT
).grid(row=0)


self.logo = tk.PhotoImage(
  file=r'C:\Users\myuser\ABQ_Data_Entry\abq_logo_32x20.png'
)

- set window icon 

# application.py, inside Application.__init__()
self.taskbar_icon = tk.PhotoImage(file=images.ABQ_LOGO_64)
self.iconphoto(True, self.taskbar_icon)

- data recrod form 

self.save_button_logo = tk.PhotoImage(file=images.SAVE_ICON)
self.savebutton = ttk.Button(
  buttons, text="Save", command=self._on_save,
  image=self.save_button_logo, compound=tk.LEFT
)
#...
self.reset_button_logo = tk.PhotoImage(file=images.RESET_ICON)
self.resetbutton = ttk.Button(
  buttons, text="Reset", command=self.reset,
  image=self.reset_button_logo, compound=tk.LEFT
)

- photo image 

# mainmenu.py, inside MainMenu.__init__()
file_menu.add_command(
  label="Select file…", command=self._event('<<FileSelect>>'),
  image=self.icons['file_open'], compound=tk.LEFT
)
#...
go_menu.add_command(
  label="Record List", command=self._event('<<ShowRecordlist>>'),
  image=self.icons['record_list'], compound=tk.LEFT
)
go_menu.add_command(
  label="New Record", command=self._event('<<NewRecord>>'),
  image=self.icons['new_record'], compound=tk.LEFT
)

- styling tkinter widgets 

import tkinter as tk
text = tk.Text(width=50, height=20, bg='black', fg='lightgreen')
text.pack()

- font 

namedfont = tk.StringVar()
family = tk.StringVar()
size = tk.IntVar()
tk.OptionMenu(root, namedfont, *font.names()).pack()
tk.OptionMenu(root, family, *font.families()).pack()
tk.Spinbox(root, textvariable=size, from_=6, to=128).pack()
def setFont():
  font_obj = font.nametofont(namedfont.get())
  font_obj.configure(family=family.get(), size=size.get())
tk.Button(root, text='Change', command=setFont).pack()

- build a theme selector 

fields = {
'theme': {'type': 'str', 'value': 'default'}
}
	
style = ttk.Style()
theme = self.settings.get('theme').get()
if theme in style.theme_names():
  style.theme_use(theme)
  
  
  
# Maintaining cross-platform compatibility 
- path separator translation 

use the pathlib module 

- case sensitivity 

Windows no 
macOS	not by default 
Linux 	yes 
BSD, most other unix system 	yes 

- symbolic links 

A symbolic link is a special filesystem-level construct that appears to be a file or directory but is actually just a pointer to another file or directory

symbolic links are implemented at the filesystem level. it is different from desktop shortcut 

```
>>> from os import path
>>> path.exists('secret_stuff.txt')
False
>>> path.lexists('secret_stuff.txt')
True
```

file in question does not exist. os.path also includes a lexists() function that will tell us if the link exists

Path.is_symlink() 

lexists() 
islink()
realpath()

pathlib.Path 
is_smblink()
resolve(), returns a path with all symbolic links resolved to real files and directories 
lchmod(), changes permissions on a symbolic link 
lstat()

using the native %VARIABLENAME% format or the Unix-style $VARIABLENAME format; macOS and Linux only accept the Unix-style format.

- inconsistent library and feature support 

- python platofrm limitted libraries 

Python's standard library documentation (https://docs.python.org/3/library/index.html), you'll find a list of libraries available only on Windows or Unix-like system


ossaudiodev Open Sound System (OSS) audio server interfaceLinux, FreeBSD 

winsound	Windows audio interface	Windows

msilib	Windows software packaging tools

Windows	winreg	Windows registry tools

Windows	syslog	Unix system log interface	Linux, macOS, BSD

pwd, spwd	Unix password database interface	Linux, macOS, BSD

resource	System resource limits			Linux, macOS, BSD

curses		Terminal-based UI library		Linux, macOS, BSD

- other python should and movie library 

mutagen 
moviepy 
trueaudio 
pydub, manipulate audio 

- read and write microsoft installer files 

The msilib supports the creation of Microsoft Installer (.msi) files. Because these files often contain an embedded “cabinet” file (.cab), it also exposes an API to create CAB files. Support for reading .cab files is currently not implemented;

- low-level function compatibility 

os module provides functions  

getuid, getgid, getgroups, geteuid 

setuid, setgid, setgroups, seteuid 

getpriority, setpriority

chown, lchown 

startfile 

- graphical and console modes 

Python launcher will launch your application in either GUI or console mode depending on its file extension, as follows:

- writing code that changes according to the platform 


- window zoomed state 

from tkinter import *
root = Tk()
root.state('zoomed')
root.mainloop()
root.attributes('-zoomed', True)

- binding accelerators 

class GenericMainMenu(tk.Menu):
  accelerators = {
    'file_open': 'Ctrl+O',
    'quit': 'Ctrl+Q',
    'record_list': 'Ctrl+L',
    'new_record': 'Ctrl+R',
  }
  keybinds = {
    '<Control-o>': '<<FileSelect>>',
    '<Control-q>': '<<FileQuit>>',
    '<Control-n>': '<<NewRecord>>',
    '<Control-l>': '<<ShowRecordlist>>'
  }
  
 menu.add_command(
  label='Exit', command=self._event('<<FileQuit>>'),
  image=self.icons.get('quit'), compound=tk.LEFT
)



# Creating automated tests with unittest 
- unittest, unittest.patch, unittest.mock 



# Improving Data Storage with SQL 
- sql 
- connect to cloud with urllib 
- SSH or SFTP support, the third-party paramiko library 
- SFTP 



# Asyncronous programming with Thread and Queue 
- thread module, Lock 
- queue.Queue 
- threading and GIL 

understand Python's Global Interpreter Lock (GIL) and how it affects threading.
	+ First, the GIL only limits the execution of Python code; many libraries execute code in other languages.
	+ Second, Input/Output (I/O) operations like disk access or network requests can run concurrently with Python code. 

GIL really limits the utility of multi-threading is when we have computationally expensive Python code. Slow operations in typical data-oriented applications like ABQ are likely to be I/O-based operations, and for heavy-computation situations we can use non-Python libraries like numpy



# Visualizing data using the canvas widget 
- The Canvas widget is undoubtedly one of the most powerful widgets available in Tkinter. 



# Packing with setuptools and CxFreeze 
- distributable packages with setuptools 

	+ create a requirements .txt 
```
# requirements.txt
--index-url https://pypi.python.org/simple/
# Runtime:
Requests
Paramiko
psycopg2
matplotlib
# for testing REST:
flask

requests==2.26.0
paramiko>=2.6
psycopg2<3.0
matplotlib>3.2,<=3.3
```

	+ install 
	
$ pip install -r requirements.txt

- create pyproject.toml file

Although setuptools is still the de facto standard for packaging Python projects, the Python community is moving toward tool-agnostic configuration to accommodate newer options

- add license file 
- make project executable 
- configure setup.py script 

setup(
  name='ABQ_Data_Entry',
  version='1.0',
  author='Alan D Moore',
  author_email='alandmoore@example.com',
  description='Data entry application for ABQ AgriLabs',
  url="http://abq.example.com",
  license="ABQ corporate license",
  #...
)

- defining commands 

setup(
  #...
  entry_points={
    'console_scripts': [
    'abq = abq_data_entry.__main__:main'
  ]}
)

- testing the configuration

$ python setup.py check 

- creating using source distributions 

setup.py with the sdist option in the project root directory:

$ python setup.py sdist

- creating executables with cx_Freeze 

several projects to choose from; in this book, we're going to look at one called cx_Freeze.

idea of cx_Freeze is to bundle up all the code and shared library files for a Python project along with a Python interpreter, and then generate a small executable file

pip as shown in the following command:

$ pip install --user cx-Freeze

cx.setup(
  #...
  executables=[
    cx.Executable(
      'abq_data_entry/__main__.py',
      target_name='abq',
      icon='abq.ico'
      )
    ],
)

- including external files 

from pathlib import Path
import sys
if getattr(sys, 'frozen', False):
  IMAGE_DIRECTORY = Path(sys.executable).parent / 'images'
else:
  IMAGE_DIRECTORY = Path(__file__).parent / 'images'

- building a windows installer file cx_Freeze

build a Windows installer file (.msi) using the bdist_msi operation

- build a macOS application with cx_Freeze *.dmg files 

- cx_Freeze creates standalone executables from Python scripts, with the same performance, is cross-platform and should work on any platform that Python itself works on.


# Events and bindings 
- reference 

https://learning.oreilly.com/library/view/tcl-and-the/9780321601766/

Tcl and the Tk Toolkit, second edition 

- bind command for details:

Key or KeyPress A key was pressed.

KeyRelease A key was released.

Button or ButtonPress A mouse button was pressed.

ButtonRelease A mouse button was released.

Enter The mouse pointer moved into a widget (it is now over a visible portion of the widget).

Leave The mouse pointer moved out of a widget.

Motion The mouse pointer moved from one point to another within a single widget.

MouseWheel The user moved the mouse wheel.

FocusIn A widget received keyboard focus.

FocusOut A widget lost keyboard focus.

Configure A widget was initially displayed or changed its size, position, or border width.

Map A widget became viewable.

Unmap A widget is no longer viewable.

Destroy A widget has been destroyed.

For <Enter> and <Leave> events, the widget is the one just entered or left. For <ButtonPress>, <ButtonRelease>, and <Motion> events, the widget is the one currently under the pointer. For <KeyPress> and <KeyRelease>

- modifier names 
Shift 
Lock 
Alt 
Meta 
Double 

- sequences of events 

<Escape>a matches an event sequence consisting of a KeyPress on Escape, a KeyRelease of Escape

- logical actions 

a <<Selection>> event whenever its selection changes