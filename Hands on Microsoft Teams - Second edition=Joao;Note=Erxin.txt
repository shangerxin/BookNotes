Hands on Microsoft Teams - Second edition=Joao;Note=Erxin

# Introduction 
- reference 
https://learning.oreilly.com/library/view/hands-on-microsoft-teams/9781801075275/Text/Chapter_06.xhtml


# Teams templates
- Microsoft Teams templates are predefined teams created with specific business needs in mind that help to standardize team structures, making the relevant channels and applications immediately available to the end user without the need to custom-build the team multiple times.

- manage teams template as administrator 

simply visiting the following URL: https://admin.teams.microsoft.com.



# Teams app 
- browser and visit https://dev.teams.microsoft.com, then authenticate using your Microsoft Teams credentials.

- Portal by visiting the following URL: https://dev.teams.microsoft.com/tools.

- Creating a custom Together mode scene using the Developer Portal


# Build your own bot 
- following link: https://azure.microsoft.com/en-gb/free/.

- Start by opening QnA Maker: https://www.qnamaker.ai/.
Click on Sign in and authenticate using your corporate account.

Create a QnA service in Microsoft Azure, click on the Create a QnA Service button. This action will open Microsoft Azure

- Navigate to https://portal.azure.com and click on All services.

- using a bot in microsoft teams 

More apps section and click on the bot icon, as illustrated in Figure 12.3.1


# Teams PowerShell
- powershell document, I recommend you have a look at the official Microsoft documentation: https://docs.microsoft.com/en-us/powershell/scripting/whats-new/differences-from-windows-powershell?view=powershell-7.1.

- install teams powershell 

The PowerShell gallery is available at https://www.powershellgallery.com/.

$ Install-Module -Name PowerShellGet -Force -AllowClobber

- official Microsoft documentation: https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.1.

- official Microsoft website: https://docs.microsoft.com/en-us/powershell/module/teams/?view=teams-ps.

- official Microsoft documentation: https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands?view=powershell-7.1.

- teams modules divided into eight different groups 
eight different groups:

Connection cmdlets: Use these cmdlets to establish a connection to Microsoft Teams and to disconnect from it once the script finishes its execution
Get cmdlets: Use these cmdlets to get information from Microsoft Teams
Set cmdlets: Use these cmdlets to modify information in Microsoft Teams
New cmdlets: Use these cmdlets to create new Microsoft Teams components
Add cmdlets: Use these cmdlets to add new Microsoft Teams components
Remove cmdlets: Use these cmdlets to remove Microsoft Teams components
Grant cmdlets: Use these cmdlets to grant permissions to existing resources
Update cmdlets: Use these cmdlets to update existing Microsoft Teams components

- official Microsoft documentation: https://docs.microsoft.com/en-us/microsoftteams/set-up-your-team-hierarchy.

- example 
```
# Define the team settings
$teamName = "Project Y"
$teamDescription = "The new generation of electric skateboards"
$teamOwner = "joao@funskating.com"
$teamVisibility = "Private"
$teamEditMessagesPolicy = $false
$teamDeleteMessagesPolicy = $false
# Define the team default channels
$teamChannels = @("Procedures", "Legal")
# Define the team default members
$teamMembers = @("josh@funskating.com", "adele@funskating.com")
# Establish a connection to Microsoft Teams
Connect-MicrosoftTeams
# Create the team
New-Team -DisplayName $teamName -Description $teamDescription -Owner $teamOwner -Visibility $teamVisibility -AllowUserEditMessages $teamEditMessagesPolicy -AllowOwnerDeleteMessages $teamDeleteMessagesPolicy
$teamDetails=Get-Team -DisplayName $teamName
# Create the channel
for ($i=0; $i -lt $teamChannels.count; $i++) {
    New-TeamChannel -GroupId $teamDetails.GroupId -DisplayName $teamChannels[$i]
}
# Add the default members to the team
for ($i=0; $i -lt $teamMembers.count; $i++) {
    Add-TeamUser -GroupId $teamDetails.GroupId -User $teamMembers[$i] -role "Member"
}
# Disconnect the PowerShell session from Microsoft Teams
Disconnect-MicrosoftTeams
```

- establish a team owner and a new channel 

```
# Establish a team owner and a new channel name definition
$teamOwnerEmail = "john@funskating.com"
$channelName = "Procedures"
# Connect to Teams and get all teams to which the user belongs
Connect-MicrosoftTeams
$teamsWhereIam = Get-Team -User $teamOwnerEmail
# Loop through all teams
for ($i=0; $i -lt $teamsWhereIam.length; $i++) {
    # Get the current team group ID and list of owners
    $groupId = $teamsWhereIam[$i].GroupId
    $teamOwners = Get-TeamUser -GroupId $groupId -Role Owner
    # Loop through the owners of the current team
    for ($j=0; $j -lt $teamOwners.length; $j++) {
        # Compare current owner of the team with the email defined
        # at the top of the script
        if($teamOwners[$j].User -eq $teamOwnerEmail){
            New-TeamChannel -GroupId $groupId -DisplayName $channelName
        }
    }
}
# Disconnect the PowerShell session from Microsoft Teams
Disconnect-MicrosoftTeams
```


# Get the data 
- download data 
```
from pathlib import Path
import pandas as pd
import tarfile
import urllib.request

def load_housing_data():
    tarball_path = Path("datasets/housing.tgz")
    if not tarball_path.is_file():
        Path("datasets").mkdir(parents=True, exist_ok=True)
        url = "https://github.com/ageron/data/raw/main/housing.tgz"
        urllib.request.urlretrieve(url, tarball_path)
        with tarfile.open(tarball_path) as housing_tarball:
            housing_tarball.extractall(path="datasets")
    return pd.read_csv(Path("datasets/housing/housing.csv"))

housing = load_housing_data()

>>> housing.info()
<class 'pandas.core.frame.DataFrame'> to display detail 

import matplotlib.pyplot as plt

housing.hist(bins=50, figsize=(12, 8))
plt.show()
```