Modern C++ Design patterns=Julian;Note=Erxin


# Introduction 
- design pattern 


# Design patterns and idioms
- idiom 

specific platform or example 

pointers and templates in C++ 
finally in GC language 
pattern matching in functional languages 

- c++ specific idioms 
RAII, resource acquisition is initialization 

class Foo{
    Foo(){ //do require resource}
    ~Foo() {//release undo it}
}

- PIMPL, pointer to implementation decoule implementation improve compilation 

class Foo{
    FooImpl *fp;
}

clas FooImp {};

- IDIOMS, smart pointers overload -> many uses in modern C++ manage resources, provide proxies etc 

class Ptr<T> {
    T* p;
    
public: 
//...
    T* operator->() const {
        return p;
    }
};

- CRTP, curiously recurring template pattern, static polymorphism, removes need for virtual functions 

class B<T> {};

class D: B<D> {};

//this is realize in earlier template. this allowed derive class directly use the functinality of polymorphism without need of virtual table. virtual function cann't be inline. required indirect call

- implementing patterns

there is no one correct way 

patterns work together 

reification 

<<Holub on patterns>> 

- reading 
design patterns, gamma, helm 
refactoring to patterns, kerievsky, addison wesly 
Alexander's original pattern language book 
pattern-oriented software architecture, vols 1-5, John Wiley 


# Implementing patterns 
- RAII
- State 
- PIMPL 
- Smart pointer 
- CRTP 
- Singleton 



# Funtional programming 
- principles of functional programming 

function as data 
pass them as arguments 
return them as results 
functions use as building blocks 
std::function and std::bind 

- immutable data 
















