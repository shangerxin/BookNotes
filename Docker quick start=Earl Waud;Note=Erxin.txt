Docker quick start=Earl Waud;Note=Erxin


# Setup docker development environment 
- os 
centos 
ubuntu 
windows 
os x

- install docker on ubuntu 

$ sudo apt-get install \
   apt-transport-https \
   ca-certificates \
   curl \
   software-properties-common
   
- setting up docker completion for powershell 

```
# allow remote signed scripts to run
Set-ExecutionPolicy RemoteSigned

# install Docker completion
Install-Module DockerCompletion -Scope CurrentUser

# enable Docker completion
Import-Module DockerCompletion
```

https://learn.microsoft.com/en-us/cpp/build/reference/i-additional-include-directories?source=recommendations&view=msvc-170

- install kitematic for mac to provide gui interface for docker 

- Download Docker CE for Windows: https://store.docker.com/editions/community/docker-ce-desktop-windows

- Docker for Windows limitations: https://docs.docker.com/docker-for-windows/troubleshoot/#limitations-of-windows-containers-for-localhost-and-published-ports

- code files of this chapter can be found on GitHub:

https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter02




# Learning docker commands 
- top-level command-completion help for the container commands:

$ docker container 

```
Usage:  docker container COMMAND

Manage containers

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem        
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem    
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  inspect     Display detailed information on one or more containers
  kill        Kill one or more running containers
  logs        Fetch the logs of a container
  ls          List containers
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  prune       Remove all stopped containers
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  run         Run a command in a new container
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics        
  stop        Stop one or more running containers
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes   

Run 'docker container COMMAND --help' for more information on a command.
```
- the version command 

try the command without the dashes:

$ docker version

- docker run command 

This command tells Docker that you want to run a container based on the image described as hello-world. You may be asking yourself

- get latest image 

$ docker image pull hello-world

    + run the image 
```
$ docker run hello-world 

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.   
    (amd64)
 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent 
it
```

 $ docker run -it ubuntu bash

- list container command 

$ docker container ls

$ docker container ls --all

add --rm parameter when you run a container, all of the container's read/write data is removed at the time the container exits. 

- remove container command 

$ docker container rum <name>

remove even if it is running 
$ docker container rm --force web-server

list container ids 
$ docker container ls --all --quiet

- stop container 

$ docker container stop web-server

- container logs commands 

```
# the long form of the command
# Usage: docker container logs [OPTIONS] CONTAINER
docker container logs --follow --timestamps web-server
# the short form of the command
docker container logs -f -t web-server

# get just the last 5 lines (there is no short form for the "--tail" parameter)
docker container logs --tail 5 web-server

# the old syntax
docker logs web-server
```

- view all the processes running in the targeted container

$ docker container top web-server 

$ docker top web-server 

- inspect, list metadata 
```
$ docker container inspect web-server

# if you want to see the state of a container you can use this command
docker container inspect --format '{{json .State}}' web-server1 | jq

# install jq on Windows using Chocolatey NuGet package manager
chocolatey install jq


```
https://docs.docker.com/config/formatting

- container stats command 

```
# using the new syntax, view the stats for all running containers
# Usage: docker container stats [OPTIONS] [CONTAINER...]
docker container stats


# running detached
docker container run --detach --name web-server1 nginx

# running interactively with default CMD
docker container run -it --name earls-dev ubuntu

```

- the container attach command, You can use the container attach command to bring that container's executing process to be the foreground process of your terminal session

```
# run a container detached
docker container run --detach -it --name web-server1 -p 80:80 nginx

# show that the container is running
docker container ps

# attach to the container
# Usage: docker container attach [OPTIONS] CONTAINER
docker container attach web-server1

# issue a Ctrl + PQ keystroke to detach (except for Docker on Mac, see below for special Mac instructions)

# again, show that the container is running detached.
docker container ps
```

- the container exec command, a container running detached, you might want to get access to it. exec command allows you to execute another command in the running container, without attaching to or interfering with the already-running command

```
# execute other commands in the running container
# Usage: docker container exec [OPTIONS] CONTAINER COMMAND [ARG...]
docker container exec -it web-server1 bash
docker container exec web-server1 cat /etc/debian_version
```

- docker commit, save the current read/write layer of a container along with the layers of the original image, creating a brand new image

```
# Usage: docker container commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
docker container commit ubuntu new-ubuntu
```

- run command parameter with the --publish parameter. Using the optional publish parameter allows you to specify what ports will be opened related to the run container

```
# create an nginx web-server that redirects host traffic from port 8080 to port 80 in the container
docker container run --detach --name web-server1 --publish 8080:80 nginx
```

https://docs.docker.com/engine/reference/run/.




# Creating docker images 
- docker file a text file that contains instructions used by the Docker daemon to create a Docker image.

- from instruction 

```
# a FROM instruction that specifies using the official nginx image with a version of 1.15.2
FROM nginx:1.15.2
```

    + from is the basic layer of for many other base images 
    
```
# hello-world Dockerfile
FROM scratch
COPY hello /
CMD ["/hello"]
```

- the label instruction adds embedded key-value pairs to the image

```
# LABEL instruction syntax
# LABEL <key>=<value> <key>=<value> <key>=<value> ...
LABEL maintainer="Earl Waud <earlwaud@mycompany.com>"
LABEL "description"="My development Ubuntu image"
LABEL version="1.0"
LABEL label1="value1" \
 label2="value2" \
 lable3="value3"
LABEL my-multi-line-label="Labels can span \
more than one line in a Dockerfile."
LABEL support-email="support@mycompany.com" support-phone="(123) 456-7890"
```

    +  You can view all of the labels for an image by using the inspect command:
    
$ docker image inspect --format '{{json.Config}}' <image>|jq '.Labels'

- COPY instruction, The COPY instruction is used to copy files and folders into the Docker image being built 

```
# COPY instruction syntax
COPY [--chown=<user>:<group>] <src>... <dest>
# Use double quotes for paths containing whitespace)
COPY [--chown=<user>:<group>] ["<src>",... "<dest>"]
```

The <dest> or destination is a filename or path inside of the image being created.
```
# copy multiple files, creating the path "/theqsg/files" in the process
COPY file* theqsg/files/

# copy the file special1 into "/theqsg/special-files/"
COPY --chown=35:35 special1 special-files/
```
- add instruction, used to copy files and folders into the Docker image being built. similar to the COPY syntax  

- COPY instruction, the source can be files or folders. However, with the ADD instruction, the source can be files, folders, a local .tar file, or a URL.

```
# ADD instruction Dockerfile for Docker Quick Start
FROM alpine
LABEL maintainer="Earl Waud <earlwaud@mycompany.com>"
LABEL version=3.0
ADD https://github.com/docker-library/hello-world/raw/master/amd64/hello-world/hello /
RUN chmod +x /hello
CMD ["/hello"]
```

- env instruction define environment variables that will be set in the running containers 

```
# ENV instruction Dockerfile for Docker Quick Start
FROM alpine
LABEL maintainer="Earl Waud <earlwaud@mycompany.com>"
ENV appDescription This app is a sample of using ENV instructions
ENV appName=env-demo
ENV note1="The First Note First" note2=The\ Second\ Note\ Second \
note3="The Third Note Third"
ENV changeMe="Old Value"
CMD ["sh"]
```

Environment variables can be set (or overridden) when a container is run using the --env parameter

- ARG instruction, use variable data to customize the build. The ARG instruction is the tool to handle that situation. use --build-arg to pass the value to parameter 

```
# The ARG instruction syntax
ARG <varname>[=<default value>]

# The build-arg parameter syntax
docker image build --build-arg <varname>[=<value>] ...
```

- different between env and arg 

ENVs persist into running containers, ARGs do not.
ARGs use corresponding build parameters, ENVs do not.
ENV instructions must include both a key and a value, ARG instructions have a key but the (default) value is optional.
ENVs are more significant than ARGs.

- user instruction, set the current user (and group) for all of the instructions that follow in the Dockerfile 

```
# User instruction syntax
USER <user>[:<group>] or
USER <UID>[:<GID>]
```

```
# USER instruction Dockerfile for Docker Quick Start 
FROM alpine
LABEL maintainer="Earl Waud <earl@mycompany.com>"
RUN id
USER games:games
run id
CMD ["sh"]
```                  

- workdir instruction, change the current working directory in the image to the value provided in the instruction                   
                  
```
# WORKDIR instruction syntax
WORKDIR instruction syntax
WORKDIR /path/to/workdir 
```

example 
```
# relative path, relative to previous WORKDIR instruction
# creates new folder
WORKDIR sub-folder-level-1
RUN touch file1.txt
# relative path, relative to previous WORKDIR instruction
# creates new folder
WORKDIR sub-folder-level-2
RUN touch file2.txt
# relative path, relative to previous WORKDIR instruction
# creates new folder
```

- VOLUME instruction will create a storage location to persist beyond the life of your container.

```
# VOLUME instruction syntax
VOLUME ["/data"]
# or for creating multiple volumes with a single instruction
VOLUME /var/log /var/db /moreData
```

```
# VOLUME instruction Dockerfile for Docker Quick Start
FROM alpine
RUN mkdir /myvol
RUN echo "hello world" > /myvol/greeting
VOLUME /myvol
CMD ["sh"]
```

    + example host mount piont for a volume
    
```
$ docker container run --rm -d --name vol-demo --mount source=myvolsrc, target=/myvol volume-demo:1.0 tail -f /dev/null 
$ docker volume ls 
$ docker volume inspect myvolsrc -f "{{json .Mountpoint}}" "/var/lib/docker/volumes/myvolsrc/_data" 
$ docker container exec vol-demo ls -l /myvol total 4
$ sudo touch /var/lib/docker/volumes/myvolsrc/_data/new-file.txt 
$ docker container exec vol-demo ls -l /myvol
```

The VOLUME instruction will add a zero-bytes sized layer to your resulting Docker image.

- expose instruction, document what network ports the image expects to be opened when a container is run from the image built using the Dockerfile. 
           
```
# EXPOSE instruction syntax
EXPOSE <port> [<port>/<protocol>...]
```
Dockerfile does not actually open network ports in containers. When containers are run from the images with the EXPOSE instruction in their Dockerfile, it is still necessary to include the -p or -P parameters to actually open the network ports to the container.

the -P parameter at runtime is a shortcut way to automatically open ports for all of the EXPOSE instructions included in the Dockerfile. 

The EXPOSE instruction creates a zero-byte-sized layer in the resulting image.

- run instruction allows you to execute any command in the image. execute during the building of the image

```
# For Linux the default is "/bin/sh -c"
# For Windows the default is "cmd /S /C"
RUN <command>

# Exec form
RUN ["executable", "param1", "param2"]

# Exec form of RUN instruction using bash
RUN ["/bin/bash", "-c", "echo hello world > /myvol/greeting"]
```

Every RUN instruction creates a new layer in the image, and the layers for each instruction that follow will be built on the results of the RUN instruction's layer


the SHELL instruction section. If you are building a container that does not include a shell, you will need to use the exec form of the RUN instruction

    + example 

```
# RUN instruction Dockerfile for Docker Quick Start
FROM ubuntu
RUN useradd --create-home -m -s /bin/bash dev
RUN mkdir /myvol
RUN echo "hello DQS Guide" > /myvol/greeting
RUN ["chmod", "664", "/myvol/greeting"]
RUN ["chown", "dev:dev", "/myvol/greeting"]
VOLUME /myvol
USER dev
CMD ["/bin/bash"]
```

- CMD instruction is used to define the default action taken when containers are run from images built with their Dockerfile

the final CMD instruction provides the default action for the image.

CMD instruction does not execute anything during the building of the image but instead is executed when containers built from the image are run.

```
# CMD instruction syntax
CMD command param1 param2 (shell form)
CMD ["executable","param1","param2"] (exec form)
CMD ["param1","param2"] (as default parameters to ENTRYPOINT)


# CMD instruction examples
CMD ["/bin/bash"]
CMD while true; do echo 'DQS Expose Demo' | nc -l -p 80; done
CMD echo "How many words are in this echo command" | wc -
CMD tail -f /dev/null
CMD ["-latr", "/var/opt"]
```

- entry point instruction configure a docker image to run like an application or a command.

```
# ENTRYPOINT instruction Dockerfile for Docker Quick Start
FROM alpine
RUN apk add curl
ENTRYPOINT ["curl"]
CMD ["--help"]
```

When run parameters are provided to a container that has the exec form of the ENTRYPOINT command, those parameters will be appended to the ENTRYPOINT instruction, overriding anything provided in a CMD instruction.

```
# ENTRYPOINT instruction syntax
ENTRYPOINT command param1 param2 (shell form)
ENTRYPOINT ["executable", "param1", "param2"] (exec form, best practice)
```

use the exec form of the ENTRYPOINT instruction whenever possible.

- difference between CMD and ENTRYPOINT 

One use case where you might need to use the shell form is if you require shell-environment-variable substitution.

the shell form, by definition, will run ["/bin/sh", "-c"] (or ["cmd", "/S", "/C"] on Windows) to launch the application in the parameter of the instruction. Because of this, the primary process running in the container is not the application.

- healthcheck instruction, define the command to run inside a container to test the container's application health 

```
# HEALTHCHECK instruction syntax
HEALTHCHECK [OPTIONS] CMD command (check container health by running a command inside the container)
HEALTHCHECK NONE (disable any HEALTHCHECK inherited from the base image)
```

support four options 
```
# HEALTHCHECK CMD options
--interval=DURATION (default: 30s)
--timeout=DURATION (default: 30s)
--start-period=DURATION (default: 0s)
--retries=N (default: 3)
```

    + example 
    
```
# HEALTHCHECK instruction Dockerfile for Docker Quick Start
FROM alpine
RUN apk add curl
EXPOSE 80/tcp
HEALTHCHECK --interval=30s --timeout=3s \
  CMD curl -f http://localhost/ || exit 1
CMD while true; do echo 'DQS Expose Demo' | nc -l -p 80; done
```

HEALTHCHECK will init the status starting, once the HEALTHCHECK CMD reported success the status updated to healthy 

- ONBUILD instruction adds metadata to your image, specifically a trigger that is stored in the image. when your image is supplied as the paramter in the FROM command 

```
# ONBUILD instruction syntax
ONBUILD [INSTRUCTION]
```

    + example 
    
```
# my-base Dockerfile
FROM alpine
LABEL maintainer="Earl Waud <earlwaud@mycompany.com>"
ONBUILD LABEL version="1.0"
ONBUILD LABEL support-email="support@mycompany.com" support-phone="(123) 456-7890"
CMD ["sh"]
```

```
# my-app Dockerfile
FROM my-base:1.0
CMD ["sh"]
```

when inspecting the resultibng my-app image shows us that the label commands provided in the ONBUILD instructions were sent forward in time. 

- STOPSIGNAL instruction set the system call signal that will be sent to the container to tell it to exit. 

```
# STOPSIGNAL instruction syntax
STOPSIGNAL signal
```

    + example 
    
```
# Sample STOPSIGNAL instruction using a position number in the syscall table
STOPSIGNAL 9
# or using a signal name
STOPSIGNAL SIGQUIT
```

STOPSIGNAL instruction is used when a docker container stop command is issued.

https://medium.com/@gchudnov/trapping-signals-in-docker-containers-7a57fdda7d86


- SHELL instruction allows you to change that default. Here is the syntax for the SHELL instruction

```
# SHELL instruction syntax
SHELL ["executable", "parameters"]
```

allows you to switch back and forth between using cmd.exe and powershell.exe.

- the docker image build command, turn your Dockerfile into a docker image. The Docker image build command sends the docker build context, including the Dockerfile, to the docker daemon 

```
# Docker image build command syntax
Usage: docker image build [OPTIONS] PATH | URL | -
```

options 
```
# Common options used with the image build command
--rm         Remove intermediate containers after a successful build
--build-arg  Set build-time variables
--tag        Name and optionally a tag in the 'name:tag' format
--file       Name of the Dockerfile (Default is 'PATH/Dockerfile')
```

the ARG instruction. Remember that the --build-arg option is how you provide a value to the ARG instruction in the Dockerfile.

    + example 
    
```
# build command samples
docker image build --rm --build-arg username=35 --tag arg-demo:2.0 .
docker image build --rm --tag user-demo:1.0 .
docker image build --rm --tag workdir-demo:1.0 .
```

- parser directives, a special subset of optional comment lines in the Dockerfile. Any parser directives must occur before the first normal comment line. They must also precede any blank lines or other build instructions, including the FROM instruction 

create a normal comment line in a Dockerfile by starting that line with a # character

- Parser Directives are a special subset of optional comment lines in the Dockerfile. Any parser directives must occur before the first normal comment line. 


```
# directive=value
# The line above shows the syntax for a parser directive
```

The escape parser directive is used to change what character is used to indicate that the next character in the instruction is to be treated as a character and not as the special character

    + example 
    
```
# escape=\ (backslash)
Or
# escape=` (backtick)
```

- the build context everything that gets sent to the Docker daemon when using the build image command. This includes the Dockerfile and the contents of the current working directory

Using the .dockerignore file, you can exclude files and folders from the build context

```
# build context Dockerfile for Docker Quick Start guide
FROM scratch
COPY hello /
CMD ["/hello"]
```

- .dockerignore file needs to be in the root folder of the build context. Like a .gitignore file, it uses a newline-separated list of patterns.

```
# Example of a .dockerignore file
# Exclude unwanted files
**/*~
**/*.log
**/.DS_Store
```

https://docs.docker.com/engine/reference/builder/#dockerignore-file

- Best practices for the Dockerfile: https://docs.docker.com/v17.09/engine/userguide/eng-image/dockerfile_best-practices/




# Docker volumens 
- Docker uses a special filesystem called a Union File System. 

- a Docker volume is a folder that exists on the Docker host and is mounted and accessible inside a running Docker container.

- you are able to create your volumes on remote hosts or cloud providers. For example, you can use an NFS driver to allow the creation of Docker volumes on a remote NFS server.

- subcommands 

```
# Docker volume management subcommands
docker volume create         # Create a volume
docker volume inspect        # Display information on one or more volumes
docker volume ls             # List volumes
docker volume rm             # Remove one or more volumes
docker volume prune          # Remove all unused local volumes
```

- creating docker volumes 

```
Usage: docker volume create [OPTIONS] [VOLUME]

# The options available to the volume create command:
-d, --driver string         # Specify volume driver name (default "local")
--label list                # Set metadata for a volume
-o, --opt map               # Set driver specific options (default map[])
```

- Using the volume ls command, you can see what random name the Docker daemon assigned our new volume

- create volume 

```
# Create a volume with a fancy name
docker volume create my-vol-02
```

- Magic Screen command, you can access the running Docker VM

```
# Start by creating a new volume
docker volume create my-osx-volume
# Now find the Mountpoint
$ docker volume inspect my-osx-volume -f "{{json .Mountpoint}}"

# Try to view the contents of the Mountpoint's folder
$ sudo ls -l /var/lib/docker/volumes/my-osx-volume
# "No such file or directory" because the directory does not exist on the OS X host

# Now issue the Magic Screen command and hit <enter> to get a prompt
$ screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty
# You are now root in the VM, and can issue the following command
$ ls -l /var/lib/docker/volumes/my-osx-volume

# The directory exists and you will see the actual Mountpoint sub folder "_data"
# Now hit control-a followed by lower case k to kill the screen session
<CTRL-a>k

# mount a pre-created volume with --mount parameter
$ docker container run --rm -d \
--mount source=my-vol-02,target=/myvol \
--name vol-demo2 \
volume-demo2:1.0 tail -f /dev/null

# The Magic Screen command
$ screen ~/Library/Containers/com.docker.docker/Data
/com.docker.driver.amd64-linux/tty
# or if you are using Mac OS High Sierra
$ screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty
```

volume inspect subcommand to see where that folder. If it is OS X, you need to remember that your Docker install is actually using a mostly seamless virtual machine. The path is from the virtual machine. 

- Cannot mount a pre-created volume via a VOLUME instruction in a Dockerfile. 

- Create a one-to-one mapping of a file on the host to a file in a container. To accomplish this, add a -v parameter to the container run command.

```
# Map a single file from the host to a container
echo "important data" > /tmp/data-file.txt
docker container run --rm -d \
   -v /tmp/data-file.txt:/myvol/data-file.txt \
   --name vol-demo \
   volume-demo2:1.0 tail -f /dev/null
# Prove it
docker exec vol-demo cat /myvol/data-file.txt
```

the following run command do the same thing, create a container that has mounted the same volume, in read-only mode.  
```
# Using --mount with source and target
docker container run --rm -d \
   --mount source=my-volume,target=/myvol,readonly \
   --name vol-demo1 \
   volume-demo:latest tail -f /dev/null

# Using --mount with source and destination
docker container run --rm -d \
   --mount source=my-volume,destination=/myvol,readonly \
   --name vol-demo2 \
   volume-demo:latest tail -f /dev/null

# Using -v 
docker container run --rm -d \
   -v my-volume:/myvol:ro \
   --name vol-demo3 \
   volume-demo:latest tail -f /dev/null
```

- Removing volumnes,  volume rm command, which you can use to remove one or more volumes by name.

```
# Remove volumes command syntax
Usage: docker volume rm [OPTIONS] VOLUME [VOLUME...]
# Prune volumes command syntax
Usage: docker volume prune [OPTIONS]
```

- sharing data between containers with data volume containers. share the volume(s) mounted in one Docker container with other containers. It is called data volume containers. 

use the --volumes-from, when running other containers to configure them to mount all of the volumes mounted in the first container. pre-created with an earlier container run command, or from a volume create command.

```
# Step 1
docker container run \
   --rm -d \
   -v data-vol-01:/data/vol1 -v data-vol-02:/data/vol2 \
   --name data-container \
   vol-demo2:1.0 tail -f /dev/null
# Step 2
docker container run \
   --rm -d \
   --volumes-from data-container \
   --name app-container \
   vol-demo2:1.0 tail -f /dev/null
# Prove it
docker container exec app-container ls -l /data
# Prove it more
docker container inspect -f '{{ range .Mounts }}{{ .Name }} {{ end }}' app-container
```



# Docker Swarm 
- Ubuntu feature set. Xubuntu can be downloaded from https://xubuntu.org/download/

- Docker swarm is a way to link Docker nodes together, mange and scale 

- built-in with docker engine 

$ docker system info | grep Swarm 

- docker swarm cluster 

$ docker swarm init

- swarm management commands 

$ docker swarm  --help 


Usage:  docker swarm COMMAND

Manage Swarm

Commands:
  ca          Display and rotate the root CA
  init        Initialize a swarm
  join        Join a swarm as a node and/or manager
  join-token  Manage join tokens
  leave       Leave the swarm
  unlock      Unlock swarm
  unlock-key  Manage the unlock key
  update      Update the swarm
  
  
- docker swarm init 

initialize the swarm by running the swarm init command on the first node, one of the functions that is executed creates unique cryptographic join tokens

- docker swarm join-token 

$ docker swarm join-token manager 
$ docker swarm join-token worker 

join-token command, you can obtain these two join tokens. In fact, using the join-token command will deliver the full join command

with the init command is --autolock. Using this parameter will enable the autolock feature on the swarm cluster. use unlock to let the node rejoin the swarm 

The unlock-key command can be used to retrieve the current swarm unlock key

- docker swarm update 

- swarm leave command to remove the node from the swarm

- Swarm services section of this chapter, but for now, think of swarm services as running containers. Manager nodes also serve up the API endpoints of the cluster, allowing for programmatic access via REST. Managers also direct traffic to the running services so that any container can be reached through any manager node without having to know which node is actually running the containers

```
# Set node03's availability to drain
docker node update --availability drain ubuntu-node03
# Promote worker nodes 04 and 05 to manager status
docker node promote ubuntu-node04 ubuntu-node05
# Demote manager nodes 01 and 02 to worker status
docker node demote ubuntu-node01 ubuntu-node02
```

- swarm services 

```
# Syntax for the service create command
# Usage: docker service create [OPTIONS] IMAGE [COMMAND] [ARG...]
# Create a service
docker service create --replicas 1 --name submarine alpine ping google.com
```

the  --replicas. This defines the number of copies of the container that should be run concurrently.

a --publish parameter you can use on a docker container run command that defines the port exposed on the docker host. a more verbose format: --publish published=8080, target=80. This still translates to redirect host traffic from port 8080 to port 80 in the container

a list of those services. This can be achieved with the service list command

remove all of the services running in the swarm
```
# Remove ALL the services from the swarm
$ docker service remove $(docker service list -q)
```



# Docker network 
- Container Network Model (CNM). There is a competing networking standard, created by CoreOS, called the Container Network Interface (CNI). The CNI standard has been adopted by several projects

```
# Docker network managment command
docker network 

# Docker network management subcommands
docker network connect           # Connect a container to a network
docker network create            # Create a network
docker network disconnect        # Disconnect a container from a network
docker network inspect           # Display network details
docker network ls                # List networks
docker network rm                # Remove one or more networks
docker network prune             # Remove all unused networks
```

- driver leverages the network of the host it is running on, each Docker host can only have one network using the host driver

a VXLAN tunnel is created that connects all of the endpoints together. This tunnel is actually what we see as the overlay network

- The next local network driver that we're going to discuss is called MACVLAN. This driver creates networks that allow containers to each have their own IP and MAC addresses

- third party network drivers 

contiv, led by cisco  
weave, creates a virtual network that conn ects docker container across multiple hosts or clouds  
calico, it taregets datacenters, vms containers, or bare metal servers, only require ip connectivitly.  
kuryr, includes an IPAM driver as welll


```
# Install the weave network driver plug-in
sudo curl -L git.io/weave -o /usr/local/bin/weave
sudo chmod a+x /usr/local/bin/weave
# Disable checking for new versions
export CHECKPOINT_DISABLE=1
# Start up the weave network
weave launch [for 2nd, 3rd, etc. optional hostname or IP of 1st Docker host running weave]
# Set up the environment to use weave
eval $(weave env)
```

```
# Run a container detached on node01
docker container run -d --name app01 alpine tail -f /dev/null

# From inside the app02 container running on node02,
# let's ping the app01 container running on node01
docker container exec -it app02 ping -c 4 app01
```

- creating docker network 

```
# Docker network create command syntax
# Usage: docker network create [OPTIONS] NETWORK

# Create a new overlay network, with all default options
docker network create -d overlay defaults-over
```

option is the --driver option. This is how we tell Docker which of the pluggable network drivers to use when creating this network.

the container was run using an IP address (in this case, 172.30.0.7) from the IP range we configured our network with. Looks like we made it!

```
$ docker network create -d overlay \
--subnet=172.30.0.0/24 
--ip-range=172.30.0.0/28
--gateway=172.30.0.254
specifics-over xxxxxx

$ docker network inspect specifics-over --format '{{json .IPAM.config}}' | jq [
    {
        "Subnet":....
        ...
    }
]

$ docker service create --quite --replicas 3 --name tester1 --network specifics-over alpine tail -f /dev/null xxxxx 

$ docker conatiner ls 

$ docker container inpscect 7536 --format '{{json .NetworkSettings.Networks}}` | jq 
{
    ...
}

```

- free networking features 

leverage the specifics-over overlay network we created earlier in the creating Docker networks section

```
# Create service tester1
docker service create --detach --replicas 3 --name tester1 \
  --network specifics-over alpine tail -f /dev/null
# Create service tester2
docker service create --detach --replicas 3 --name tester2 \
  --network specifics-over alpine tail -f /dev/null
# From a container in the tester1 service ping the tester2 service by name
docker container exec -it tester1.3.5hj309poppj8jo272ks9n4k6a ping -c 3 tester2
```

    + First up is Service Discovery. When you create a service, it gets a unique name. That name gets registered with the swarm DNS
    
    + The second free feature we get is Load balancing. This powerful feature is pretty easy to understand. 
    



# Docker stacks 
- The stack file is a YAML file, and is basically the same thing as a Docker Compose file. Both are YAML files that define a Docker base application. Technically, a stack file is a compose file that requires a specific version (or above) of the compose specification

- Docker Compose (as you learned in Chapter 1, Setting up a Docker Development Environment) is an additional tool that you can install in your Docker environment

- the --orchestrator option. With this option, we can instruct Docker to use either Docker swarm or Kubernetes for the stack orchestration.

- The stack file is a YAML file, and is basically the same thing as a Docker Compose file

```
# Deploy the example voting application 
# using the downloaded stack YAML file
docker stack deploy -c docker-stack.yml voteapp
```

using the deploy command with the docker-stack.yml compose file, and naming our stack voteapp. This command will handle all of the configuration, deployment, and management for our new application.


