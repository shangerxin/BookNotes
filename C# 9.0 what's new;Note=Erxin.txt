C# 9.0 what's new;Note=Erxin

# Reference 
https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9


# New features
- Record types 
- record keyword to define a reference type that provides built-in functionality for encapsulating data

public record Person(string FirstName, string LastName);

public record Person
{
    public string FirstName { get; init; } = default!;
    public string LastName { get; init; } = default!;
};

	+record type offer 
	
Concise syntax for creating a reference type with immutable properties
Behavior useful for a data-centric reference type:
Value equality
Concise syntax for nondestructive mutation
Built-in formatting for display
Support for inheritance hierarchies

	+ compare to structure type 
	
structure types have some disadvantages:
They don't support inheritance.
They're less efficient at determining value equality
They use more memory in some scenarios, since every instance has a complete copy of all of the data. 

- positional syntax for property definition 

public record Person(string FirstName, string LastName);

public static void Main()
{
    Person person = new("Nancy", "Davolio");
    Console.WriteLine(person);
    // output: Person { FirstName = Nancy, LastName = Davolio }
}

- value equality 

- mutate immutable properties of a record instance, you can use a with expression to achieve nondestructive mutation.

Person person2 = person1 with { FirstName = "John" };
Console.WriteLine(person2);
// output: Person { FirstName = John, LastName = Davolio, PhoneNumbers = System.String[] }
Console.WriteLine(person1 == person2); // output: False

- inheritance

public abstract record Person(string FirstName, string LastName);
public record Teacher(string FirstName, string LastName, int Grade)
    : Person(FirstName, LastName);
	
- init only setters, Init only setters provide consistent syntax to initialize members of an object. 

public struct WeatherObservation
{
    public DateTime RecordedAt { get; init; }
}

- top-level statements 

using System;

Console.WriteLine("Hello World!");

- pattern matching enhancements 

Type patterns match a variable is a type
Parenthesized patterns enforce or emphasize the precedence of pattern combinations
Conjunctive and patterns require both patterns to match
Disjunctive or patterns require either pattern to match
Negated not patterns require that a pattern doesn't match
Relational patterns require the input be less than, greater than, less than or equal, or greater than or equal to a given constant.

	+ example 
public static bool IsLetter(this char c) =>
    c is >= 'a' and <= 'z' or >= 'A' and <= 'Z';
	
if (e is not null)
{
    // ...
}

- fit and finish features 

	+ a new expression when the created object's type is already known. 

private List<WeatherObservation> _observations = new();

var forecast = station.ForecastFor(DateTime.Now.AddDays(2), new());

- Two final features support C# code generators. C# code generators are a component you can write that is similar to a roslyn analyzer or code fix.

partial method syntax can have access modifier and can have out parameter.

	+ A module initializer method:

Must be static
Must be parameterless
Must return void
Must not be a generic method
Must not be contained in a generic class
Must be accessible from the containing module

- discard parameter, if only a single input parameter is named _, then, within a lambda expression, _ is treated as the name of that parameter

Func<int, int, int> constant = (_, _) => 42;















