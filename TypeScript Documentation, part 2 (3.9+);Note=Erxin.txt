TypeScript Documentation, part 2 (3.9+);Note=Erxin.txt

# TypeScript 3.9 
- Improvements Promise.all for handling mixed promise with null 
- add awaited operator 

T extends PromiseLike<infer U> ? { 0: Awaited<U> }[U extends any ? 0 : never ] : ...

-  // @ts-expect-error comments. When a line is prefixed with a // @ts-expect-error comment, TypeScript will suppress that error from being reported

// @ts-expect-error
console.log(47 * "octopus");

    + // @ts-expect-error can act as a suppression comment, similar to // @ts-ignore. The difference is that // @ts-ignore will do nothing if the following line is error-free
    
- uncalled function checks in ternary conditionals 

- support commonjs require to auto import javascripts. 

- quick fix for missing return, right click a function to add return 

- breaking changes 
    + parsing differences in optional chaining and no-null assertions, optional chaining (?.) with the non-null assertion operator (!)
    
    foo?.bar!.baz 
    
    //equal to below code in preivous versions 
    
    (foo?.bar).bar 
    
    //now the ! operator should just “disappear” since the intent was to remove null and undefined from the type of bar.
    foo?.bar.baz
    
    //or 
    
    (foo?.bar)!.baz

- The JSX Specification forbids the use of the } and > characters in text positions. TypeScript and Babel have both decided to enforce this rule to be more comformant. 

new way to insert these characters is to use an HTML escape code (e.g. <span> 2 &gt 1 </div>) or insert an expression with a string literal (e.g. <span> 2 {">"} 1 </div>).

- Stricter Checks on Intersections and Optional Properties 
interface A {
    a: number; // notice this is 'number'
}

interface B {
    b: string;
}

interface C {
    a?: boolean; // notice this is 'boolean'
    b: string;
}

declare let x: A & B;
declare let y: C;

y = x;

- intersections reduced by discriminate properties 
declare function smushObjects<T, U>(x: T, y: U): T & U;

interface Circle {
    kind: "circle";
    radius: number;
}

interface Square {
    kind: "square";
    sideLength: number;
}

declare let x: Circle;
declare let y: Square;

let z = smushObjects(x, y);
console.log(z.kind);

- getters and setters are no longer enumerable 

function foo<T extends any>(arg: T) {
    arg.spfjgerijghoied; // no error! in the previous version 
}

In previous TypeScript versions, declarations like export * from "foo" would be dropped in our JavaScript output if foo didn’t export any values. 

- export * is always retained. TypeScript 3.9 will always emit these export * declarations. 

- More libdom.d.ts refinements #


# TypeScript 4.0
- Variadic tuple type. 
    + The first change is that spreads in tuple type syntax can now be generic.The first change is that spreads in tuple type syntax can now be generic.
    
function tail(arg) {
  const [_, ...result] = arg;
  return result;
}

const myTuple = [1, 2, 3, 4] as const;
const myArray = ["hello", "world"];

const r1 = tail(myTuple);
//    ^ = const r1: [2, 3, 4]

const r2 = tail([...myTuple, ...myArray] as const);
//    ^ = const r2: [2, 3, 4, ...string[]]

    + second change is that rest elements can occur anywhere in tuple 

type Strings = [string, string];
type Numbers = [number, number];

type StrStrNumNumBool = [...Strings, ...Numbers, boolean];
//   ^ = type StrStrNumNumBool = [string, string, number, number, boolean]

    + TypeScript 4.0 this restriction is relaxed. we can write concat 

type Arr = readonly any[];

function concat<T extends Arr, U extends Arr>(arr1: T, arr2: U): [...T, ...U] {
  return [...arr1, ...arr2];
}

    + improves the inference process for rest parameters 

type Arr = readonly unknown[];

function partialCall<T extends Arr, U extends Arr, R>(
  f: (...args: [...T, ...U]) => R,
  ...headArgs: T
) {
  return (...tailArgs: U) => f(...headArgs, ...tailArgs);
}

const foo = (x: string, y: number, z: boolean) => {};

const f1 = partialCall(foo, 100);
Argument of type 'number' is not assignable to parameter of type 'string'.

const f2 = partialCall(foo, "hello", 100, true, "oops");
Expected 4 arguments, but got 5.

// This works!
const f3 = partialCall(foo, "hello");
//    ^ = const f3: (y: number, z: boolean) => void

// What can we do with f3 now?

// Works!
f3(123, true);

f3();

- labeled tuple elements 

type Range = [start: number, end: number];

type Foo = [first: number, second?: string, ...rest: any[]];

- class property inference from constructors 
    + can now use control flow analysis to determine the types of properties in classes when noImplicitAny is enabled
    
class Square {
    // Previously both of these were any
    area;
    // ^ = (property) Square.area: number
    sideLength;
    // ^ = (property) Square.sideLength: number
    constructor(sideLength: number) {
        this.sideLength = sideLength;
        this.area = sideLength ** 2;
    }
}

    + explicit type annotation along with a definite assignment assertion (!) if you’re in strictPropertyInitialization.

- short-circuiting assignment operators 

// Addition
// a = a + b
a += b;

// Subtraction
// a = a - b
a -= b;

// Multiplication
// a = a * b
a *= b;

// Division
// a = a / b
a /= b;

// Exponentiation
// a = a ** b
a **= b;

// Left Bit Shift
// a = a << b
a <<= b;

TypeScript 4.0 supports a new ECMAScript feature to add three new assignment operators: 
 &&=, 
 ||=, and 
 ??=.
 
now we can write 
```
let values: string[];
(values ?? (values = [])).push("hello");

// After typescript 4.0 
(values ??= []).push("hello");
```

- unknown on catch clause bindings to improve the default any type 

That’s why TypeScript 4.0 now lets you specify the type of catch clause variables as unknown instead. unknown is safer than any because it reminds us that we need to perform some sorts of type-checks before operating

try {
  // ...
} catch (e: unknown) {
  // Can't access values on unknowns
  console.log(e.toUpperCase());
Object is of type 'unknown'.

  if (typeof e === "string") {
    // We've narrowed 'e' down to the type 'string'.
    console.log(e.toUpperCase());
  }
}

- custom JSX factories, typescript 4.0, users can customize the fragment factory through the new jsxFragmentFactory option

// Note: these pragma comments need to be written
// with a JSDoc-style multiline syntax to take effect.

/** @jsx h */
/** @jsxFrag Fragment */

import { h, Fragment } from "preact";

export const Header = (
  <>
    <h1>Welcome</h1>
  </>
);

- Speed improvements in build mode with --noEmitOnError 



# TypeScript 4.1 
- template literal types 

    + expect functions parameter recieve a set of strings 

function setVerticalAlignment(location: "top" | "middle" | "bottom") {
  // ...
}

setVerticalAlignment("middel");

    + used in property names in mapped types 
    
type Options = {
  [K in "noImplicitAny" | "strictNullChecks" | "strictFunctionTypes"]?: boolean;
};

    + new string literal type 
    
type World = "world";

type Greeting = `hello ${World}`;
//   ^ = type Greeting = "hello world"

    + union substitution positions, it produces the set of every possible string literal 
    
type Color = "red" | "blue";
type Quantity = "one" | "two";

type SeussFish = `${Quantity | Color} fish`;
//   ^ = type SeussFish = "one fish" | "two fish" | "red fish" | "blue fish"

    + example, 9 possible strings 

type VerticalAlignment = "top" | "middle" | "bottom";
type HorizontalAlignment = "left" | "center" | "right";

// Takes
//   | "top-left"    | "top-center"    | "top-right"
//   | "middle-left" | "middle-center" | "middle-right"
//   | "bottom-left" | "bottom-center" | "bottom-right"


    + generic to infer from parts of the eventName string to figure out the associated property.

type PropEventSource<T> = {
    on<K extends string & keyof T>
        (eventName: `${K}Changed`, callback: (newValue: T[K]) => void ): void;
};

declare function makeWatchedObject<T>(obj: T): T & PropEventSource<T>;

let person = makeWatchedObject({
    firstName: "Homer",
    age: 42,
    location: "Springfield",
});

// works! 'newName' is typed as 'string'
person.on("firstNameChanged", newName => {
    // 'newName' has the type of 'firstName'
    console.log(`new name is ${newName.toUpperCase()}`);
});

// works! 'newAge' is typed as 'number'
person.on("ageChanged", newAge => {
    if (newAge < 0) {
        console.log("warning! negative age");
    }
});

    + converting to lowercase and uppercase 
    
type EnthusiasticGreeting<T extends string> = `${Uppercase<T>}`

type HELLO = EnthusiasticGreeting<"hello">;
//   ^ = type HELLO = "HELLO"

- key remapping in mapped types 

type Options = {
  [K in "noImplicitAny" | "strictNullChecks" | "strictFunctionTypes"]?: boolean;
};
// same as
//   type Options = {
//       noImplicitAny?: boolean,
//       strictNullChecks?: boolean,
//       strictFunctionTypes?: boolean
//   };

//new object types based on other object types 
/// 'Partial<T>' is the same as 'T', but with each property marked optional.
type Partial<T> = {
  [K in keyof T]?: T[K];
};

    + re-map keys in mapped types 
    
TypeScript 4.1 allows you to re-map keys in mapped types with a new as clause.

type MappedTypeWithNewKeys<T> = {
    [K in keyof T as NewKeyType]: T[K]
    //            ^^^^^^^^^^^^^
    //            This is the new syntax!
}

        * with the help of remapping we can easily create property names 
        
type Getters<T> = {
    [K in keyof T as `get${Capitalize<string & K>}`]: () => T[K]
};

interface Person {
    name: string;
    age: number;
    location: string;
}

type LazyPerson = Getters<Person>;
//   ^ = type LazyPerson = {
//       getName: () => string;
//       getAge: () => number;
//       getLocation: () => string;
//   }

    + remove keys 
    
// Remove the 'kind' property
type RemoveKindField<T> = {
    [K in keyof T as Exclude<K, "kind">]: T[K]
};

interface Circle {
    kind: "circle";
    radius: number;
}

type KindlessCircle = RemoveKindField<Circle>;
//   ^ = type KindlessCircle = {
//       radius: number;
//   }

- recursive conditional types, conditional types can now immediately reference themselves within their branches, making it easier to write recursive type aliases.

type ElementType<T> = T extends ReadonlyArray<infer U> ? ElementType<U> : T;

function deepFlatten<T extends readonly unknown[]>(x: T): ElementType<T>[] {
  throw "not implemented";
}

// All of these return the type 'number[]':
deepFlatten([1, 2, 3]);
deepFlatten([[1], [2, 3]]);
deepFlatten([[1], [[2]], [[[3]]]]);

    + deeply unwrap promises 
    
type Awaited<T> = T extends PromiseLike<infer U> ? Awaited<U> : T;

/// Like `promise.then(...)`, but more accurate in types.
declare function customThen<T, U>(
  p: Promise<T>,
  onFulfilled: (value: Awaited<T>) => U
): Promise<Awaited<U>>;

- Checked Indexed Accesses ((--noUncheckedIndexedAccess)), index signatures signal to the type system that users can access arbitrarily-named properties. called --noUncheckedIndexedAccess. Under this new mode, every property access (like foo.bar) or indexed access (like foo["bar"]) is considered potentially undefined. That means that in our last example, opts.yadda will have the type string | number | undefined as opposed to just string | number. If you need to access that property, you’ll either have to check for its existence first or use a non-null assertion operator (the postfix ! character)

interface Options {
  path: string;
  permissions: number;

  // Extra properties are caught by this index signature.
  [propName: string]: string | number;
}

function checkOptions(opts: Options) {
  opts.path; // string
  opts.permissions; // number

  // These are all allowed too!
  // They have the type 'string | number'.
  opts.yadda.toString();
  opts["foo bar baz"].toString();
  opts[Math.random()].toString();
}

// Basically saying "trust me I know what I'm doing"
// with the '!' non-null assertion operator.
opts.yadda!.toString();

- paths without baseUrl, Using path-mapping is fairly common - often it’s to have nicer imports, often it’s to simulate monorepo linking behavior.

- checkJs Implies allowJs 

- react 17 jsx factories 

react-jsx 
react-jsxdev 

    + tsconfig.json for production 
// ./src/tsconfig.json
{
  "compilerOptions": {
    "module": "esnext",
    "target": "es2015",
    "jsx": "react-jsx",
    "strict": true
  },
  "include": ["./**/*"]
}

    + for development 
    
// ./src/tsconfig.dev.json
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "jsx": "react-jsxdev"
  }
}

- editor support for the JSDoc @see tag 

// @filename: first.ts
export class C {}

// @filename: main.ts
import * as first from "./first";

/**
 * @see first.C
 */
function related() {}

- breaking changes 

    + lib.d.ts Changes
lib.d.ts may have a set of changed APIs, potentially in part due to how the DOM types are automatically generated. 

    + abstract Members Can’t Be Marked async

    + any/unknown Are Propagated in Falsy Positions

declare let foo: unknown;
declare let somethingElse: { someProp: string };

let x = foo && somethingElse; //x will be any type 
    + resolve parameters are not longer optional in promises
    
to explicit omit the parameter, we can give Promise an explicit void generic type argument (i.e. write it out as Promise<void>). This leverages new functionality in TypeScript 4.1 where a potentially-void trailing parameter can become optional.

new Promise<void>((resolve) => {
  //     ^^^^^^
  doSomethingAsync(() => {
    doSomething();
    resolve();
  });
});

    + conditional spreads create optional properties, object spreads (like { ...foo }) don’t operate over falsy values. So in code like { ...foo }, foo will be skipped over if it’s null or undefined.
    
interface Person {
  name: string;
  age: number;
  location: string;
}

interface Animal {
  name: string;
  owner: Person;
}

function copyOwner(pet?: Animal) {
  return {
    ...(pet && pet.owner),
    otherStuff: 123,
  };
}

// We could also use optional chaining here:

function copyOwner(pet?: Animal) {
  return {
    ...pet?.owner,
    otherStuff: 123,
  };
}

    + the returned type sometimes uses all-optional properties.

{
    x: number;
    name?: string;
    age?: number;
    location?: string;
}

    + unnmatched parameters are no longer related, use type assertion as much as possible 





# TypeScript 4.2 














