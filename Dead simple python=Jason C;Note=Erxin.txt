Dead simple python=Jason C;Note=Erxin

# Part I the python environment 

# Environment

- install 
- interpreter 
- package, pip 
- virtual environment and git 
- file encoding 

```
# -*- coding: latin-1 -*-
```
 
- lint 

venv/bin/pip install pylint
venv/bin/python

> import pylint

- pep8 

Flake8  The Flake8 tool is actually a combination of three static analyzers

Mypy is an unusual static analyzer because it focuses entirely on type annotations

The autopep8 tool leverages pycodestyle (part of Flake8), even using the same configuration file

The Black tool is a little more straightforward: it assumes you want to follow PEP 8 in its entirety

- testing environment 

idle 

emacs and vim 

pycharm 

vscode 

sublime text 

eclipse + pydev/liclipse 

eric python ide 
 
 


# Syntax crash course 
- hello world 

- statement and expression 

- important of whitespace 

- doing nothing 

pass 

- comments and docstrings 

- delcring variables 

- mathematics 

- operators 

- math 

- logic 

- condition 

- boolean, none and identity operators 

thruthiness 

- walrus operator, Python 3.8 introduced assignment expressions, which allow you to assign a value to a variable and use that variable in another expression

```
if (eggs := 7 + 5) == 12:
    print("We have one dozen eggs")

print(eggs)  # prints 12
```

- ellipsis, seldom used piece  This is sometimes used by various libraries and modules, but seldom consistently.

...

- strings escape 

- raw string 

- formatted strings 

- string conversion 

- function

- class and objects  

- error handling 

```
try:
    num = int(num_from_user)
except ValueError:
    print("You didn't enter a valid number.")
    num = 0

```

- tuples and lists 

cheeses = ["Red Leicester", "Tilsit", "Caerphilly", "Bel Paese"]

- loop 

while 

for 

- literal paaterns and whildcards, At long last, Python 3.10 gained structural pattern matching via PEP 634. This provides conditional logic that is at least syntactically similar to switch

```

lunch_order = input("What would you like for lunch? ")

match lunch_order:
    case 'pizza':
        print("Pizza time!")
    case 'sandwich':
        print("Here's your sandwich")
    case 'taco':
        print('Taco, taco, TACO, tacotacotaco!')
    case _:
        print("Yummy.")
        
        
lunch_order = input("What would you like for lunch? ") 

match lunch_order:
    # --snip--
    case 'taco':
        print('Taco, taco, TACO, tacotacotaco!')
    case 'salad' | 'soup':
        print('Eating healthy, eh?')
    case _:
        print("Yummy.")
   

# Capture patter, like default in switch, This pattern acts like a wildcard, except the value of lunch_order is captured as order   

lunch_order = input("What would you like for lunch? ") 

match lunch_order:
    # --snip--
    case 'salad' | 'soup':
        print('Eating healthy, eh?')
    case order:
        print(f"Enjoy your {order}.")

```      



# Project structrue and imports 
- project 

README, which is a description of your project and its goals
LICENSE, which is your project’s license
.gitignore, which is a special file that tells Git what files and directories to ignore
A directory, which has the name of your project

- module, A module is any Python (.py) file.

- PEP 8 and Naming

Your packages and modules need clear names to identify them

- import module, from module, rename imported module with as 

    + absolute import start from top level package 
    
    from omission.common.game_enums import GameMode
    
    + relative imports, import from a module in the same package or subpackage.
    
    from common.game_enums import GameMode
    
    from ..common.game_enums import GameMode
    
    The two dots (..) mean “the current package’s direct parent package,”
    
    One dot (.) means the current package.
    Two dots (..) takes you back one level, to the parent package.
    Three dots (...) takes you back two levels, to the parent of the parent package.
    Four dots (....) takes you back three levels.
    
- use __init__.py to enable and control the behavior of import *
- python module search path 

PYTHONPATH, and the default path for the Python instance being used.

- The import statement calls the built-in__import__() function.

The built-in importer finds and loads built-in modules.
The frozen importer finds and loads frozen modules, meaning modules that have been converted to compiled bytecode (see Chapter 1).
The path-based finder looks in the filesystem for the module.

add the module object to sys.modules—adding it, in fact, just before actually loading, to prevent an import loop




# Variables and types 
- Assignment
- data types 

type(obj)

isinstance(obj, type)

- duck typing 

- scope and garbage collection

Functions (including lambdas) and comprehensions define their own scope; they are the only structures in the language to do so. Modules and classes don’t have their own scope in the strictest sense; they only have their own namespace. 

Local
Enclosing-function locals (that is, anything found via nonlocal)
Global
Built-in

- interpreter shutdown 

- weak reference, One way to do this is with weakref, which creates a reference to a value without increasing that value’s reference count.

- Individual items are references. Just as a name is bound to a value, so also are items in collections bound to values, in the same manner. This binding is called a reference

- shallow copy, copy of a mutable value, instead of aliasing the original; the most explicit of these ways is with the copy() function.

default_toppings = ["Lettuce", "Tomato", "Beef"]
mild_taco = Taco(default_toppings)
hot_taco = Taco(default_toppings)
hot_taco.add_sauce("Salsa")

- deep copy 

hot_taco = copy.copy(mild_taco)

hot_taco = copy.deepcopy(mild_taco)

- terminology review 

alias (v.) To bind a mutable value to more than one name. 
assignment (n.) The act of binding a value to a name
bind (v.) To create a reference between a name and a value.
coercion (n.) The act of implicitly casting a value from one type to another.
conversion (n.) The act of explicitly casting a value from one type to another.
identity (n.) The specific location in memory that a name is bound to
immutable (adj.) Of or relating to a value that cannot be modified in place.
mutable (adj.) Of or relating to a value that can be modified in place.
mutate (v.) To change a value in place.
rebind (v.) To bind an existing name to a different value.
reference (n.) The association between a name and a value.
scope (n.) A property that defines what section of the code a name is accessible from
shallow copy (v.) To copy an object to a new value but not copy the data from values referenced within that object to new values.
type (n.) A property that defines how a raw value is interpreted, for example, as an integer or a boolean.
value (n.) A unique copy of data in memory.
variable (n.) A combination of a name and the value the name refers to.
weakref (n.) A reference that does not increase the reference count on the value.





# Function and lambdas 
- recursion  
- keyword argument 
- overload function 
- variadic function, a single variadic parameter or variadic positional parameter. In the dice-rolling function, I want to allow the rolling of multiple dice

- keyword variadic argument 

- default and keyword only 
```
def roll_dice(*, sides=6, dice=1):
    return tuple(random.randint(1, sides) for _ in range(dice))
```
- Placing a forward slash (/) in the list designates all preceding parameters as positional-only:
```
def roll_dice(dice=1, /, sides=6):
    return tuple(random.randint(1, sides) for _ in range(dice))
```

- nested function 

```
def roll_dice(sides=6, dice=1):
    def roll():
        return random.randint(1, sides)
```

- closure 

```
def make_dice_cup(sides=6, dice=1):
    def roll():
        return tuple(random.randint(1, sides) for _ in range(dice))
    
    return roll
```

- recursion with closures 

```
def make_dice_cup(sides=6, dice=1):
    def roll():
        nonlocal dice
        if dice < 1:
            return ()
        die = random.randint(1, sides)
        dice -= 1
        return (die, ) + roll()

    return roll
```

- stateful closures 

```
import random


def start_turn(limit, dice=5, sides=6):
    def roll():
        nonlocal limit
        if limit < 1:
            return None
        limit -= 1
        return tuple(random.randint(1, sides) for _ in range(dice))

    return roll
```

- lambda 

```
lambda x, y: x + y
```

- decorator 

```
import functools
import random

character = "Sir Bob"
health = 15
xp = 0


def character_action(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        if health <= 0:
            print(f"{character} is too weak.")
            return

        result = func(*args, **kwargs)
        print(f"    Health: {health} | XP: {xp}")
        return result

    return wrapper
```

- type annotation 

```
import random
import typing


def roll_dice(sides: int = 6, dice: int = 1) -> typing.Tuple[int, ...]:
    # --snip--
```



# Object and classes 

- initializer 

A class often has an initializer method for defining the initial values of instance attributes, which are the member variables that exist in each instance.
```
class SecretAgent:

    def __init__(self, codename):
        self.codename = codename
        self._secrets = []
```

- class constructor, python splits the duties of a typical constructor between the initializer __init__() and the constructor __new__()
```
    def __new__(cls, *args, **kwargs):
        return super().__new__(cls, *args, **kwargs)
```

- The finalizer is called when a class instance finally reaches the end of its lifespan and is cleaned up by the garbage collector

```
    def __del__(self):
        print(f"Agent {self.codename} has been disavowed!")
```

- attributes, All variables belonging to a class or instance are called attributes

```
# instance attribute 

class SecretAgent:
    def __init__(self, codename):
        self.codename = codename
        self._secrets = []
```                            





# Part II essential structures 


# Part III data and flow 


# Part IV advanced concepts 


# Part V beyond the code 


# Appendix 