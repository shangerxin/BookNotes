Clean code in javascript=James;Note=Erxin

# reference 
- repo 
https://github.com/PacktPublishing/Clean-Code-in-JavaScript

- book 
https://learning.oreilly.com/library/view/clean-code-in/9781789957648/

# the tenets of clean code 
- reliability 
- efficiency 
- maintainability 
- usability 
- adaptability 
- intuitive design 


# enemies of clean code 
- pressure to ship 
- bad metrics 
productivity 
document 
well-tested code 
buggy code base
- lack of ownership 
- showing off with syntax 
- stubborn options 
- imposter syndrome 
- cargo culting code 
- cargo culting tools and libraries 


# SOLID and other principles 
- SOLID 

single responsibility 
open closed
liskov substitution 
interface segregation 
dependency inversion 

- abostraction 
over-abstraction 
user-abstraction 
balanced abstraction 

    + DRY, don't repeat yourself 
    + you aren't gonna need it? keep it simple and stupid (KISS)

- functional programming principles 

functional purity 
    + testable 
    + predicatability 

immutability 



# Naming is hard 
- what's in a name 
purpose, what something is for and how it behaves 
concept, core idea and how to think about it 
contract, expectation about how it works 
    + example 
    
styleButton
setStyleOfButton
setButtonCSS
stylizeButton
setButtonStyles
applyButtonCSS

    + concept 
    
Imagine the following names together:

rejectedDeal
acceptedDeal
pendingDeal
stalledDeal

    + hidden contracts that exist in JavaScript
A variable prefixed with is, for example, isUser, is expected to be a Boolean type (either true or false).

A variable in all-caps is expected to be a constant (only set once and immutable), for example, DEFAULT_USER_EXPIRY.

Variables named plurally (for example, elements) are expected to contain one or more items in a set-like object (for example, an array), whereas singularly named variables (for example, element) are only expected to contain one item (not in a set).

Functions with names beginning with get, find, or select are usually expected to return something to you. Functions beginning with process, build, or run are more ambiguous and may not do so.

Property or method names beginning with an underscore, such as _processConfig, are usually intended to be internal to an implementation or pseudo-private   

    + Hungarian notation, a type of naming that is useful in dynamically typed language
Instead of button, we may use elButton or buttonElement
Instead of age, we may use nAge or ageNumber
Instead of details, we may use objDetails or detailsObject

        * following disadvantages
runtime changes 
codebase rigidity 
lack of meaning 

- naming anti-patterns 

needlessly short names 

```
function incId(id, f) {
  for (let x = 0; x < ids.length; ++x) {
    if (ids[x].id === id && f(ids[x])) {
      ids[x].n++;
    }
  }
}
```

needless exotic names 
```
function deStylizeParameters(params) {
  disEntangleParams(params, p => !!p.style).obliterate();
}
```

needless long names 
```
documentManager.refreshAndSaveSignedAndNonPendingDocuments();
```

- three bad names approach. This is what we come up with:

matchUsernameAgainstForbiddenWords
checkForForbiddenWordConflicts
isUsernameReservedWord


- consistency and hierachy, make your hierarchy reflect your abstractions.Â 
- techniques and considerations 

Constants should be named with underscore-separated capitals; for example, DEFAULT_COMPONENT_COLOR
Constructors or classes should be camel-cased with an initial uppercase letter; for example, MyComponent
Everything else should be camel-cased with an initial lower case letter; for example, myComponentInstance

hungarian notation 
naming and abstracting functions 
three bad names 


# JavaScript and its bits 
- primitive types 

Boolean('hi'); // => true
Boolean(0);    // => false
Boolean(42);   // => true
Boolean(0.1);  // => true
Boolean('');   // => false
Boolean(true); // => true
Boolean(null); // => false

- objects 
- functions 
    + bindings and this 
    this 
    super 
    new.target, this binding informs you as to whether the function was inovked as a constructor 
    arguments 
    
    + generator 
    function *(){
    }
- arrays and iterables 
- regexp 
- dynamic types 
    + type detection typeof 
    typeof null; // => "object"

    typeof [];         // => "object"
    typeof RegExp(''); // => "object"
    typeof {};         // => "object"

    typeof () => {};          // => "function"
    typeof function() {};     // => "function"
    typeof class {};          // => "function"
    typeof ({ foo(){} }).foo; // => "function"
    
    + detect number 
    
isFinite(n): Returns true if Number(n) is not Infinity, -Infinity, or NaN
isNaN(n): Returns true if Number(n) is not NaN
Number.isNaN(n): Returns true if n is not NaN
Number.isFinite(n): Returns true if n is not Infinity, -Infinity, or NaN
    + detect string 
    
function isNonEmptyString(string) {
  return typeof string === 'string' && string.trim().length > 0;
}

isNonEmptyString('hi');  // => true
isNonEmptyString('');    // => false
isNonEmptyString(' ');   // => false
isNonEmptyString(' \n'); // => false

    + detect undefine 
if (value === undefined) {
  // ...
}

if (someValue === null) {
  // someValue is null...
}

    + detect instance 
const component = new Component();
component instanceof Component; 

    + detect array 
function isIterable(obj) {
  return obj != null &&
    typeof obj[Symbol.iterator] === 'function';
}

if (Array.isArray(value)) {
 // ...
}

    + conversion, coercion and casting 
    
Coercion is the implicit and internal process of conversion employed by JavaScript when we use operators or language constructs


    
- operators 
    + arithmetic 
    + logical 
    + comparative 
    + assignment 
    + property access operators 
    + other operators and syntax 
    delete 
    void 
    new 
    spread 
    comma 
    grouping 
    

# Parts of syntax and space 
- expressions, statements, and blocks 
- scopes and delcarations 


# Control flow 
- movement of control 
- statements of control 
- handling cyclomatic complexity 
- asynchronous control 


# Crasfting abstractions 
- design patterns 

MVC 
MVVM 
MV* nad the nature of software 

- javascript modules 
- modular design patterns 

    + constructor 
    
    + class pattern 
    static methods 
    public and private fields 
    extending classes 
    mixing-in classes 
    accessing a super-class 
    
    + prototype pattern 
    + revealing module pattern 
    + conventional module pattern 
    + singleton class pattern 
    
    
# Real-world challenges 
- DOM and single page applications 
- dependency maanagement 

npm 

bundling 

- security 
cross-site scripting 

cross-site request forgery 
https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html

other security vulnerabilities 

- reference security cheatsheets 

https://cheatsheetseries.owasp.org/cheatsheets/AJAX_Security_Cheat_Sheet.html



# Testing and tooling 
- unit test 
- integration testing 
- e2e and functional testing 
- test driven development 


# Writing clean tests 
- test the right things 
- writing intuitive assertions 
- creating clear herarchies 
- providing final clarity 
- creating clear directory structure 


# Tools for cleaner code 
- linters and formatters 
- static typing 
- e2e testing tools 
- automatic builds and CI 


# collaboration and making changes 
# document your code 
- aspects of clean documentation 

concept 
specification 
instruction 
usability 

- documentation is everywhere 
- writing ofr non-technical audience 


# other people code 
- inheriting code 
- dealing with third-party code 

encapsulating and adapting 

section and understanding 

- online test places for poc 
React boilerplate (github.com/react-boilerplate/react-boilerplate)
Angular bootstrap boilerplate (github.com/mdbootstrap/Angular-Bootstrap-Boilerplate)
Ember boilerplate (github.com/mirego/ember-boilerplate)
Svelte template (github.com/sveltejs/template)


# Communication and advocacy 
- planning and setting requirements 
- communication strategies 
- identifying issues and driving change 
- case study 

    + creating the REST API 
    + creating the client-side build process 
    + creating the component 
    
    










































