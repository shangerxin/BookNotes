Python for Excel=Felix Zumstein;Note=Erxin 


# Introduce to python 


# Why python for excel 
- extensively, including pandas, OpenPyXL, and xlwings

- package management 

conda                       pip 
conda list                  pip freeze 
conda install package       pip install package 
conda update package        pip install --upgrade package 

- jupyter notebooks 

(base)> cd C:\Users\username\python-for-excel
(base)> jupyter notebook

- keyboard shortcuts 

Shift+Enter       Run the cell (works also in edit mode)

↑ (up-arrow)      Move cell selector up

↓ (down-arrow)    Move cell selector down

b                 Insert a new cell below the current cell

a                 Insert a new cell above the current cell

dd                Delete the current cell (type two times the letter d)

m                 Change cell type to Markdown

y                 Change cell type to code


- requires 

a local installation of excel 

binder is a serviceprovided py project jupyter 

kaggle notebooks a platform for data science 

google colab, a google's notebook platform 

- text editor 

sublime 

notepad++ 

vim or emacs 

- ides 

pycharm 

spyder 

jupyterlab, webbased ide 

wing python ide 

komodo ide 

pydev, python envivronment base on eclipse 



# Introduction to pandas 

# Numpy fundamentals 
- array axies 

 -> axies 1 
|
V 
axies 0 

- array.dtype 

- universal functions, ufunc 

np.arange(2 * 5).reshape(2, 5)




# Time series analysis with panda
- data frame and series 

series is axis 0 numpy array 


dataframe is two dimension array or we can say it's maxtrix 

- read excel 

```
import pandas as pd 

pd.read_excel("xl/course_participants.xlsx")
```

- An index will allow pandas to look up data faster and is essential for many common operations

- select data  which rows and columns you want to retrieve:

df.loc[row_selection, column_selection]


Selection	                        Return Data Type	                    Example
Single value                        Scalar                                  df.loc[1000, "country"]

One column (1d)                     Series                                  df.loc[:, "country"]

One column (2d)                     DataFrame                               df.loc[:, ["country"]]

Multiple columns                    DataFrame                               df.loc[:, ["country", "age"]]

Range of columns                    DataFrame                               df.loc[:, "name":"country"]

One row (1d)                        Series                                  df.loc[1000, :]

One row (2d)                        DataFrame                               df.loc[[1000], :]

Multiple rows                       DataFrame                               df.loc[[1003, 1000], :]

Range of rows                       DataFrame                               df.loc[1000:1002, :]

- select by position 

Single value    Scalar      df.iloc[1, 2]


df2.replace("USA", "U.S.")
 

- unique and duplicate data 

df["country"].is_unique

- view with copy 

whether loc and iloc return views or copies, which makes it one of the more confusing topics.

- concatenating, concat glues DataFrames together along the rows and aligns the columns automatically

- descriptive statistics and data aggregation, the groupby method and the pivot_table function.


df.groupby(["continent"]).mean()


pivot = pd.pivot_table(sales,
                    index="Fruit", columns="Region",
                    values="Revenue", aggfunc="sum",
                    margins=True, margins_name="Total")
                    
- matplotlib 

- Plotly is a JavaScript-based library and can—since version 4.8.0

- other libraries 

Seaborn 

Bokeh 

Altair 

HoloViews 

- import and export data 

pd.read_csv       pd.to_csv 
pd.read_json 
pd.read_html 
pd_read_excel 
pd.read_sql       ...




 

# Excel manipulate with pandas 

# Programming the excel application with Xlwings 

# Execel automation 

# Python powered excel tools 

# The python package tracker 

# User defined functions, UDFs 

# Conda environment 

# Adavance vs code functionality 

# Advance python concepts 