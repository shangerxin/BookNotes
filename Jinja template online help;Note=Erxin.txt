Jinja template online help;Note=Erxin

# introduction
- jinja is a modern designer-friendly templating language for python. modelled after django's templates. 

https://jinja.palletsprojects.com/en/2.11.x/

- features 

sandboxed execution

powerful automatic HTML escaping system for XSS prevention

template inheritance

compiles down to the optimal python code just in time

optional ahead-of-time template compilation

easy to debug. Line numbers of exceptions directly point to the correct line in the template.

configurable syntax

- version 2.11.2 


# introduction 
- prerequisties 
- installation 
- basic API usage 


# API 

# Sandbox 

# Native python types 

# Template designer document 
- synopsis, Jinja can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A Jinja template doesn’t need to have a specific extension: .html, .xml, or any other extension is just fine

- delimiters 
```
{% ... %} for Statements

{{ ... }} for Expressions to print to the template output

{# ... #} for Comments not included in the template output

#  ... ## for Line Statements
```

- example 

<!DOCTYPE html>
<html lang="en">
<head>
    <title>My Webpage</title>
</head>
<body>
    <ul id="navigation">
    {% for item in navigation %}
        <li><a href="{{ item.href }}">{{ item.caption }}</a></li>
    {% endfor %}
    </ul>

    <h1>My Webpage</h1>
    {{ a_variable }}

    {# a comment #}
</body>
</html>

- variable 
{{ foo.bar }}
{{ foo['bar'] }}

- implementation 
    + foo.bar does following things on python layer 
    
check for an attribute called bar on foo (getattr(foo, 'bar'))

if there is not, check for an item 'bar' in foo (foo.__getitem__('bar'))

if there is not, return an undefined object.

    + foo['bar'] works mostly the same with a small difference in sequence 
    
check for an item 'bar' in foo. (foo.__getitem__('bar'))

if there is not, check for an attribute called bar on foo. (getattr(foo, 'bar'))

if there is not, return an undefined object.

- filters, pipe symbol (|) and may have optional arguments in parentheses

 {{ name|striptags|title }} will remove all HTML Tags from variable name and title-case the output (title(striptags(name)))
 
 {{ listx|join(', ') }} will join a list with commas (str.join(', ', listx)).
 
    + built in filters, https://jinja.palletsprojects.com/en/2.11.x/templates/#builtin-filters
    
abs()

float()

lower()

round()

tojson()

attr()

forceescape()

map()

safe()

trim()

batch()

format()

max()

select()

truncate()

capitalize()

groupby()

min()

selectattr()

unique()

center()

indent()

pprint()

slice()

upper()

default()

int()

random()

sort()

urlencode()

dictsort()

join()

reject()

string()

urlize()

escape()

last()

rejectattr()

striptags()

wordcount()

filesizeformat()

length()

replace()

sum()

wordwrap()

first()

list()

reverse()

title()

xmlattr()

- tests, add is plus the name, return true/false, If the test only takes one argument, you can leave out the parentheses

{% if loop.index is divisibleby 3 %}
{% if loop.index is divisibleby(3) %}

- comments {# ... #}

- white control

    + default 
    
a single trailing newline is stripped if present

other whitespace (spaces, tabs, newlines etc.) is returned unchanged

    + configures Jinja to trim_blocks, the first newline after a template tag is removed automatically (like in PHP).
    
    + manually disable the lstrip_blocks behavior by putting a plus sign (+) at the start of a block

<div>
        {%+ if something %}yay{% endif %}
</div>

    + manually trip whitespaces, add a minus sign (-) to the start or end of a block (e.g. a For tag), a comment, or a variable expression, the whitespaces before or after that block will be removed 
    
{% for item in seq -%}
    {{ item }}
{%- endfor %}

- escaping 

The easiest way to output a literal variable delimiter ({{) is by using a variable expression:

{{ '{{' }}

raw syntax 

{% raw %}
    <ul>
    {% for item in seq %}
        <li>{{ item }}</li>
    {% endfor %}
    </ul>
{% endraw %}

- line statements, If line statements are enabled by the application, it’s possible to mark a line as a statement. 
<ul>
# for item in seq
    <li>{{ item }}</li>
# endfor
</ul>

<ul>
{% for item in seq %}
    <li>{{ item }}</li>
{% endfor %}
</ul>

Line statements can span multiple lines if there are open parentheses, braces or brackets

line-comment prefix is configured to be ##

- template inheritance 
    + basic 
    
<!DOCTYPE html>
<html lang="en">
<head>
    {% block head %}
    <link rel="stylesheet" href="style.css" />
    <title>{% block title %}{% endblock %} - My Webpage</title>
    {% endblock %}
</head>
<body>
    <div id="content">{% block content %}{% endblock %}</div>
    <div id="footer">
        {% block footer %}
        &copy; Copyright 2008 by <a href="http://domain.invalid/">you</a>.
        {% endblock %}
    </div>
</body>
</html>

    + child template will fill the empty blocks 
    
A child template might look like this:

{% extends "base.html" %}
{% block title %}Index{% endblock %}
{% block head %}
    {{ super() }}
    <style type="text/css">
        .important { color: #336699; }
    </style>
{% endblock %}
{% block content %}
    <h1>Index</h1>
    <p class="important">
      Welcome to my awesome homepage.
    </p>
{% endblock %}

    + You can access templates in subdirectories with a slash:

{% extends "layout/default.html" %}

    + print a block multiple times 
    
<title>{% block title %}{% endblock %}</title>
<h1>{{ self.title() }}</h1>
{% block body %}{% endblock %}

    + render parent block at the child with calling super()
    
{% block sidebar %}
    <h3>Table Of Contents</h3>
    ...
    {{ super() }}
{% endblock %}

- nesting extends 

# parent.tmpl
body: {% block body %}Hi from parent.{% endblock %}

# child.tmpl
{% extends "parent.tmpl" %}
{% block body %}Hi from child. {{ super() }}{% endblock %}

# grandchild1.tmpl
{% extends "child.tmpl" %}
{% block body %}Hi from grandchild1.{% endblock %}

# grandchild2.tmpl
{% extends "child.tmpl" %}
{% block body %}Hi from grandchild2. {{ super.super() }} {% endblock %}

- named block end-tags 

{% block sidebar %}
    {% block inner_sidebar %}
        ...
    {% endblock inner_sidebar %}
{% endblock sidebar %}

- block nesting and scope, default blocks may not access variables from outer scopes 

{% for item in seq %}
    <li>{% block loop_item %}{{ item }}{% endblock %}</li>
{% endfor %}

explicitly specify that variables are available in a block by setting the block to “scoped”
{% for item in seq %}
    <li>{% block loop_item scoped %}{{ item }}{% endblock %}</li>
{% endfor %}
When overriding a block, the scoped modifier does not have to be provided.

- template objects passed in the template context, you can extend from that object as well. Assuming the calling code passes a layout template as layout_template to the environment, this code works:

{% extends layout_template %}

- html escaping 

manually escaping each variable; or

automatically escaping everything by default.

Escaping everything except for safe values will also mean that Jinja is escaping variables known to not include HTML

    + manual escaping 
    
{{ user.username|e }}

    + automatic escaping,  automatic escaping is enabled, everything is escaped by default except for values explicitly marked as safe
    
marked as safe either in:

The context dictionary by the application with markupsafe.Markup

The template, with the |safe filter.

- list of control structures, appear inside {% ... %} blocks.

    + for 
    
<h1>Members</h1>
<ul>
{% for user in users %}
  <li>{{ user.username|e }}</li>
{% endfor %}
</ul>

        * special variables for for-loop block 
        
loop.index, The current iteration of the loop. (1 indexed)

loop.index0, The current iteration of the loop. (0 indexed)

loop.revindex, The number of iterations from the end of the loop (1 indexed)

loop.revindex0, The number of iterations from the end of the loop (0 indexed)

loop.first, True if first iteration.

loop.last, True if last iteration.

loop.length, The number of items in the sequence.

loop.cycle, A helper function to cycle between a list of sequences. See the explanation below.

loop.depth, Indicates how deep in a recursive loop the rendering currently is. Starts at level 1

loop.depth0, Indicates how deep in a recursive loop the rendering currently is. Starts at level 0

loop.previtem, The item from the previous iteration of the loop. Undefined during the first iteration.

loop.nextitem, The item from the following iteration of the loop. Undefined during the last iteration.

loop.changed(*val), True if previously called with a different value (or not called at all).

        * recursive loop 
        
a sitemap with recursive loops:

<ul class="sitemap">
{%- for item in sitemap recursive %}
    <li><a href="{{ item.href|e }}">{{ item.title }}</a>
    {%- if item.children -%}
        <ul class="submenu">{{ loop(item.children) }}</ul>
    {%- endif %}</li>
{%- endfor %}
</ul>

    + if statement 
    
{% if users %}
<ul>
{% for user in users %}
    <li>{{ user.username|e }}</li>
{% endfor %}
</ul>
{% endif %}

    + macros are comparable with functions in regular programming 
    
{% macro input(name, value='', type='text', size=20) -%}
    <input type="{{ type }}" name="{{ name }}" value="{{
        value|e }}" size="{{ size }}">
{%- endmacro %}

The macro can then be called like a function in the namespace:

<p>{{ input('username') }}</p>
<p>{{ input('password', type='password') }}</p>
    
    + call,  pass a macro to another macro. 
{% macro render_dialog(title, class='dialog') -%}
    <div class="{{ class }}">
        <h2>{{ title }}</h2>
        <div class="contents">
            {{ caller() }}
        </div>
    </div>
{%- endmacro %}

{% call render_dialog('Hello World') %}
    This is a simple dialog rendered by using a macro and
    a call block.
{% endcall %}

    + filters, apply regular Jinja filters on a block of template data.

{% filter upper %}
    This text becomes uppercase
{% endfilter %}

    + assignments, assign values to variables 
    
Assignments use the set tag and can have multiple targets:

{% set navigation = [('index.html', 'Index'), ('about.html', 'About')] %}
{% set key, value = call_something() %}

    + scoping behavior, it is not possible to set variables inside a block and have them show up outside of it.

; not possible to do this 
{% set iterated = false %}
{% for item in seq %}
    {{ item }}
    {% set iterated = true %}
{% endfor %}
{% if not iterated %} did not iterate {% endif %}


Instead use alternative constructs like the loop else block or the special loop variable:

{% for item in seq %}
    {{ item }}
{% else %}
    did not iterate
{% endfor %}

- block assignments, 2.8+ support capture the contents of a block into a variable 

{% set navigation %}
    <li><a href="/">Index</a>
    <li><a href="/downloads">Downloads</a>
{% endset %}
The navigation variable then contains the navigation HTML source.

- extends, The extends tag can be used to extend one template from another.

- include is useful to include a template and return the rendered contents of that file into the current namespace:

{% include 'header.html' %}
    Body
{% include 'footer.html' %}

    + list of templates 
    
the templates exist, otherwise it will raise an exception.

Example:

{% include ['page_detailed.html', 'page.html'] %}
{% include ['special_sidebar.html', 'sidebar.html'] ignore missing %}

- import context behavior, included templates are passed the current context and imported templates are not. imports are different from include templates 

two examples:

{% from 'forms.html' import input with context %}
{% include 'header.html' without context %}

- expressions 

literals 

math 

comparisons 

logics 

other operators 

if expression 

python methods 

- builtin tests 

boolean()

even()

integer()

ne()

string()

callable()

false()

iterable()

none()

true()

defined()

float()

le()

number()

undefined()

divisibleby()

ge()

lower()

odd()

upper()

eq()

gt()

lt()

sameas()

escaped()

in()

mapping()

sequence()




# Extensions 
- reference 
https://jinja.palletsprojects.com/en/2.11.x/extensions/#adding-extensions

- i18n 

https://jinja.palletsprojects.com/en/2.11.x/extensions/#i18n-extension

- expression statement 

- loop controls 

- debug statement 

- with statement 

- autoescape overrides 

{% autoescape true %}
    Autoescaping is active within this block
{% endautoescape %}

{% autoescape false %}
    Autoescaping is inactive within this block
{% endautoescape %}


# Integration 

# Switching from other template engines 

# Tips and tricks 

# Frequently asked questions 


















