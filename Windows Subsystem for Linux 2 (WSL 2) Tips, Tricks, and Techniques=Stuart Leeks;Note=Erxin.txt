Windows Subsystem for Linux 2 (WSL 2) Tips, Tricks, and Techniques=Stuart Leeks;Note=Erxin


# Preface 
- With Docker Desktop's WSL integration, you can run the Docker daemon in WSL

- The desire to run Linux binaries has been around for many years, at least if the existence of projects such as Cygwin (https://cygwin.com ) 

To run Linux application on Cygwin, it needs to be rebuilt from source.

- WSL provides the ability to run Linux binaries on Windows without modification

- you can access a new \\wsl$\ networked file share that is automatically available

- the Windows C: drive is mounted as /mnt/c.

- WSL 1 This layer implements Linux syscalls on top of the Windows kernel and is what enables Linux binaries to run without modification;

The creation of the translation layer in WSL 1 was a bold move and opened up new possibilities on Windows. differences between Linux and Windows run deeper and it is harder to see how to reconcile them.

- WSL 2, the WSL team went back to the drawing board and came up with a new solution: a virtual machine

Lightweight utility virtual machine (see https://docs.microsoft.com/en-us/windows/wsl/wsl2-about)

Running a virtual machine for WSL 2 means that it is now running the Linux kernel (the source code for it is available at https://github.com/microsoft/WSL2-Linux-Kernel). This in turn means that the challenges faced by the WSL 1 translation layer are removed

performance and syscall compatibility are both massively improved in WSL 2

Don't support USB access (full details at https://docs.microsoft.com/en-us/windows/wsl/wsl2-faq#can-i-access-the-gpu-in-wsl-2-are-there-plans-to-increase-hardware-support)

WSL 2 support GPU
https://learn.microsoft.com/en-us/windows/wsl/tutorials/gpu-compute

- Windows Insiders Program (https://insider.windows.com/en-us/





# Installing and Configuring the Windows Subsystem for Linux
- enter the following command:

$ Wsl.exe --install

- os version 

After that, you can see the OS Build is 19041.208.

- Windows Features dialog appears, check the boxes for Virtual Machine Platform and Windows Subsystem for Linux

- go to http://aka.ms/wsl2kernel to get the link to download and install the kernel

- official documentation (https://docs.microsoft.com/windows/wsl/install-win10#install-your-linux-distribution-of-choice).

any Linux distros you install then run the following command:

$ wsl --set-default-version 2

- modifying settings in the wsl.conf configuration file.

- Earlier builds of WSL provided a wslconfig.exe utility

- wsl --list to get a list of the Linux distros

$ wsl --list --running

$ wsl --list –verbose

- a distro can be converted between versions of WSL after installation

$ wsl --set-version 

$ wsl --set-version Ubuntu 2

The following snippet shows the output from running wsl ls ~ and wsl cat /etc/issue

- want to run the command in a specific distro, then you can use the -d switch to specify the distro you want the command to run in

$ wsl -d Ubuntu-20.04 cat /etc/issue 

- specify the user 

$ wsl whoami 

$ wsl -u stuart whoami 
stuart 

- stop a specific one, you can run 

$ wsl --terminate <distro>

- want to shut down WSL and all running distros, you can run 

$ wsl --shutdown

- wsl.conf file is located in the /etc/wsl.conf file in each distro. If the file doesn't exist and you want to apply some settings to a distro

```
[section]

value1 = true

value2 = "some content"

# This is just a comment

[section2]

value1 = true
```


```
[automount]

enabled = true # control host drive mounting (e.g. /mnt/c)

mountFsTab = true # process /etc/fstab for additional mounts

root = /mnt/ # control where drives are mounted

[interop]

enabled = true # allow WSl to launch Windows processes

appendWindowsPath = true # add Windows PATH to $PATH in WSL
```

The automount section gives options for controlling how WSL mounts your Windows drives

wsl.conf can be found at https://docs.microsoft.com/en-us/windows/wsl/wsl-config#configure-per-distro-launch-settings-with-wslconf.

- there is a global .wslconfig file added with version 2

C:\Users\<your username>\.wslconfig

```
[wsl2]

memory=4GB

processors=2

localhostForwarding=true

swap=6GB

swapFile=D:\\Temp\\WslSwap.vhdx
```

documentation: https://docs.microsoft.com/en-us/windows/wsl/wsl-config#configure-global-options-with-wslconfig.



# Getting start with windows terminal 
- GitHub at https://github.com/microsoft/terminal

- Ctrl + Shift + T can be used to start a new instance of the default profile

Ctrl + Shift + 1 launches the first profile, Ctrl + Shift + 2 launches the second

- Ctrl + Tab to navigate forward through the tabs and Ctrl + Shift + Tab to navigate backward

Ctrl + Alt + <n>, where <n> is the position of the tab you want to navigate to

- Configuring windows terminal 

Ctrl + Alt + <n>, where <n> is the position of the tab you want to navigate to

- settings.json in the default editor for JSON files for your system

settings is left to the documentation (https://docs.microsoft.com/en-us/windows/terminal/customize-settings/global-settings) 

have backslashes (\) escaped as double-backslashes (\\).

- changing font 

easier to read (for example, with the OpenDyslexic font available at https://www.opendyslexic.org/).

- create a color scheme 

schemes section in the settings file. Details on this can be found at https://docs.microsoft.com/en-us/windows/terminal/customize-settings/color-schemes

- Windows Terminal documentation at https://docs.microsoft.com/en-us/windows/terminal/customize-settings/profile-settings.




# Windows and linux a Winning combination 
- If you type \\wsl$ into the address bar in Windows Explorer, it will list any running Linux distributions (distros)

\\wsl$\Ubuntu-20.04\home\stuart\tmp path in Windows Explorer.

- running linux applications from windows 

ps> Get-ChildItem $env:SystemRoot

used the SystemRoot environment variable to refer to the Windows folder

ps> Get-Childitem $env:SystemRoot | ForEach-Object { $_.Name.Substring(0,1).ToUpper() } | wsl sort | wsl uniq -c

which takes the input ($_) and gets the first character using Substring, which lets you take part of a string.

- piping from linux 

ps> wsl ls /usr/bin
ps> wsl bash -c "ls /usr/bin | cut -c1-1" | Group-Object

- host a web application at 8080, open your web browser in Windows and navigate to http://localhost:8080. 

WSL forwards traffic for localhost in Windows into Linux distros.



# Linux to windows interoperability 
- sharing your Secure Shell (SSH) keys between Windows and Linux for ease of use and maintenance.

- WSL automatically mounts your Windows drives inside WSL distributions (distros). These mounts are created in /mnt; for example, your C: drive is mounted as /mnt/c

disable this mounting or change where the mounts are created, you can use wsl.conf

- calling windows application from linux 

$ powershell.exe -C "Get-ItemProperty -Path

$ notepad.exe c:\\wsl-book\\wsl.txt 

- alias command into your .bashrc 

- copying output to the windows clipboard 

combine this with an alias (alias clip=clip.exe) to simplify it to echo $PWD > clip.

access this via /mnt/c/Users/stuart/Downloads

access to this as ~/Downloads in WSL

$ ln -s /mnt/c/Users/stuart/Downloads/ ~/Downloads 

- Using wslview to launch default Windows applications

wslview from wslutilities allows us to do the same thing from Linux.

$ wslview my-image.jpg

$ wslview https://wsl.tips

- The wslpath utility can be used to translate between Windows paths and Linux paths

$ wslpath -w ~/my-text-file.txt

\\wsl$\Ubuntu-20.04\home\stuart\my-text-file.txt

    + convert paths in the opposite direction
    
$ wslpath -u '\\wsl$\Ubuntu-20.04\home\stuart\my-text-file.txt'

specifying Windows paths in Bash, you must either escape them or surround the path with single quotes to avoid the need to escape them.

The same applies to the dollar sign in \\wsl$\... paths.

$ wslpath -u 'C:\Windows'

```
WIN_PROFILE=$(cmd.exe /C echo %USERPROFILE% 2>/dev/null)

WIN_PROFILE_MNT=$(wslpath -u ${WIN_PROFILE/[$'\r\n']})

ln -s $WIN_PROFILE_MNT/Downloads ~/Downloads
```

- SSH agent forwarding 

https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement.

https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ssh-from-windows#provide-an-ssh-public-key-when-deploying-a-vm

you could copy the SSH keys each time. An alternative is to set up OpenSSH Authentication Agent in Windows and then configure the WSL distros to use that to get the keys. 

    + Install 
    
    https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse.
    
    +  Ensuring Windows' OpenSSH Authentication Agent is running
    
    open the Services app in Windows and scroll down to OpenSSH Authentication Agent.
    
    can use ssh-add to add your keys to the agent – for example, ssh-add ~/.ssh/id_rsa. If you have a passphrase for your SSH key, you will be prompted to enter it.
    
    + you can use ssh -T git@github.com to test your connection.
    
    https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh.
    
    The Linux ssh client has the SSH_AUTH_SOCK environment variable, which allows you to provide a socket for ssh to connect to when it retrieves SSH keys
    
- socat and npiperelay, get the latest release from GitHub (https://github.com/jstarks/npiperelay/releases/latest) and extract npiperelay.exe

socat can replay streams between different locations 

npiperelay, forward intput intput a named pipe 


$ export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock

$ socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &

The first line sets the SSH_AUTH_SOCK environment variable. The second line runs socat and tells it to listen on the SSH_AUTH_SOCK socket and relay that to npiperelay. The npiperelay command line tells it to listen and forward its input to the //./pipe/openssh-ssh-agent named pipe.

connecting to a MySQL service in Windows from Linux: https://github.com/jstarks/npiperelay.




# Getting more from windows terminal 
- choose Rename Tab from context menu 

- setting tab titles from your shell using functions 

function set-prompt() { echo -ne '\033]0;' $@ '\a'; }

```powershell 
function Set-Prompt {

    param (

        # Specifies a path to one or more locations.

        [Parameter(Mandatory=$true,

                   ValueFromPipeline=$true)]

        [ValidateNotNull()]

        [string]

        $PromptText

    )

    $Host.UI.RawUI.WindowTitle = $PromptText

}
```


This snippet shows a Set-Prompt function, which accesses the PowerShell $Host object to control the title

- set title from commandline 

$ wt.exe --title "Put a title here"

- working with multiple panes 

tmux utility (https://github.com/tmux/tmux/wiki), then this may look familiar, as tmux also allows splitting a window into multiple panels

configure your own key bindings as described here: https://docs.microsoft.com/en-us/windows/terminal/customize-settings/key-bindings#pane-management-commands.

Alt + Shift + -, which will split the current pane in half horizontally, and Alt + Shift + +

Pressing Alt + Shift + D will create a pane with a new instance of the profile

Alt key while clicking will launch the selected profile in a new pane.

Windows Terminal command palette using Ctrl + Shift + P to display the command dialog and search a command 

Ctrl + Shift + w to close a pane 

- managing panes 

Alt + a cursor key, that is, Alt + cursor up will move the focus to a pane above the current one

change the size of the panes, we use similar key combinations, Alt + Shift + a cursor key. The Alt + Shift + cursor up and Alt + Shift + cursor down

Terminal command line (wt.exe) to launch Windows Terminal with multiple tabs loaded

- add a ssh profile 

launch the wsl command to run bash with a command line that runs ssh. You should ensure that the guid value is different from other profiles

{

    "guid": "{9b0583cb-f2ef-4c16-bcb5-9111cdd626f3}",

    "hidden": false,

    "name": "slsshtest",

    "commandline": "wsl bash -c \"ssh stuart@slsshtest.uksouth.cloudapp.azure.com\"",

    "colorScheme": "Ubuntu-sl",

    "background": "#801720",

    "fontFace": "Cascadia Mono PL"

},

you can launch a script to allow you to select which machine to connect to:
```
#!/bin/bash

# This is an example script showing how to set up a prompt for connecting to a remote machine over SSH

PS3="Select the SSH remote to connect to: "

# TODO Put your SSH remotes here (with username if required)

vals=(

    stuart@sshtest.wsl.tips

    stuart@slsshtest.uksouth.cloudapp.azure.com

)

IFS="\n"

select option in "${vals[@]}"

do

if [[ $option == "" ]]; then

    echo "unrecognised option"

    exit 1

fi

echo "Connecting to $option..."

ssh $option

break

done
```

Windows Terminal documentation at https://docs.microsoft.com/en-us/windows/terminal/



# Working with containers in WSL 
- a good starting point: https://docs.microsoft.com/virtualization/windowscontainers/

- install Docker Desktop from https://www.docker.com/products/docker-desktop.

check Use the WSL 2 based engine 

which distros Docker Desktop integrates with from the Resources section

$ docker info

- run a container with the nginx web server using the 

$ docker run -d --name docker-nginx -p 8080:80 nginx 

- list the running containers

$ docker ps 

- make sure that you have the code for the book (from https://github.com/PacktPublishing/Windows-Subsystem-for-Linux-2-WSL-2-Tips-Tricks-and-Techniques) cloned in a Linux distro

- Dockerfile contains a series of commands for Docker to execute

```
FROM python:3.8-slim-buster

EXPOSE 5000

ADD requirements.txt .

RUN python -m pip install -r requirements.txt

WORKDIR /app

ADD . /app

CMD ["gunicorn", "--bind", "0.0.0.0:5000", "app:app"]
```

- build docker image 

$ docker build -t simple-python-app

- see the Docker images on your local machine, we can run docker image ls

- run the container with the docker run

$ docker run -d -p 5000:5000 --name

- container orchestrators, such as Kubernetes, Docker Swarm, and Mesosphere DC/OS

    + setting up kubernetes in wsl 
Kind (https://kind.sigs.k8s.io/)
Minikube (https://kubernetes.io/docs/tasks/tools/install-minikube/)
MicroK8s (https://microk8s.io/)
k3s (https://k3s.io/)

$ kubectl cluster-info

- creating a deployment 

$ kubectl create deployment chapter-07-example --image=simple-python-app:v1

deployment.apps/chapter-07-example created

$ kubectl get deployments

- see the pod is deployed 

$ kubectl get pods

- scale 

$ kubectl scale deployment chapter-07-example --replicas=2

- creating a service 

$ kubectl expose deployment chapter-07-example --type="NodePort" --port 5000 service/chapter-07-example exposed

$ kubectl get services



# Workging with wsl distros 
- Exporting and importing a WSL distro
    + before exporting a distro 
    
    default user for the distro is set in the /etc/wsl.conf file inside the distro
    
    ```
    $ cat /etc/wsl.conf

    [network]

    generateHosts = true

    generateResolvConf = true

    [user]

    default=stuart
    ```
    
    + Performing the export

    To export the distro, we will use the wsl command to export the contents of a distro to a file on disk
    
    $ wsl --export Ubuntu-18.04 c:\temp\Ubuntu-18.04.tar 
    
    + During the export process, the distro is unavailable for use, as shown with the wsl --list command
    
    
    + The exported file is an archive in the TAR format (originally short for Tape Archive) that is common to Linux.
    
- using export/import to create a copy of a distro.

- import a distro 

$ wsl --import Ubuntu-18.04-Copy C:\wsl-distros\Ubuntu-18.04-Copy C:\temp\Ubuntu-18.04.tar

- distros installed via the Store are installed in folders under $env:LOCALAPPDATA\Packages

- Creating and running a custom distro

    + publish a Linux distro to the Store – details can be found at https://docs.microsoft.com/en-us/windows/wsl/build-custom-distro.
    
    + .net core image lead us to this page (https://hub.docker.com/_/microsoft-dotnet-core)
    
    + create a running container from the image:
    
    PS C:\> docker run -it --name dotnet mcr.microsoft.com/dotnet/sdk:5.0

    useradd -m stuart
    
    add the /etc/wsl.conf file to tell WSL to use the user that we just created

```
root@62bdd6b50070:/# echo -e "[user]\ndefault=stuart" > /etc/wsl.conf

root@62bdd6b50070:/# cat /etc/wsl.conf

[user]

default=stuart

root@62bdd6b50070:/#
```

- Docker provides a way to export containers to a TAR file that is compatible with the format that WSL uses

ps> docker ps -a

ps> docker export -o c:\temp\dotnet.tar

    + import 
    
ps> wsl --import dotnet5 C:\wsl-distros\dotnet5 C:\temp\dotnet.tar --version 2


    + running the new distro 
    
ps> wsl -d dotnet5 bash

- separate WSL distro and this can be used to split up different dependencies across projects. This approach can also be used to create temporary distros to try out previews without installing them

you can use 

$ wsl --unregister dotnet5 

to delete the distro when you are finished

- creating the dockerfile 

```
FROM mcr.microsoft.com/dotnet/sdk:5.0

ARG USERNAME

ARG PASSWORD

RUN useradd -m ${USERNAME}

RUN bash -c 'echo -e "${PASSWORD}\n${PASSWORD}\n" | passwd ${USERNAME}'

RUN bash -c 'echo -e "[user]\ndefault=${USERNAME}" > /etc/wsl.conf'

RUN usermod -aG sudo ${USERNAME}

RUN apt-get update && apt-get -y install sudo
```

- create the tar 

```
docker build -t dotnet-test -f Dockerfile --build-arg USERNAME=stuart --build-arg PASSWORD=ticONUDavE .

docker run --name dotnet-test-instance dotnet-test

docker export -o c:\temp\chapter-08-dotnet.tar dotnet-test-instance

docker rm dotnet-test-instance
```

-  import the tar 

$ wsl --import chapter-08-dotnet c:\wsl-distros\chapter-08-dotnet c:\temp\chapter-08-dotnet.tar

- we can also add additional step to the dockerfile 
```
RUN  curl -sL https://aka.ms/InstallAzureCLIDeb | bash
```
This RUN command is based on the install instructions in the Azure CLI documentation (https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest).




# Developing with the windows subsystem for linux 
- install Visual Studio Code, go to https://code.visualstudio.com/

- remote extensions:

Remote-WSL, which runs the server in WSL
Remote-SSH, which allows you to connect to a remote machine over SSH to run the server
Remote-Containers, which allows you to use containers to run the server in

- extension pack (https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)

Remote-WSL: New Window from the command palette (Ctrl + Shift + P)

it can directly open folder inside of the wsl 

- opened contains a .vscode/extensions.json file that lists the Python extension. 

- Debugging our app
In this section, we'll take a look at how to step through the code in our project in the debugger. 

- This screenshot shows the RUN view, which has a link to create a launch.json file because one doesn't currently exist in the open folder

- Windows Terminal Integration in the Visual Studio Code extensions view or open

- Using Visual Studio Code as your Git editor Visual Studio Code provides integrated visual tools for working with Git repositories



# Visual studio code and containers 
- Remote-Containers in the EXTENSIONS view in Visual Studio Code, or from https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers.

- a multi-container configuration using Docker Compose (see https://code.visualstudio.com/docs/remote/create-dev-container#_using-docker-compose) 

- create the .devcontainer folder with devcontainer.json and Dockerfile configured for working with Python 3

- docker file 

```
RUN apt-get update \

     && export

DEBIAN_FRONTEND=noninteractive \"

    # Install docker

    && apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release \

    && curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | apt-key add - 2>/dev/null \

    && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable" \

    && apt-get update \

    && apt-get install -y docker-ce-cli \

    # Install docker (END)

    # Install icu-devtools

    && apt-get install -y icu-devtools \

    # Clean up

    && apt-get autoremove -y \

    && apt-get clean -y \

    && rm -rf /var/lib/apt/lists/*
```




# Productivity tips with command-line tools 
- configure git authentication 

$ git config --global credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-manager.exe"

- bash-git-prompt (https://github.com/magicmonty/bash-git-prompt), which customizes your bash prompt

- Cascadia and you can download Powerline variants of this font from https://github.com/microsoft/cascadia-code/releases

- powerline-go here. Grab the latest powerline-go-linux-amd64 version from https://github.com/justjanne/powerline-go/releases and save it as powerline-go

- details: https://github.com/justjanne/powerline-go#customization.

When working with Git, tailoring your prompt to get context for the Git repository

- jq, and it is a fantastically handy utility for working with JSON strings

$ sudo apt-get install jq.

jq playground at https://jqplay.org

- Installing and configuring the Azure CLI
There is a range of options for installing the Azure CLI

- curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

- installation steps here: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest.

$ az login
$ az group list
$ az webapp show \
             --name $WEB_APP_NAME \
             --resource-group wsltips-chapter-11-03 \
             --output json
             
- JMESPath 

an interactive query tool, at https://jmespath.org. There is a jp CLI for running JMESPath queries, which can be installed from https://github.com/jmespath/jp.

installed from https://github.com/jmespath/jmespath.terminal.

Azure web apps (see https://docs.microsoft.com/en-us/azure/app-service/)

- kubernetes cli 

started by installing kubectl.

found at https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-binary-with-curl-on-linux)



# Import inplace ext4
- not works 
$ wsl --import-in-place <new_distro_name> <path_to_vhdx>

- install vhdx 
$ wsl --import ub2204-jenkins D:\wsl_containers\ub2204-jenkins\ D:\wsl_containers\ub2204-val\ext4.vhdx


# Mount a disk 
https://learn.microsoft.com/en-us/windows/wsl/wsl2-mount-disk


# Install ubuntu with gui support with wsl2 
https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview