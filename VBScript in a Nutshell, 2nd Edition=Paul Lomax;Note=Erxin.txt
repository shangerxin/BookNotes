VBScript in a Nutshell, 2nd Edition=Paul Lomax;Note=Erxin

# Preface
- a subset of Visual Basic for Applications (VBA)


# Introduction 
- Major scripting areas 
active server pages, asp applications 
outlook forms 
windows script host(WSH) scripts 

- vbscript is used for gluing objects 

- active server pages object model 

[asp object model](./asp_object_model.png)

- object model expose 

properties 
```
Session.TimeOut = 10         ' Set property value
lSVars = Request.ServerVariables.Count     ' Read-only property
```

methods 
```
Response.Write "<HTML><HEAD>"
```
function will return a value, subroutine will not return value 

events
```
Sub Application_OnStart
' application startup code goes here
End Sub
```
event listeners triggered by OnStart event 

- differences between vbscript and vba 

VBScript is a subset of the Visual Basic for Applications language. 

    + vbscript is a weakly typed language 
    
    Visual Basic and Visual Basic for Applications, in which the developer can define the data type
    
    + vbscript does not support early binding 
    
    late binding objects can not be check with Visual Basic or hosted VBA environments using the Object Browser
    
    + vbscript does not support named arguments 
    
    VBA supports both positional and named arguments for most functions and procedures.
    ```
    ' position arguments
    lResult = MsgBox("Delete this file?", _
          vbYesNo Or vbQuestion Or vbDefaultButton2, _
          "Confirm File Deletion")
          
    'named arguments
    lResult = MsgBox(Prompt:="Delete this file?", _
          Title:="Confirm File Deletion", _
          Buttons:=vbYesNo Or vbQuestion Or vbDefaultButton2)
    ```



# Program structure 
-  Sub...End Sub construct is used to define a subroutine; can be called in three ways 
    
    + automatic 
    
    Sub objectname_event
    end Sub 
    
    + reference by name 
    
    + defining as an event handler
    
    Sub cmdButton2_OnClick
        ShowAlertBox cmdButton2.Value
    End Sub
    
- reserved words 

[_Main]
Public Sub [_Main]
   MsgBox "In_Main"
   [1Routine]
   [2 Routine]
   [Dim]
End Sub

Public Sub [1Routine]
   MsgBox "In 1Routine"
EndSub
Public Sub [2 Routine]
   MsgBox "In 2 Routine"
   End Sub
   Public Sub [Dim]
   MsgBox "In Dim"
End Sub

- call a subroutine 

showAlertBox cmdButton2.Value

Call showAlertBox(Top.cmdButton1.Value)

Call statement, you must enclose the argument list in parentheses.

- defining functions 

```vbscript 
Function functionname(argumentlist)
End Function
```

```vba
Function CubeIt(ByVal x As Long) As Long
```

```
Function functionname(argumentlist)
   . . . some calculation or manipulation
                  functionname = result of calculation or manipulation
End Function
```

<SCRIPT LANGUAGE="vbscript" RUNAT="Server">
  dim cube       ' global variable
           
   Sub CubeIt(x)
      cube = x^3
   end sub
</SCRIPT>


<%
Dim intVar
intVar = 3
CubeIt intVar
Response.Write cube 
%>

- request predefine variables 
```
Option Explicit statement 

Dim abc
```

- call a function 

```
Call CubeIt(x)

'or

CubeIt x 
```

- vbscript there was no support for passingparameters by reference.

- vba 

Sub CallAnotherSub(ByRef var1)
   var1 = var1^2
   Response.Write "In CallAnotherSub, var1 is " & var1 & "<P>"  
End Sub


    + pass one of the parameter as value 

'define
Sub DoSomething(xl, x2)

'pass x1 as value 
DoSomething (x1), x2

- exist sub, function, for, do ...

   If condition1 Then
     functionname = result of calculation or manipulation
     Exit Function
   End If


- vbscript 5.0 support define classes 
```
Class...End Class
```

create an instance 
```
Set oObj = New classname
```

define fields for the class 
```
Dim varName1 [, varName2...]
Private varName1 [, varName2...]
Public varName1 [, varName2...]
```


- a Property Let or a Property Set procedure and are read-write
```
Class Computer

    Private modStrType
    Private oOS

    Public Property Let ComputerType(strType)
        modStrType = strType
    End Property

    Public Property Get ComputerType(  )
        ComputerType = modStrType
    End Property

    Public Property Set OperatingSystem(oObj)
        Set oOS = oObj
    End Property

    Public Property Get OperatingSystem(  )
        Set OperatingSystem = oOS
    End Property

    Public Function GetOwner(  )
       GetOwner = modOwner
    End Function

    'events 
    Private Sub Class_Initialize(  )
        Initalization code goes here
    End Sub

    Private Sub Class_Terminate(  )
        Termination code goes here
    End Sub
End Class
```

- Global code—that is, code outside functions and subroutines

    + win windows script host 
    
    In a standard VBScript file for WSH, global code is any code that’s not located in function, subroutine, or class definitions
    
    + IE 
    Global code in client-side scripts is found inside <SCRIPT> . . . </SCRIPT> tags 
    + asp 
    <%%>
    
- reusable code libraries 

    + asp 
    <!-- #include PathType = sFileName -->
    
    file support relative path 
    
    virtual, support virtual path base on web server's root folder 
    

    + windows script host 
    
    <SCRIPT LANGUAGE="sLanguage" SRC="sFilename" />
    
    <SCRIPT> tag requires that the .wsf file be structurally correct—that is, that the <PACKAGE> and <JOB> tags should be present.

```
Public Function GetFreeSpace(  )

Dim oDict, oFS, oDrives, oDrive

Set oDict = WScript.CreateObject("Scripting.Dictionary")
Set oFS = WScript.CreateObject("Scripting.FileSystemObject")
Set oDrives = oFS.Drives
For Each oDrive in oDrives
   If oDrive.IsReady Then
      oDict.Add oDrive.DriveLetter, oDrive.FreeSpace
   End If
Next

Set GetFreeSpace = oDict

End Function
```

```
<package>
<job id=GetFreeSpace>
<script language="VBScript" src="Lib.vbs" />
<script>
Option Explicit

Dim oSpace, aDrives
Dim sMsg, sDrive
Dim iCtr

Set oSpace = GetFreeSpace(  )
aDrives = oSpace.Keys 
For iCtr = 0 To UBound(aDrives)
   sDrive = aDrives(iCtr)
   sMsg = sMsg & sDrive & ": " & oSpace(sDrive) & vbCrLf
Next

MsgBox sMsg
</script>
</job>
</package>
```

    + client side script for IE 
<SCRIPT SRC="sURL " LANGUAGE="sLanguage"> </SCRIPT>



# Data types and variables 
- variant 

Empty is a type that consists of a single value, also called Empty, new variables when you declare them

Null is a special type that consists of a single value, also called Null, does not contain any valid data


```
Dim var1 
var1 = Empty 
var1 = Null 
```

- The Boolean type can contain either of two values, True or False

If Not myBool Then
  myVar = 4
  myBool = True
Else
  myVar = 5
  myBool = False
End If

- A Byte is the smallest numeric type available in VBScript. One byte (8 binary bits) 

- An Integer is a whole number that VBscript uses two bytes (or 16 bits) 

integer cannot exceed 32,767

- A Long is a signed integer that VBscript stores in four bytes

- Single, a floating-point data type, two of which are available in VBScript. The first is Single

A negative single precision value can range from -3.402823E38 to -1.401298E-45

- The Double type stores a double precision floating-point number

from -1.79769313486232E308 to -4.94065645841247E-324

- The Date type represents the date or time. If the number holds a date value, the earliest date that can be represented is January 1, 100

Dim  myvacationDay
myVacationDay = #01/10/03#

- The Currency type provides a special numeric format for storing monetary values that eliminates floating-point error

- String, The most commonly used VBScript data type isString, which can contain virtually an unlimited number of characters

- Object, This data type contains a reference to an object. 

- Error, The Error type contains an error number and is typically used to signal a missing argument or other condition resulting from missing data

- determining the variant type 

VarType(expression)

a string array returned by a COM object, for instance, it returns 8200 (vbArray + vbString)

- type name 

result = TypeName(expression)

such as 
<object type> 
Boolean 
Byte 
...
Nothing, Object variable that doesn’t refer to an object instance 
Null, No valid data
Empty, Uninitialized
Variant( ), Variant array 
Unknown, Unknown object type 

- Convert data type 

CBool(expression)

CByte 

CDate 

CCur 

CDbl 

CInt 

CSng 

CStr 

- define constant 

Const numConstant = myVar        ' Invalid

- Intrinsic constants, define your own constants using the Const keyword

If myObject.ForeColor = &hFFFF Then

If myObject.ForeColor = vbYellow Then

    Color

    Comparison

    Date/Time

    Date Format

    Message Box

    Miscellaneous

    Object Error

    String

    Tristate

    VarType
    
- reference built-in constant 

https://learning.oreilly.com/library/view/vbscript-in-a/0596004885/apb.html

- Constants in type libraries 
<!-METADATA TYPE="TypeLibrary" FILE="FileName"
   UUID="TypeLibraryUUID"
   VERSION="MajorVersionNumber.MinorVersionNumber"
   LCIS="LocaleID"  →
   
filename, also be housed in separate files with an extension of .tlb or .olb.

type library uuid, HKEY_CLASSES_ROOT\TypeLib key of the registry. While optional, either FileName or TypeLibraryUUID must be specified in order

If you include a MajorVersionNumber, you must also include a MinorVersionNumber

LocaleID, optional The locale to use for this type library if the library supports multiple locales.

    + WSH, can make constants in a type library 
    
<reference [object="progID"|guid="typelibGUID"
           [version="version"] />
           
progID, version-independent or version dependent programmatic identifier 

typelibGUID, global unique identifier 

version, the version number 

- array variables 

    + fixed array 
    
Dim myArray(5)

    + dynamic array 

Dim myDynamicArray(  )

ReDim myDynamicArray(10)

Dim myArray
myArray = Array(12,3,13,64,245,75)

Preserve copies the data from the old array into the new array.
```
ReDim Preserve myDynamicArray(10)
```

- determining array boundary,  UBound and LBound

x = UBound(arrayname)

- multi dimensional array 

Dim ourProductData(3,2)

Element (0,0)

strDataString = strShippingData(2,1) ' row #3 column #2

largestElement = UBound(multi-arrayname, dimensionNumber)

- local scope, A variable that is declared within an individual procedure (that is, within a subroutine or a function) can only be used within that procedure

- public visibility

Dim with public allowas a variable can be seen in all loaded documents 

- private allows you to protect a variable restricting to the document which it has been declared 



# Error handling 
- errors 

syntax errors 

logical errors 

a compile time error 

at runtime 

- microsoft script debugger 

Visual Interdev or Visual Studio .NET to debug scripts.

Microsoft Visual InterDev, part of Microsoft Visual Studio 97 and 6.0, is an IDE used to create web applications using Microsoft Active Server Pages (ASP) technologies.

- debugging in windows 10 

$ cscript //X scriptfile.vbs MyArg1 MyArg2

BTW, if you are using Notepad++, it may be handy to setup shortcut for launching the script with debugger. Enter "C:\WINDOWS\SysWOW64\cscript.exe" //x "$(FULL_CURRENT_PATH)"

    + microsoft script editor 
https://www.microsoft.com/en-us/download/details.aspx?id=8247

    + WSH 
WSH script, you can launch the debugger if an error occurs by supplying the //D switch, or you can run a script in the context of the debugger by supplying the //X

- handling error 

On Error Resume Next

On Error Goto 0 

- The Err object is part of the VBScript language and contains information about the last error to occur.

- throw the error again 

Err.Raise(ErrorNumber)


# VBScript with active server pages 
- deprecated 


# Windows script host 5.6
- Windows Script Host (CScript.exe or WScript.exe) 

- configure vs to debug vbscript 
https://stackoverflow.com/questions/23210905/can-you-debug-vbscript-in-visual-studio#:~:text=First%20of%20all%20VBScript%20is%20an%20interpreted%20language,%28to%20make%20it%20available%20in%20the%20Tools%20menu%29%3A

Add external tool in visual studio 

Open vbscript 

    + requirements 
Compilers, build tools, and runtimes
    C++ CMake tools for Windows
    MSVC v142 - VS 2019 C++ x64/x86 build tools (v14.27)
Debugging and testing
    Just-In-Time debugger

- WSH clearly excels 

access to network resources 

system administration 

simple installation scripts 

file operations 

software automation 

    + command line 

$ CScript.exe filename [//options] [/arguments]
$ WScript.exe [//options] [/arguments]

- WSH allows you to create .wsf files, which must contain one or more jobs that are designated by the XML <job>...</job> tag.

[windows script host model](./windows_scripting_host_object_model.png)

-  WshController object, which is new toWSH 5.6, allows for the creation of a remote script process.

Dim cnt
Set cnt = WScript.CreateObject("WSHController")

Dim wsh, env
Set wsh = WScript.CreateObject("WScript.Shell")
Set env = wsh.Environment

- WshNetwork object representsnetwork resources that are available to a client computer.

Dim oNet
Set oNet = WScript.CreateObject("WScript.Network")

- configuring remote scripting 

Dim oShell, regKey, regValue
Set oShell = CreateObject("WScript.Shell")
regKey = "HKLM\Software\Microsoft\Windows Script Host\Settings\Remote"
regValue = oShell.RegRead(regKey)
If regValue = "0" Then
   regValue = "1"
   oShell.RegWrite regKey, regValue, "REG_SZ"
End If

-  WshRemoteError object provides access to information about the error that caused a remote script to terminate execution

- WshScriptExec object represents a local script or application launched by calling the WshShell.Exec method

- WshShell object provides access to a wide variety of shell services, such asregistry access, access toenvironment variables and to the location of system folders

- WshShortcut object represents a shortcut—that is, a link to a file or other resource on the local system or local network

- WshSpecialFolders is a collection object that stores strings that indicate the location of Windowssystem folders

- WshUnnamed object, which is new toWSH 5.6, is a collection object that contains unnamed command-line arguments. 

- WshUrlShortcut object represents anInternet shortcut—an Internet link to an Internet resource. 

- All the language elements listed in Table 7-29 have been added to Windows Script Host as of Version 2.0

<?job ?> Defines error handling. It syntax is <?job error="flag" debug="flag" ?>

<?xml ?> Indicates that the contents of a file should be parsed as XML.

<description>   
descriptiveText
</description> Defines the purpose of a script. It is displayed when the WScript.


<example>
exampleScript
</example> Provides an example of a script’s usage. It is displayed when the WScript.ShowUsage method is called 

<job>
script
</job> Defines an individual job within a script file containing one or more jobs.

<named 
 name=name
 helpstring=hlp
 type=type
 required=req
/>      Provides information about a named argument to a script.

<object />  Defines a global object. Its syntax is <object id= "objID" [classid=“clsid:GUID" | progid="progID"] /> where objID is the name by which the object will be referred in the script or scripts, GUID is the CLSID of the class from which the object was created

<package>
script
</package>  Indicates that a Windows Script Host (.ws) file contains multiple job definitions

<reference /> Adds a reference to a type library, making its constants available to the script.

<resource id=id>
text or number
</resource> Defines a string or number as a resource that can be retrieved by its identifier rather than “hard-coded” throughout script

<runtime>
runtimeInfo 
</runtime>  Provides runtime information about a script when the WScript.ShowUsage method is called or the user adds the /?

<script>
script
</script>  Defines the language in which a code block is written and optionally imports that code block

<unnamed
 name=unnamed
 helpstring=hlp
 many=many
 required=req
/>  Provides information about an unnamed argument to a script.

<usage>
descriptiveText
</usage> Provides information about a script that is displayed when the WScript.ShowUsage method is called or adds /?

- access other object models 
    + active directory service interface (ADSI)
    + active data objects (ADO)
    + collaborative data objects (CDO)
    + data access objects (DAO)
    + the dictionary object 
    + the excel application object 
    + the FileSystemObject object 
    + windows management instrumentation (WMI)
    + the word application object 
    
    word .doc files as well as Rich Text Format (.rtf) files
    

# VBScript with internet Explorer
- deprecated 


# Windows Script Components 
- Windows Script Components (WSC) is a technology that allows programmers using scripting languages like VBScript to create COM components

- a script component is stored in a Windows Script Component (.wsc ) file. This is an XML file that contains the component definition

- Script component wizard 

Name of the component 

Filename *.wsc 

Prog ID 

Version, MajorVersion.MinorVersion 

Location 

- All Programs ( Microsoft Windows Script (Windows Script Component Wizard

right-click the component file in Windows Explorer and select Register or Unregister from the popup menu.
$ regsvr32 scrobj.dll /n /i:Path/component_name.wsc
$ regsvr32 path/component_name.wsc

dim obj
set obj = wscript.createobject("math.wsc")

Generate Type Library option from the popup context-sensitive menu

- Property accessor methods (that is, methods responsible for retrieving a property value) are named by prepending the string get_ to the property name.

component definition is signaled by the <component> and </component> tags.

<?component error="false" debug="false" ?>

<registration> ...<registration> tag provides the registration information needed to identify and create an instance of the component

<public> ...</public> tag defines a component’s public interface.

<property> tag has a name attribute that defines the property name

a <get> element, which indicates that a property value can be retrieved

a <put> element, which indicates that a property value can be assigned

<method> tag has a name attribute as well as zero, one, or more <parameter> subelements

<public> tag can also have one or more <event> subelements 

our component to fire events, we have to add the <event> element manually

the string get_ to the property name. Property mutator methods

put_ to the property name. The value to be assigned to a property is represented by the newValue parameter

- Writing component code 
```
<script language="VBScript">
<![CDATA[

dim Pi
Pi = 3.14159
dim E
E = 2.71828
dim Value

function get_Pi(  )
   get_Pi = Pi
end function

function get_E(  )
   get_E = E
end function

function get_Value(  )
   get_Value = Value
end function

function put_Value(newValue)
   Value = newValue
end function

function IsEven(number)
   IsEven = (number/2 = number\2)
end function

function IsOdd(number)
   IsOdd = Not IsEven(number)
end function

function Min(number1, number2)
   If number1 < number2 Then
      Min = number1
   Else
      Min = number2
   End If
end function

function Max(number1, number2)
   If number1 > number2 Then
      Max = number1
   Else
      Max = number2
   End If
end function

function Divide(number1, number2)
   If number2 = 0 Then
      fireEvent "DivByZero"
      Divide = 0
   Else
      Divide = number1/number2
   End If
end function

]]>
</script>
```

- use the component 

generated the .wsc file and written its code, there are two additional steps that may be required before you can use the component

    + register the component from command line 
    
    $ regsvr32 <componentFilename>
    
    + register the component with context menu and select register option 

    + instantiating the component 

```
Dim math, sMsg
' Instantiate script component
Set math = CreateObject("MathLib.WSC")
WScript.ConnectObject math, "math_"

' Set and retrieve Value property
math.Value = 12.121
sMsg = "Value: " & math.Value & vbCrLf

```

- Script Component Wizard succeeds in automating the process of creating a script component so that you can focus on the code needed to implement your component’s logic

- Handling events 

a class defined by the Class...End Class construct is created or destroyed, respectively.

<event name="event_name" dispid="dispid" />

- WSC fireEvent method 
```
fireEvent eventName[,...]
```

- implements element in a *.wsc 

<implements type="handlerName" id="sourceCodeName" assumed=fAssumed >
</implements>

- asp component 

<?xml version="1.0"?>
<component>

<?component error="true" debug="true"?>

<registration
   description="ASPInfo"
   progid="ASPInfo.WSC"
   version="1.00"
   classid="{783106e5-f78e-402d-b16f-b78e20d2e0b2}"
>
</registration>

<public>
   <property name="Browser">
      <get/>
   </property>
   <property name="ServerName">
      <get/>
   </property>
   <property name="RemoteAddress">
      <get/>
   </property>
   <property name="Value">
      <PARAMETER name="name"/>
      <get/>
   </property>
   <property name="Values">
      <get/>
   </property>

</public>

<implements type="ASP" id="ASP"/>

<script language="VBScript">
<![CDATA[

dim Browser
dim RemoteAddress
dim Values

function get_Browser(  )
   get_Browser = Request.ServerVariables("HTTP_USER_AGENT")
end function

function get_ServerName(  )
   get_ServerName = Request.ServerVariables("SERVER_NAME")
end function

function get_RemoteAddress(  )
   get_RemoteAddress = Request.ServerVariables("REMOTE_ADDR")
end function

function get_Value(name)
   get_Value = Server.HtmlEncode(Request.Form.Item(name))
end function

function get_Values(  )
   set get_Values = Request.Form
end function


]]>
</script>

</component>

- using resource 
<resource id="resourceID">value</resource>

- build an object model 

Set object = createComponent(componentID)



# office vba reference 

https://docs.microsoft.com/en-us/office/vba/api/overview/


# window script host 
- reference 
https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wscript


# windows commands 
- reference 
https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands













