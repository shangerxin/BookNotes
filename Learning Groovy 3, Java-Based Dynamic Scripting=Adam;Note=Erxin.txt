Learning Groovy 3, Java-Based Dynamic Scripting=Adam;Note=Erxin

# Software to install 
- install jdk 
- install groovy 
https://groovy-lang.org

if install manually 
set the JAVA_HOME environment variable to the location of your Java installation and GROOVY_HOME to the location of your groovy installation.

- window package management 
https://chocolatey.org/install


- groovy 101 
    + console
    groovyConsole

    Ctrl+R to run it. After reading your output and changing the code, press Ctrl+W to clear the output and Ctrl+R again
    
    Ctrl + T to inspect the AST (Abstract Syntax Tree) 
    
- class path to runtime 
  groovyConsole -cp src/main/groovy/:src/main/resources/ example.groovy

- compilation 
$ groovyc *.groovy 
    
groovyc compiles Groovy code to JVM byte-code    
    
- shell 
$ groovysh 

- document 
$ groovydoc
    
    
# GDK, groovy development kit 
- collections 
sort
findAll 
collect, an iterator that builds a new collection 
inject, loops through the values and returns a single value 
each
eachWithIndex 
find 
findIndexOf 
every 
any 
reverse 
first 
last 
tail 
    
- java 8 stream support, Java 8+ Streams as well. For example, toList() and toSet() are added to the java.util.stream.Stream<T> interface 
    
- spread operator can be used to access the property of every element in a collection 

class Dragon {String name}
    
print name of every dragon in a list 
dragons*.name.each { println it }

equal to 

dragons.collect { dragon -> d.name }.each { println it }

- gpath, like xpath support of property notation for booth lists and maps 
1   def  listOfMaps = [['a': 11, 'b': 12], ['a': 21, 'b': 22]]
2   assert listOfMaps.a == [11, 21] //GPath notation3   assert listOfMaps*.a == [11, 21] //spread dot notation
    
- io 
println path.toFile().text 
    
    + read whole file 
    getText() method is added to the File class, which simply reads the whole file.
    
    + write file content 
    setText method on the File class, which simply writes the file contents. 

byte[] data = new   File('data').bytes
new File('dragons.txt').withInputStream {in -> }

- urls make it extremely simple to execute a URL
URL url = new  URL("http://google.com");

InputStream input = (InputStream) url.getContent();

 ByteArrayOutputStream out = new  ByteArrayOutputStream();

int n = 0;

byte[] arr = new byte[1024];

 while  (-1 != (n = input.read(arr)))

System.out.println(new String(out.toByteArray()));

- ranges 
(1..4).each {print it} //1234

for (i in 1..4) print i //1234
    
switch (x) {
      case "foo": result = "foo"            
        break      
      case  12..30: result = "12 to 30"            
        break

def  text = 'learning groovy',
println text[0..4, 8..-1] //learn groovy

(1..<5).each {print it} //1234

- utilities 
    + ConfigSlurper is a utility class for reading configuration files defined in the form of Groovy scripts.
1   def config = new ConfigSlurper().parse(''' 
2       app.date = new Date() 
3       app.age  = 42 
4       app { 
5           name = "Test${42}" 
6       } 
7   ''')

8 def properties = config.toProperties()
9 assert properties."app.name" == 'Test42'

    + JSONBUILDER AND JSONSLURPER
import groovy.json.*
def builder = new JsonBuilder()
builder.person {    
    name 'Adam'    
    age 37    
    conferences 'Gr8Conf', 'ÜberConf'}
println builder

def slurper = new JsonSlurper()
def result = slurper.parseText(builder.toString())

- expando class,  create a dynamically expandable object like js object 
def  expando = new  Expando()
expando.name = 'Draco' // field value
expando.say = { String s -> "${name} says $s" } //method

- observable, list, map, set. Groovy comes with observable lists, maps, and sets. Each of these collections triggers

def  list = new  ObservableList()
def printer = {e -> println e.class}
list.addPropertyChangeListener(printer)
list.add 'Harry Potter'
list.add 'Hermione Granger'
list.remove(0)
println list


# Coming from Java
- default method values 
def fly(String text = "flying") {println text}

fly('Groovy') // output: Groovy

- equals, hashCode, and more by @EqualsAndHashCode annotation in groovy 

"groovy.transform" package that implement AST transformations (Abstract Syntax Tree transformations)

Groovy added the @EqualsAndHashCode annotation. Simply add it to the top of your class (right before the word class) and you’re done.

@TupleConstructor. It uses the order of the definitions of your fields to define a constructor with parameters for initializing those fields.


import groovy.transform.*
@Canonical class Dragon {def name}
println new Dragon("Smaug")
assert new Dragon("").equals(new Dragon(""))

- regex and pattern matching,  java.util.regex.Pattern class, create an instance, and then create a Matcher; in Groovy this can all be simplified to one line.

 def  isEmail = email ==~ /[\w.]+@[\w.]+/

Pattern patt = Pattern.compile("[\\w.]+@[\\w.]+");

boolean  isEmail = patt.matches(email);

- missing java syntax 
String[] array = ['foo', 'bar'].toArray()
for (String item : array) println(item)
for (item in array) println(item)
 array.each { item -> println(item) }

- optional semicolon, end line with dot to indicate the expression is not complete 

class Pie  {
  def  bake() { this }
  def  make() { this }
}
def pie = new Pie().
                make().
                 bake()
  
- optional parenthesis sometimes 
 // call a method named "doStuff" with parameter 1
 doStuff 1, 2, 3

//call method with closure 
list.each { item -> doStuff(item) }

- generics 
 List<Integer> nums = [1, 2, 3.1415, 'pie']

    + enforce generic with  @CompileStatic or @TypeChecked annotation to your class or method. For example:
 import groovy.transform.*
 @CompileStatic
class Foo {
    List<Integer> nums = [1, 2, 3.1415] //error
 }

- groovy numbers, This discussion leads us to decimal numbers, which use BigDecimal by default in Groovy.

def  pie = 3.141592d

- boolean resolution, null, empty collection, empty string and a zero are considered false 

- map syntax Groovy’s property-accessor syntax sugar (.class refers to the key-value, not getClass()). So you should use the getClass() method directly.
def  foo = "key"
def  bar = 2
def map = [(foo): bar]
 
Without the parentheses, foo would resolve to the String "foo". With the parentheses, the String "key" will be used as the key mapped to the value 2


# Advance groovy 

























