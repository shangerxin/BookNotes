Mastering selenium webdriver 3.0=Mark;Note=Erxin



# Preface
- required for the book:

Oracle JDK8
Maven 3
IntelliJ IDEA 2018
JMeter
Zed Attack Proxy
Docker
Mozilla Firefox
Google Chrome

- latest version of:

WinRAR/7-Zip for Windows
Zipeg/iZip/UnRarX for Mac
7-Zip/PeaZip for Linux

- GitHub at https://github.com/PacktPublishing/Mastering-Selenium-WebDriver-3.0-Second-Edition

- install maven 

$ sudo apt-get install maven 

- TestNG supports parallel threads out of the box;


```
package com.masteringselenium;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Test;

public class BasicIT extends DriverBase {

    private ExpectedCondition<Boolean> pageTitleStartsWith(final 
    String searchString) {
        return driver -> driver.getTitle().toLowerCase()
        .startsWith(searchString.toLowerCase());
    }

    private void googleExampleThatSearchesFor(final String 
    searchString) {

        WebDriver driver = DriverBase.getDriver();

        driver.get("http://www.google.com");

        WebElement searchField = driver.findElement(By.name("q"));

        searchField.clear();
        searchField.sendKeys(searchString);

        System.out.println("Page title is: " + driver.getTitle());

        searchField.submit();

        WebDriverWait wait = new WebDriverWait(driver, 10, 100);
        wait.until(pageTitleStartsWith(searchString));

        System.out.println("Page title is: " + driver.getTitle());
    }

    @Test
    public void googleCheeseExample() {
        googleExampleThatSearchesFor("Cheese!");
    }

    @Test
    public void googleMilkExample() {
        googleExampleThatSearchesFor("Milk!");
    }
}
```

- If you use InternetExplorerDriver, you will probably find that when you use slightly older versions of Internet Explorer

- multiple browser support

```
POM:

<properties>
    <project.build.sourceEncoding>UTF-
    8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-
    8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
    <!-- Dependency versions -->
    <selenium.version>3.12.0</selenium.version>
    <testng.version>6.14.3</testng.version>
    <!-- Plugin versions -->
    <maven-compiler-plugin.version>3.7.0
    </maven-compiler-plugin.version>
    <maven-failsafe-plugin.version>2.21.0
    </maven-failsafe-plugin.version>
    <!-- Configurable variables -->
    <threads>1</threads>
    <browser>firefox</browser>
</properties>

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <source>${java.version}</source>
                <target>${java.version}</target>
            </configuration>
            <version>${maven-compiler-plugin.version}</version>
        </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${maven-failsafe-plugin.version}</version>
            <configuration>
                <parallel>methods</parallel>
                <threadCount>${threads}</threadCount>
                <systemPropertyVariables>
                    <browser>${browser}</browser>
                </systemPropertyVariables>
            </configuration>
            <executions>
                <execution>
                    <goals>
                        <goal>integration-test</goal>
                        <goal>verify</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
```

- download webdriver automatically 

 overwite.binaries property that we have added allows us to set the overwriteFilesThatExist configuration setting of the driver-binary-downloader-maven-plugin
 
- going headless 


# reliability 
- A flickering test is one that intermittently fails for no obvious reason and then passes when you run it again. 
- setup teamcity 
```
docker run -it --name teamcity-server-instance \ 
    -v ~/teamcity/data:/data/teamcity_server/datadir \ 
    -v ~/teamcity/logs:/opt/teamcity/logs \ 
    -p 8111:8111 \ 
    jetbrains/teamcity-server 
```

- setup jenkins 
```
docker run -it --name jenkins-instance \ 
    -p 8080:8080 \ 
    -p 50000:50000 \ 
    -v ~/jenkins:/var/jenkins_home \ 
    Jenkins 
```


# Producing the right feedback when failing 
- NoSuchFrameException 

Selenium provides a simple way to do this; you just need to use the following code:

driver.switchTo().defaultContent(); 

- NoSuchWindow 

String currentWindowHandle = driver.getWindowHandle();

- wait 

WebDriverWait wait = new WebDriverWait(driver, 10); 
wait.until(ExpectedConditions.stalenessOf(googleSearchBar)); 

- implicitly wait timeout 

driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS); 



# Working effective with page object 


# 