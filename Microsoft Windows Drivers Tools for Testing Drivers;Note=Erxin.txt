Microsoft Windows Drivers Tools for Testing Drivers;Note=Erxin

# Introduction 
- Reference 
https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/

- WDK, The Windows Driver Kit (WDK) is fully integrated with Microsoft Visual Studio 2015. The WDK uses the same compiler and build tools that you use to build Visual Studio projects

- Universal Windows drivers allow developers to create a single driver that runs across multiple different device types, from embedded to tablets etc. 

- You can use the ApiValidator.exe tool to verify that the APIs that your driver calls are valid for a Universal Windows driver


# Index of windows driver kit tools 
- index of WDK tools, most of the tools are required to install WDK 

	+ Audio/Video drivers 
	+ Bluetooth Drivers 
	+ Windows Image Acquisition(WIA) Drivers 
	+ Windows Portable Devices(WPD) Drivers 
	+ Printer Drivers 
	+ Sensors 
	+ All Drivers 

- Tools that can generally be used with all drivers are listed under All Drivers	
	
- The Visual Studio environment variable, %WindowsSdkDir%, represents the path to the Windows kits directory

- Audio/ Video Drivers, 

Dccw.exe, calibration tool lets user adjust display color 
Graphedt.exe, build filter graphs to test streaming audio/video capture drivers 
KsStudio.exe, construct a graphical representation of a filter graph that shows the pin to pin connections 
UsbView.exe, enumberates the USB host controllers, USB hubs, and attached USB devices. can query information from the devices from the registry 

- Bluetooth drivers 
Sdpverify.exe, displays a bluetooth devices' inquiry record as windows interprets it 

- Windows image acquisition(WIA) drivers 
Wiadbgcfg.exe, Enables logging for WIA drivers. 
WIAInfo2.exe, displays the WIA item tree 
WIAPreview, shows how to use the WIA preview component 
WIAtest.exe, displays the item tree that is create driver, image acquisition properties 
Wiatrcvw.exe, Displays the WIA trace log 

- Windows Portable Devices(WPD) Drivers 
WpdDeviceInspector.exe, queries a WPD driver and generates a comprehensive HTML report 
WpdInfo.exe, Performs common WPD operations such as opening and closing a devices 
NetMon.exe, displays trace information from WPD components 

- Printer drivers 
gdpcheck.exe, validates the syntactical correctness of generic printer description file (GPD)
Infgate.exe, validates the conformance of a printer INF file. 
isXPS.exe, validates the conformance of a XPS file to the XPS and OPC specifications 
Looksgood.exe, validates the correctness of an XPS rendering 
Makentf.exe, converts adobe font metrics(AFM) files and east asian font AFM 
Ppdcheck.exe, validates the syntactical correctness of a postscript printer description file 
PTConform.exe, validates a print ticket or print capabilities 
XpsAnalyzer.exe, Analyzes XML paper specification files (XPS)

- Sensors 
sensordiagnostictool.exe, tests the driver, firmware and hardware for sensor and location functionality 

- All Drivers 
Binplace.exe 
Code analysis for drivers 
CertMgr.exe 
ComputerHardwareIds.exe 
DC2WMIParser.exe 
Depends.exe 
Devcon.exe 
Drivers.exe 
Verifier.exe 
DVL, driver verification log 
EhStorCertMgrCmd.exe, enhanced storage certificate management tool 
Inf2cat.exe, 
InfVerif.exe 
MakeCat.exe 
MakeCert.exe 
MSBuild.exe 
PnPCpu.exe 
PnPUnit.exe 
Poolmon.exe 
PowerCfg.exe 
Pvk2Pfx.exe 
Pwrtest.exe 
SignTool.exe 
Stampinf.exe 
SDV, static driver verifier 
Tracefmt.exe 
TraceLog.exe 
TracePDB.exe 
TraceView.exe 
TraceWPP.exe 
WDF Tester, %WindowsSdkDir%\tools\x64
Wdfverifier.exe 
WSD web services on devices basic interoperability tool(WSDBIT)
Winerror.exe 
Wmimofck.exe 
WsdCodeGen.exe 
WSDDebug_client and WSDDebug_host 
WSDDebug_host.exe 


# Tools for testing drivers 
## Device fundamentals test
- CHAOS tests, device fundamentals 

- coverage tests 

- CPUStress tests 

- DriverInstall tests 

- I/O tests 

- Pentration tests 

- PnP tests, handle almosts all of the PnP IRPs, three areas that are stressed specifically: removal, rebalance, and surprise removal. The PnP test provides a mechanism to test each of these separately

- reboot tests 

- sleep tests 

- run the DevFund tests via command-line 

	+ running the tests via the command-line with Visual Studio and the Windows Driver Kit (WDK)
	
	+ hardware lab kit(HLK). the tests can be run from the command line on an HLK client tests machine 
	
	+ test machine "provisioned" through visual studio 
	
	+ enterprise windows driver kit(EWDK) 
	
	+ setup 
	
		* install visual studio 
		* the tests use the TAEF service 
		
		```
		To install the TAEF service (Te.service), go to %PROGRAMFILES(X86)%\Windows Kits\10\Testing\Runtimes\TAEF\x64 and run the following commands to get the service started:

		wex.services.exe /install:te.service (Verify te.service was installed successfully)

		sc start te.service (Verify 'STATE' is 'START_PENDING')

		sc query te.service (Verify 'STATE' is 'RUNNING')

		sc qc te.service (Verify 'START_TYPE' is 'AUTO_START')

		Add this directory to the system PATH environment variable and restart the elevated command prompt.
		```

		* Step 3 : Install WDTF by navigating to the location of the WDTF MSI (%PROGRAMFILES(X86)%\Windows Kits\10\Testing\Runtimes\) and installing the package for the desired architecture. Specify a location and name for the installation log file, such as %USERPROFILE%\Desktop\WDTFInstall.log
		
		* Step 4: configure the machine for testing 
		
		Configure the machine to collect full dumps or attach a kernel debugger.
		
		Because the tests can potentially reboot the machine and need to control the sleep cycles, configure the machine to never sleep, never turn off display, and autologon to a test account (netplwiz.exe). 
		
		autologo should be used with caution 
		
		* Step 5 run the tests 
		
		The DevFund tests are located at %PROGRAMFILES(X86)%\Windows Kits\10\Testing\Tests\Additional Tests\x64\DevFund.
		
		basic running 
		```
		\> Te.exe Devfund_<testname>.dll /name:"<test case name>" /p:"DQ=DeviceID='<Device Instance Path of device under test from Device Manager>'" /RebootStateFile:state.xml
		```
		
- CHAOS tests 

concurrent hardware and operating system tests run various PnP driver tests 

msdmflt.sys 

Runs PnP testing and Fuzz testing in parallel while cycling the system through all supported system power states. The PnP driver tests send I/O requests to target device stacks while performing PnP operations.

Driver Fuzz tests on the test device in parallel, while cycling the test system in and out of all of its supported sleep states (S1, S2, S3, S4 and Connected Standby) at the same time. 

test binary: Devfund_ChaosTest.dll 
test method: RunCHAOSTest.dll 

DQ - see device fundamental test parameters 

- Coverage tests, device fundamentals 

	+ Clear IRP coverage data 
Test binary: DriverCoverageClearCoverageData.dll
Test method: ClearCoverageData

	+ Disable IRP coverage data collection 
Test binary: DriverCoverageDisableSupport.dll

Test method: DisableCoverageDataCollection

	+ Display collected IRP coverage data 
Test binary: DriverCoverageDisplayCoverage.dll

Test method: DisplayCoverageData

	+ Display IRP coverage enabled devices 
	
Test binary: DriverCoverageDisplayEnabledDevices.dll

Test method: DisplayEnabledDevices

	+ Enable IRP coverage data collection 
	
Test binary: DriverCoverageEnableSupport.dll

Test method: EnableCoverageDataCollection

- CPUStress tests 

	+ device i/o with alternating processor utilitzation levels 
	Test binary: Devfund_ProcUtil_PingPong_With_IO.wsc

	Test method: Device_IO_With_Varying_ProcUtil
	
	+ device i/o with a fixed processor utilization (PU) level 

Devfund_ProcUtil_PingPong_With_IO.wsc

Test method: Device_IO_With_Fixed_ProcUtil	

	+ device PNP with a fixed processor utilization level 
	
Test binary: Devfund_ProcUtil_PingPong_With_IO.wsc

Test method: Device_PNP_With_Fixed_ProcUtil

	+ sleep with fixed processor utilization 
Test binary: Devfund_ProcUtil_PingPong_With_IO.wsc

Test method: Sleep_With_Fixed_ProcUtil

- driver install tests

	+ reinstall with IO before and after 
	
Test binary: Devfund_Reinstall_With_IO_BeforeAndAfter.wsc

Test method: Reinstall_With_IO_Before_And_After

	+ about the reinstall with i/o before and after tests 
	
	
	+ debug installation failures using the setup API logs 
	
	The Setup API logs (setupapi.app.log and setupapi.dev.log) contain useful information to debug driver installation failures logged by this test. The Setup API logs can be found under %windir%\inf\ directory on the test system.
	
	increase verbosity with 
	
	HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Setup\LogLevel to 0x2000FFFF
	
- I/O tests, device fundamentals 
	+ Device I/O
Test binary: Devfund_Device_IO.wsc

Test method: DeviceIO

	+ Simple I/O stress test with I/O process termination 
Test binary: Devfund_SimpleIoStress_TermIoProc.wsc

Test method: SimpleIOStress_TermIoProc

- Penetration tests 

	+ Disable i/o spy 
Test binary: Devfund_IOSpy_DisableSupport.wsc

Test method: DisableIoSpy

	+ Disable i/o spy-enable device 
Test binary: Devfund_IOSpy_DisplayEnabledDevices.wsc

Test method: DisplayIoSpyDevices

	+ enable i/o spy 
Test binary: Devfund_IOSpy_EnableSupport.wsc

Test method: EnableIoSpy

	+ fuzz misc api test 
	
Test binary: Devfund_DevicePathExerciser.dll

Test method: DoMiscAPITest

	+ Fuzz Misc API 
	
	+ Fuzz open and close test 
	
	+ Fuzz Query and set file information test 
	
	+ Fuzz Query and Set security test 
	
	+ Fuzz random FSCTL test/Fuzz random IOCTL test 
	
	+ Fuzz sub-opens test 
	
	+ Fuzz sub-opens with streams test 
	
	+ Fuzz zero-length buffer FSCTL test / Fuzz zero-length buffer IOCTL test 
	
	+ run i/o attack 
	
	


## Data-driver system fundamentals tests 


## Windows device console(Devcon.exe)

## PnPUtil 

## Additional test tools 



# Tools for verifying drivers 


# Tools for software tracing 


# Additional driver tools 















