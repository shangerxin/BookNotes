Jenkins, the definitive guide=John;Note=Erxin

# Introducing
- reference 
https://learning.oreilly.com/library/view/jenkins-the-definitive/9781449311155/

- install jenkins 
- install git 
- start jenkins server 

$ java -jar jenkins.war

navigate to 
http://localhost:8080

configure proxy 

manage jdk 

setting up git 

add plugin, Manage Plugins. This will open the plugin configuration screen, which is where you manage the extra features 

- add code coverage and metrics 

- add test result trend 


# installing jenkins 
- install jenkins 2.7 and java 1.7 the java version should match the jenkins requirements 
- no matter where you store the Jenkins WAR file, Jenkins keeps all its important data in a special separate directory called the Jenkins home directory

build server configuration, your build jobs, build artifacts, user accounts, and other useful information, as well as any plugins you may have installed.

jenkins honme is backward compatible and it can be seperated from jenkins itself 

Windows 7, if your username is “john”, you would find the Jenkins home directory under C:\Users\john\.jenkins

- force Jenkins to use a different directory as its home directory by defining the JENKINS_HOME environment variable

- Jenkins can be as simple as replacing the old hudson.war file with jenkins.war. Jenkins will look for its home directory in the following places (by order of precedence):

A JNDI environment entry called JENKINS_HOME

A JNDI environment entry called HUDSON_HOME

A system property named JENKINS_HOME

A system property named HUDSON_HOME

An environment variable named JENKINS_HOME

An environment variable named HUDSON_HOME

The .hudson directory in the user’s home directory, if it already exists

The .jenkins directory in the user’s home directory

- install jenkins as a standalone application 

you can specify the port manually, using the --httpPort option:

$ java -jar jenkins.war --httpPort=8081

- jenkins can also be installed with web services 

- Jenkins naturally needs RAM to run, but if you need to support a large number of build processes, it is not enough just to give Jenkins a lot of memory. In fact Jenkins spawns a new Java process each time it kicks off a build

- jenkins_home/war	This directory contains the expanded web application.

- configure jenkins server 

configure system 
reload configuration from disk 
manage plugins 
system information 
system log 
load statistics 
script console 
manage node 
prepare for shutdown 

- configure jdk 
- configure build tool 
- configure proxy 


# Setting up build jobs 
- free style software project, The freestyle build job is the most flexible and configurable option, and can be used for any type of project

configure sourceware management, SCM configuration options in Jenkins are identical across all sorts of build jobs

In the global options of Jenkins (see Figure 5-14), different Git executables can be set up and used on a per-build basis

Regions (seen in Figure 5-12) are named specific or wildcard paths in the codebase that, even when changed, should not trigger a build.

The default choice is to search for all branch HEADs. If the Gerrit plugin is installed, additional options for building all Gerrit-notified commits are displayed.

Gerrit is an open source web application that facilitates code reviews for project source hosted on a Git version control system. provide side by side comparison 

- maven project 
- monitor an external job 
- multiconfiguration job 

- start a Jenkins build job remotely. You simply invoke a URL of the following form:

http://SERVER/jenkins/job/PROJECTNAME/build

$ wget http://myserver:8080/jenkins/job/gameoflife/build

- build steps 

- build environment variable, makes the following environment variables available to the build script
 
BUILD_NUMBER
The current build number, such as “153”.

BUILD_ID
A timestamp for the current build id, in the format YYYY-MM-DD_hh-mm-ss.

JOB_NAME
The name of the job, such as game-of-life.

BUILD_TAG
A convenient way to identify the current build job, in the form of jenkins-${JOB_NAME}-${BUILD_NUMBER} (e.g., jenkins-game-of-life-2010-10-30_23-59-59).

EXECUTOR_NUMBER
A number identifying the executor running this build among the executors of the same machine. This is the number you see in the “build executor status”, except that the number starts from 0, not 1.

....

<target name="printinfo">
  <property environment="env" />
  <echo message="${env.BUILD_TAG}"/>
</target>

- running groovy scripts, Groovy is not only a popular JVM dynamic language, it is also a convenient language for low-level scripting. The Jenkins Groovy Plugin 

- post build actions 

- notification 



# Automated testing 
- mvn test (for your unit tests) or mvn verify (for unit and integration tests). xUnit Plugin. 

This plugin lets Jenkins process test reports from non-Java tools in a consistent way. It provides support for MSUnit and NUnit (for C# and other .NET languages)

- display test result trends 

- code coverage 

$ mvn cobertura:cobertura

    + Measuring Code Coverage with Clover
Clover is an excellent commercial code coverage tool from Atlassian

- automated acceptance tests 

JMeter runs as a Swing application, in which you can configure your test scripts

Once you have configured your build script to handle JMeter, you can set up a performance test build in Jenkins.

install performance plugin to use JMeter and JUnit 


# Securing jenkins 
- LDAP repository 

Many organizations use LDAP directories to store user accounts and passwords across applications

- ldap group 

 a group called JenkinsAdmin in your LDAP repository, with a DN of cn=JenkinsAdmin, ou=Groups, dc=acme, dc=com. To refer to this group in Jenkins
 
-  Central Authentication Service (CAS)—an open source single sign-on tool—and the Collabnet Source Forge Enterprise Edition (SFEE) server.

- matrix based security 

- project based security 

- role based security 

- auditing, keeping track of user actions 



# Notification 
- email addresses of the people who need to be notified (see Figure 8-1). By default, Jenkins will send an email

- jenkins token 

useful tokens are:

${DEFAULT_SUBJECT}
The default email subject configured in the Jenkins system configuration page

${DEFAULT_CONTENT}
The default email content configured in the Jenkins system configuration page

${PROJECT_NAME}
The project’s name

${BUILD_NUMBER}
Current build number

${BUILD_STATUS}
Current build status (failing, success, etc.)

${CAUSE}
The cause of the build

${BUILD_URL}
A link to the corresponding build job page on Jenkins

${FAILED_TESTS}
Shows information about failing unit tests, if any have failed

${CHANGES}
Displays the changes made since the last build

${CHANGES_SINCE_LAST_SUCCESS}
All the changes made since the last successful build

- view configuration by opening 

http://my.hudson.server/view/build-radiator/configure.

- IM notification with jabber 

XML-based instant messaging protocol. Jenkins provides good support for Jabber instant messaging

- IM Notification using IRC
Another popular form of Internet-based Instant Messaging is Internet Relay Chat

- rss feed 

- desktop notification 

If you are using Eclipse, the Jenkins Eclipse plugin displays a health icon at the bottom of the Eclipse window.

- Notification via Notifo
Notifo is a fast and economical service to send real-time notifications to your smartphone or desktop.

- Mobile Notification
If your Jenkins server is visible on the Internet (even if you have set up authentication on your Jenkins server), you can also monitor your builds via your iPhone or Android mobile device.

- SMS Notification
These days, SMS is another ubiquitous communication channel which has the added advantage of reaching people even when they are out of the office.

SMS gateways 

- Extreme Feedback Devices
Many more imaginative notification tools and strategies exist, and there is plenty of scope for improvisation if you are willing to improvise with electronics a little



# Code quality 
- popular groovy code quality analysis tools 

Checkstyle

Checkstyle is a static analysis tool for Java. Originally designed to enforce a set of highly-configurable coding standards

If you opt for keeping the Checkstyle JAR file in the project directories, you could declare the Checkstyle task as shown here

- PMD/CPD
PMD is another popular static analysis tool. It focuses on potential coding problems such as unused or suboptimal code

- FindBugs
FindBugs is a powerful code quality analysis tool that checks your application byte code for potential bugs

- CodeNarc
CodeNarc is a static analysis tool for Groovy code, similar to PMD for Java.

- analysis tools, including:

For Java
Checkstyle, CPD, PMD, FindBugs, and jcreport

For Groovy
codenarc

For JavaScript
jslint

For .Net
gendarme and stylecop

- Working with Freestyle Build Jobs
Freestyle build jobs allow you the most configuration flexibility, and are your only option for non-Java projects.

- Working with Maven Build Jobs
Maven build jobs in Jenkins use the Maven conventions and information in the project pom.xml file to make configuration easier

- Integrating with Sonar
Sonar is a tool that centralizes a range of code quality metrics into a single website (see Figure 9-18). It uses several Maven plugins



# Advanced builds 
- parameterized build jobs 

WAR file using the following expression:

${RELEASE_BUILD}gameoflife-web/target/gameoflife.war

- Building from a Subversion Tag
The parameterized trigger has special support for Subversion, allowing you to build against a specific Subversion tag.

- Building from a Git Tag
Building from a Git tag is not as simple as doing so from a Subversion tag, though you can still use a parameter to indicate which tag to use.

- Multiconfiguration Build Jobs
Multiconfiguration build jobs are an extremely powerful feature of Jenkins. 

automatically run with all the possible combinations of parameters that it can accept. They are particularly useful for tests

    + Configuring a Slave Axis
The first option is to configure your build to run simultaneously on different slave machines (see Chapter 11). Now of course, the idea of having a set of slave machines is usually that you can run your build job on any of them

    + Configuring a JDK Axis
If you are deploying your application to a broad client base where you have limited control over the target environment

    + Custom Axis 
    
- Generating Your Maven Build Jobs Automatically
Contributed by Evgeny Goldin

As mentioned in the previous section, the number of build jobs that your Jenkins server will host can vary

- Reusing Job Configuration with Inheritance
Being able to generate Jenkins jobs using centralized configuration, such as Maven POM, solves the problem of creating and updating many jobs at once.

- Plugin Support
In addition to configuring a job and reusing its definitions, you can apply special support for a number of Jenkins plugins.

- Freestyle Jobs
In addition to Maven jobs, the Maven Jenkins Plugin allows you to configure Jenkins freestyle jobs. An example is shown here:

- Dependency Graphs
Before we investigate the finer points of parallel builds, it is useful to be able to visualize the relationships between your build jobs.

- Parallel Builds in Jenkins
Jenkins has built-in support for parallel builds—when a build job starts, Jenkins will assign it to the first available build node

- Joins
When setting up more complicated build pipelines, you frequently come across situations where a build job cannot proceed until a number of other build jobs have been completed

- Locks and Latches
In other situations, you might be able to run a series of builds in parallel to some degree, but certain build jobs cannot be run in parallel because they access concurrent resources. 

- Build Pipelines and Promotions
Continuous Integration is not just about automatically building and testing software, but can also help in the broader context of the software product development and release life cycle

- Copying Artifacts
During a build process involving several build jobs, such as the one illustrated in Figure 10-33, it can sometimes be useful to reuse artifacts produced by one build job in a subsequent build job

- Build Promotions
In the world of Continuous Integration, not all builds are created equal. For example, you may want to deploy the latest version of your web application to a test server

build > default > integration tests > web tests > test deploy > uat deploy > production deploy 

- Aggregating Test Results
When distributing different types of tests across different build jobs, it is easy to loose a global vision about the overall test results.

- Build Pipelines
The final plugin we will be looking at in this section is the Build Pipeline plugin.


# Distributed builds 
- WebDriver/Selenium tests to run using Internet Explorer, but only on slave nodes with the “windows” label.

- Starting the Slave Agent Manually Using Java Web Start

Another option is to start a slave agent from the slave machine itself using Java Web Start (JNLP). This approach is useful if the server cannot connect to the slave. install jenkins as a service on slave machine.

- Starting the Slave Node in Headless Mode

- Windows machines from the range of candidate build nodes by using the ! negation operator:

- Node Monitoring
Jenkins doesn’t just dispatch build jobs to slave agents and hope for the best

- Using dynamic instances
The second approach involves creating new Amazon EC2 machines dynamically, as they are required.



# Audomated deployment and continuous delivery 
- Implementing Automated and Continuous Deployment

In its most elementary form, Automated Deployment can be as simple as writing your own scripts to deploy your application to a particular server

Continued TF CI monitor support and resolved various CI related issues including developing script to identify culprit commit in timely manner 

IPEX - IPEX CPU 1.12 Released after completing security scans and legal steps. 

ITEX - Delivered Compiler CI, nightly reports, OneDNN acceptance for ATS-P, executed Horovod tests on ATS-P, and prepared BOM for OSPDT review for first review of ITEX dockerfiles

PaddlePaddle: Initiated CI support through maintenance of Dev Ops systems

Toolchain and drivers validation:  Performed acceptance tests for agama-475 & compiler 0520, agama-516 & compiler 0630, and OneDNN acceptance tests for PVC

Added tests for DeepFusion with bf16 data type, and tests for CosmicTagger with real data



# Maintaining jenkins 
- Monitoring Disk Space Build History takes disk space.
- Using the Disk Usage Plugin One of the most useful tools in the Jenkins administrator’s tool box is the Disk Usage plugin.
- Disk Usage and the Jenkins Maven Project Type If you are using the Jenkins Maven build jobs, there are some additional details you should know about
- Monitoring the Server Load Jenkins provides build-in monitoring of server activity
- The Jenkins Monitoring plugin
- Using the Backup Plugin The approach described in the previous section is simple enough to integrate into your normal backup procedures
    + backup configuration 
    + archive build jobs 
- There are times when you need to move or copy Jenkins build jobs from one Jenkins instance to another, without copying the entire Jenkins configuration.

Jenkins stores all of the data it needs for a project in a subdirectory of the jobs directory in your Jenkins home directory.

copying or moving the build job directories to the new Jenkins instance.

If you are migrating your jobs to a brand new Jenkins configuration, remember to install, or migrate, the plugins from your original server. The plugins can be found in the plugins directory