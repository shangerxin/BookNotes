Windows Drivers;Note=Erxin

# Introduction 
- reference 
https://docs.microsoft.com/en-us/windows-hardware/drivers/what-s-new-in-driver-development

- general information of driver development 
https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/

- a driver based on User-Mode Driver Framework 1.x, you should be familiar with C++ and COM.


# Setup environment 
- download 

# Bring up guide 

# Developping, testing and deploying drivers 

# Windows hardware dev center dashboard 

# Device and driver installation 


# Kernel-Mode driver architecture design guide 

# Window driver frameworks 

# Windows driver security 

# Windows debugging tools 

# Windows store device apps 

# Driver technologies 
- reference 
https://docs.microsoft.com/en-us/windows-hardware/drivers/device-and-driver-technologies

## Overview 

## 3D print devices 

## ACPI 

## Audio 

## Battery Drivers 

## Biometric Drivers 

## Bluetooth Drivers 

## Component firmware update, CFU 

## Display and graphics drivers 

## Driver development tools 

## File systems and minifilter drivers 


## Get start with drivers on windows 
### What is a driver 
- driver types 
	+ Function driver: The one driver in the stack that communicates directly with the device is called the function driver.
	+ Filter driver: The drivers that perform auxiliary processing are called filter drivers.
	
- software driver 

	+ The component that runs in user mode is called an application, and the component that runs in kernel mode is called a software driver. A software driver is not associated with a hardware device.
	
	+ The main reason for writing a software driver is to gain access to protected data that is available only in kernel mode. However device drivers do not always need access to kernel-mode data and resources
	
- bus drivers 

- function driver 

a device that connects directly to the Peripheral Component Interconnect (PCI) bus. The function driver for a PCI device obtains addresses that are mapped to port and memory resources on the device.

The function driver communicates directly with the device by writing to those addresses.

in many cases, a device does not connect directly to the PCI bus. Instead the device connects to a host bus adapter that is connected to the PCI bus


### Do you need to write a driver 
- built in drivers 

	+ a device class that is defined by the USB Device Working Group (DWG), there may already be an existing Windows USB class driver for it.
	
		* Microsoft-provided drivers for USB-IF approved device classes.
	
		* composite devices, use USB Generic Parent Driver (Usbccgp.sys) that creates physical device objects (PDOs) for each function.
	
		* non-composite devices or a function of a composite device, use WinUSB (Winusb.sys).

	+ other builtin 
	
	ACPI, acpi.sys 
	Audio, PortCIs.sys 
	Buses, native SD bus, sdbus.sys 
	HID, I2C driver, HID2C.sys 
	HID, Legacy game, HidGame.sys 
	HID, Legacy keyboard, Kbdclass.sys 
	HID, Legacy Mouclass.sys 
	HID, PS/2, I8042prt.sys 
	Imaging, web services, WSDScan.sys 
	Print, microsoft plotter driver 
	Print, microsoft universal printer driver, Unidrv 
	Print, Microsoft v4 printer driver 
	Print, Microsoft XPS, XPSDrv 
	Sensors, Sensor HID class driver 
	Touch, windows pointer device driver
	WPD, Media transfer protocol class driver, WpdMtpDr.dll, WpdMtp.dll, WpdMtpUs.dll, WpdConns.dll, and WpdUsb.sys

- choose a driver model 

	+ device function driver 
	+ device filter driver 
	+ software driver 
	+ file system filter driver 
	+ file system driver 
	
	+ device specific portions have a variety of names, most of which share the prefix mini
	Display miniport driver 
	Audio miniport driver 
	Battery miniclass driver 
	Bluetooth protocol driver 
	HID minidriver 
	WIA minidriver 
	NDIS miniport driver 
	Storage miniport driver 
	Streaming minidriver 
	
	+ The drivers are layered in a stack
	
	a software driver, your two options the KMDF and the legacy Windows NT model

	use the legacy Windows NT model is independent from PnP and power management
	
	a software driver that is aware of PnP or power events, and access data that is not available through KMDF, you must use WDM.
	
	
	
### Write your first driver 
- This topic describes how to write a Universal Windows driver using User-Mode Driver Framework (UMDF) 2. 

Visual Studio > New UMDF 2 project 

	+ error 
	"Inf2Cat, signability
	
	Change the Project prpoerty Inf2Cat, use the user local time to verify the driver 
	
	+ output 
	UmdfDriver.dll -- the user-mode driver file
    UmdfDriver.inf -- an information file that Windows uses when you install the driver

	+ The computer that runs the debugger is called the host computer, and the computer that runs the driver is called the target computer. 
	
	+ deploy and install the universal windows driver 
	
	On the host computer 
	
	In the UmdfDriver Property Pages window, go to Configuration Properties > Driver Install > Deployment, as shown here.

	Check Remove previous driver versions before deployment.

	For Target Device Name, select the name of the computer that you configured for testing and debugging.

	Select Hardware ID Driver Update, and enter the hardware ID for your driver. In this exercise, the hardware ID is Root\UmdfDriver. Select OK.
	
	select Install and Verify. You can see the hardware ID in your driver's information (INF) file. In the Solution Explorer window, go to UmdfDriver > Driver Files, and double-click UmdfDriver.inf. The hardware ID is under [Standard.NT$ARCH$].
	
	On the Debug menu, choose Start Debugging, or press F5 on the keyboard.
	
	Wait until your driver has been deployed, installed, and loaded on the target computer. This might take several minutes.
	
	+ using the driver module framework (DMF), https://github.com/microsoft/DMF.git
	
	The Driver Module Framework (DMF) is an extension to WDF that enables extra functionality for a WDF driver developer.
	
- a Universal Windows driver using Kernel-Mode Driver Framework (KMDF).

	+ make sure install  Microsoft Visual Studio, the Windows SDK, and the Windows Driver Kit (WDK) installed.

- Write a Universal Windows driver using KMDF. 

	+ write your first driver code 
	
	```
	//Ntddk.h contains core Windows kernel definitions for all drivers
	#include <ntddk.h>
	#include <wdf.h>

	//two callbacks 
	DRIVER_INITIALIZE DriverEntry;
	EVT_WDF_DRIVER_DEVICE_ADD KmdfHelloWorldEvtDeviceAdd;
	
	
	//DriverEntry is the entry point for all drivers, like Main() is for many user mode applications. The job of DriverEntry is to initialize driver-wide structures and resources. 
	//DriverEntry is the only one you should name exactly that.
	NTSTATUS 
	DriverEntry(
		_In_ PDRIVER_OBJECT     DriverObject, 
		_In_ PUNICODE_STRING    RegistryPath
	)
	{
		// NTSTATUS variable to record success or failure
		NTSTATUS status = STATUS_SUCCESS;

		// Allocate the driver configuration object
		WDF_DRIVER_CONFIG config;

		// Print "Hello World" for DriverEntry
		KdPrintEx(( DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, "KmdfHelloWorld: DriverEntry\n" ));

		// Initialize the driver configuration object to register the
		// entry point for the EvtDeviceAdd callback, KmdfHelloWorldEvtDeviceAdd
		WDF_DRIVER_CONFIG_INIT(&config, 
							   KmdfHelloWorldEvtDeviceAdd
							   );

		// Finally, create the driver object
		status = WdfDriverCreate(DriverObject, 
								 RegistryPath, 
								 WDF_NO_OBJECT_ATTRIBUTES, 
								 &config, 
								 WDF_NO_HANDLE
								 );
		return status;
	}
	
	//add device add
	//EvtDeviceAdd is invoked by the system when it detects that your device has arrived. Its job is to initialize structures and resources for that device. named it with your driver's name as a prefix (KmdfHelloWorldEvtDeviceAdd)
	NTSTATUS 
	KmdfHelloWorldEvtDeviceAdd(
		_In_    WDFDRIVER       Driver, 
		_Inout_ PWDFDEVICE_INIT DeviceInit
	)
	{
		// We're not using the driver object,
		// so we need to mark it as unreferenced
		UNREFERENCED_PARAMETER(Driver);

		NTSTATUS status;

		// Allocate the device object
		WDFDEVICE hDevice;    

		// Print "Hello World"
		KdPrintEx(( DPFLTR_IHVDRIVER_ID, DPFLTR_INFO_LEVEL, "KmdfHelloWorld: KmdfHelloWorldEvtDeviceAdd\n" ));

		// Create the device object
		status = WdfDeviceCreate(&DeviceInit, 
								 WDF_NO_OBJECT_ATTRIBUTES,
								 &hDevice
								 );
		return status;
	}
	```
	function driver is a collection of callbacks. Site and wait system call when a new device arrival event, an I/O request from a user mode application, a system power shutdown event, a request from another driver, or a surprise removal event when a user unplugs etc. 

- build the driver 

	+ platform and configuration, debug and x64 





### From sample code to production driver 

### Windows compatible hardware development boards 

### Sharks cove hardware development board 

### Provision a computer for driver deployment and testing (WDK10)



### Concepts of all driver developers 
- user mode and kernel mode 

	+ USER MODE 
	process provides the application with a private virtual address space and a private handle table.
	
	A processor running in user mode cannot access virtual addresses that are reserved for the operating system. 
	
	+ kernel mode 
	
	All code that runs in kernel mode shares a single virtual address space. This means that a kernel-mode driver is not isolated
	
- virtual address spaces 

A program can use a contiguous range of virtual addresses to access a large memory buffer that is not contiguous in physical memory 

A program can use a range of virtual addresses to access a memory buffer that is larger than the available physical memory. 

The virtual addresses used by different processes are isolated from each other

	+ 32-bit process, the virtual address space is usually the 2-gigabyte range 0x00000000 through 0x7FFFFFFF.

	+ a 64-bit process on 64-bit Windows, the virtual address space is the 128-terabyte range 0x000'00000000 through 0x7FFF'FFFFFFFF.

	+ In 32-bit Windows, the total available virtual address space is 2^32 bytes (4 gigabytes). Usually the lower 2 gigabytes are used for user space, and the upper 2 gigabytes are used for system space.
	
	increase the size of user space, use BCDEdit /set increaseuserva.
	
	+ kernel mode driver need to careful directly reading and writing to address in user space 
	
		* user mode program initiates a request and supplies the starting address of a buffer 
		
		* a device driver routine running in kernel mode starting the read operation and returns control to its caller 
		
		* later the device interrupts whatever thread is currently running to say the read operation is complete. The interrupt is handled by kernel-mode driver routines running on this arbitrary thread, which belongs to an arbitrary process
		
		at this point, the driver must not write the data to the starting address that the user-mode program supplied in Step 1. which is most likely not the same as the current process.
		
	+ paged poool and nonpaged pool, System space has two regions for dynamically allocating memory
	
	paged pool and nonpaged pool. paged pool can be paged out to a disk file as needed. nonpaged pool can never be paged out to a disk file.
	
- device nodes and device stacks

	+ some components represent software components 
	+ some are devices 
	
	the PCI Bus node represents the physical PCI bus on the motherboard
	
	+ A device object is an instance of a DEVICE_OBJECT structure. Each device node in the PnP device tree has an ordered list of device objects
	
	+ How does a device stack get constructed? 
	
		* the PnP manager asks the driver for each bus to enumerate child devices that are connected to the bus. For example, the PnP manager asks the PCI bus driver (Pci.sys) to enumerate the devices that are connected to the PCI bus. 

		these device objects is called a physical device object (PDO).

		* The device stack must have one (and only one) function driver and can optionally have one or more filter drivers

		* As each function and filter driver is loaded, it creates a device object and attaches itself to the device stack.
		
		A device object created by the function driver is called a functional device object (FDO)

		a device object created by a filter driver is called a filter device object (Filter DO).

		*  A filter driver that is above the function driver in a device stack is called an upper filter driver. 
		
		A filter driver that is below the function driver is called a lower filter driver.

		The PDO is always the bottom device object in a device stack. 

		* When the drivers for a device are installed, the installer uses information in an information (INF) file to determine which driver is the function driver and which drivers are filters. 
		
	+  bus driver 
	
	Pci.sys is associated with the FDO in the PCI Bus device node. 
	
	it created the FDO in the PCI Bus device node. Pci.sys is associated with the PDO in each child of the PCI Bus node. 
	
	it created the PDOs for the child devices. The driver that creates the PDO for a device node is called the bus driver for the node.
	
	
	
	Proseware driver stack 				Some PCI device
	[Filter DO]	- AfterTought.sys 		[FDO] Some function driver 
	[FDO] - Proseware.sys 				[Filter DO]
	[PDO] - Pci.sys 					[PDO] - Pci.sys 
	  +-----------------+-----------------+
						|
						PCI Bus 
						[FDO] - Pci.sys 
						[PDO] - Acpi.sys 
						+-----------+--------....
									|
									Root 
						
	
	+ user mode device stacks 
	
	a device has a user-mode device stack in addition to its kernel-mode device stack. 
	
	User-mode drivers are often based on the User-Mode Driver Framework (UMDF), which is one of the driver models provided by the Windows Driver Frameworks (WDF). 
	
	In UMDF, the drivers are user-mode DLLs, and the device objects are COM objects that implement the IWDFDevice interface. 
	
	A device object in a UMDF device stack is called a WDF device object (WDF DO).
	
	diagram, the user-mode device stack for a USB-FX-2 device. The drivers in both the user-mode and kernel-mode stacks participate in I/O requests :
	```
	[WDF DO] - WingtipUmdf2.dll 
	[WDF DO] - WingtipUmdf.dll 	User Mode
	--------------------------------------
	USB-FX-2					kernel Mode
	[FDO] - WUDFRd.sys 
	[Filter DO] - WinUsb.sys 
	[PDO] - Usbhub.sys 

	```
- i/o request packets
- driver stacks 
- minidrivers and driver pairs 
- header files in the windows driver kits 
- writing drivers for different versions of windows 

## GNSS drivers 

## GPIO drivers 

## Hardware notifications 

## HID Drivers 

## IEEE Drivers 

## Imaging devices drivers 

## Kernel-mode driver technology 

## Mobile broadband 

## Multifunction device drivers 

## NetAdapterCx 

## Network drivers 

## NFC device drivers 

## Parallel port drivers 

## Partner application development 

## PCI drivers 

## PCMCIA drivers 

## Point of service device drivers 

## Power maanagement technologies 

## Print device drivers 

## SD card bus drivers 

## Sensor drivers 

## Serial port drivers 

## Smartcard device drivers 

## SPB drivers 

## Storage device drivers 

## Storage firmware update (SFU)

## Streaming media device drivers 

## Test authoring and execution framework 



## Universal Serial Bus (USB)
- Microsoft-provided USB drivers 
	+ Usbccgp.sys, Usb.inf, a parent driver for composite devices that supports multiple functions
	
	+ Biometric WudfUsbBID.dll, WudfUsbBIDAdvanced.inf, Microsoft supports USB biometric devices 
	+ Wpdusb.sys (obsolete), media transfer protocol devices 
	+ Winusb.sys, Winusb.inf, usb device's function driver 
	
- USB device class drivers included in windows 
	+ 
	...
	
	
## Windows Device Testing Framework, WDTF 

## Windows Hardware Error Architecture, WHEA 

## Windows portable device drivers 


# Windows driver API reference 
- reference 
https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/

# Windows driver samples 
- reference 
https://docs.microsoft.com/en-us/windows-hardware/drivers/samples/