Docker and Kubernetes, the big picture=Nigel;Note=Erxin

# Introduction 
- container consume less resource compare to virtual machine 

- download a image of the container  
- use the container run the image 
$ docker image ls 
$ docker conatiner run -d --name web -p 8080:8080 ...
$ docker stop web 


# Docker 
- community edition 
- enterprise edition 
- containerize an app 

$ cd <app-folder>
$ docker image build -t ...
$ docker image push ... //publish to docker host 
$ docker container run -d --name ....


# Kubernetes 
- it is come out of google 
- on all good cloud platforms on-premises 
- scheduling, scaling, healing, updating 
- kubernetes host many node 
which node can run a container runtime such as docker 
the kubernetes agent will run with the container and connect to the k8s control plane 
- kubernetes will decide which node to run th e images 
- kubernetes will watch the node and scale the application, automatic deploy the applications 
- node fail, self-healing 
- k8s based architecture can shift to any cloud infrastructure 


# Suitable workloads 
- state & legacy apps 


# Enterprise and production readiness 
- docker 
    + CE, community edition 

quick release cycle 
edge channel, fun/scary stuff 
half year patches 

    + enterprise edition, EE 
costs money
official support 
free patches for years 
cautious release cycle 
stability 
each release get 24 months support 
extras 
enterprise web ui 
secruity features 
ad/ldap 
private registry 

- kubernetes

    + on premises 
    build your own 

    + cloud
    hosted canned options 
    AWS EKS 
    Azure AKS 
    Google GKE 
    
    + features stage 
    alpha > beta > GA > 
    
    + supported by 
    google, ibm, microsoft etc. 



# A word on orchestration 
- orchestration analogy 

- docker sworms, kubernetes