Test Automation Engineering Handbook=Manikandan;Note=Erxin

# Basic
- deliverables 
test summary 
tst environment 
test metrics 
test cases 
test plan 
test strategy 
automated test 
automated test framework 
test data 

- test metrics 

effectiveness = found defects / total number of defects found 

coverage = automated / total cases 

stability 

success or failure rate 

automation success rate 

manual test effort = effort to test a specific feature * number of times a feature is tested in a cycle 

execution time 

- engineers

    + Test automation engines

Test planning and test strategy development for testing product features (both manual and automated)
Preparation of test cases and test data
Setting up the test environment (usually with help from other engineers)
Create, execute, and maintain automated tests for the product features
Uses the existing test automation infrastructure to build a sound test automation strategy
Collaborate with product and implementation teams to achieve good test coverage
Reporting and retesting of bugs
Coordinating bug fixes across teams if necessary
Streamline test processes

    + Software Development Engineer in Test (SDET)
    
Test planning and test strategy development for testing product features (both manual and automated)
Preparation of test cases and test data
Setting up the test environment (usually with help from other engineers)
Create, execute, and maintain automated tests for the product features
Uses the existing test automation infrastructure to build a sound test automation strategy
Collaborate with product and implementation teams to achieve good test coverage
Reporting and retesting of bugs
Coordinating bug fixes across teams if necessary
Streamline test processes

- common terminologies and definitions 

A/B testing: Testing to compare two versions
Acceptance testing: A testing technique to establish whether a feature/product meets the acceptance criteria of business users or end users
Agile methodology: This is an iterative approach to software development that puts collaboration and communication at the forefront
Behavior-Driven Development (BDD): BDD is a common Agile practice where critical business scenarios are first documented
Black-box testing: This testing technique focuses on the output of a product, ignoring the design
Data-driven testing: A common automated testing approach where a reusable logic, often part of a test script
End-to-end testing: A testing technique to ensure that the integrated components of a product work as expected
Exploratory testing: A manual testing approach where the product is tested in an investigative and inquisitive manner without documented steps
Integration testing: A testing technique in which the communication logic of the individual software components or services are combined
Load testing: A type of testing to evaluate the performance of a software application by simulating the real-world traffic on the system. 
Penetration testing: This is a type of security testing where a tester attempts to find and exploit the vulnerabilities
Security testing: A testing type to ensure that all the required defenses are in place against various types of cyber threats.
Stress testing: This is a type of performance testing where the system is subject to heavy loads with the intention of breaking it
API testing: This is a testing type focused on verifying the API’s logic, build, and structure. 
Smoke testing: A testing technique that is primarily used to check the core features of a product when there is a change introduced or before releasing
System testing: A testing type used to evaluate the software system as a whole to make sure the integration of all the components is working
Test case: This is a collection of steps, data, and expected results to test a piece of code or a functional component 
Test plan: This is a document that outlines a methodical approach to testing a software application. 
Test-Driven Development (TDD): This is an approach mainly used in the Agile world where a test is written first followed by just enough code to fulfill the test.
Test suite/test automation suite: A collection of automated test scripts and associated dependencies used to run against the software application
Unit testing: A type of testing in which the logic of the smallest components or objects of software is tested
Usability testing: This is a testing technique used to evaluate a product (usually, a web application) with the aim of assessing the difficulties in using the product.
Validation: This is the process of ensuring the input and output parameters of a product.
Verification: This is the process of checking whether the product fulfills the specified requirements.
Waterfall model: This is a project management methodology in which the software development life cycle is divided into multiple phases
White-box testing: A testing technique to validate the features of a product through low-level design and implementation.



# Test automation strategy 
- common objectives 

Strengthening product quality: This is a chief trigger for test automation projects.
Improving test coverage: This is a key motivation for several test automation undertakings. 
Reducing manual testing: Needless to say, reducing manual testing is a primary objective for most
Minimizing maintenance and increasing portability of tests: This can be an incredibly good reason for kicking off a test automation initiative. 
Enhancing the stability of a software product
Reducing quality costs: This can help the management invest their resources and funds to further the capabilities of the organization.

initial phase when the framework is being built and when they can start seeing the return on investment (ROI). 

- defining the scope of test automation 

Number of business-critical flows
The complexity of test cases
Types of testing to be performed on the application
The skill set of test automation engineers
Reusability of components within the application
Time constraints for product delivery
Test environment availability/maturity

- test environments are presented here:

Development
Testing
Staging
Production

staging environment is usually used for end-to-end (E2E) testing and user acceptance testing (UAT). This can be both manual and automated.

- a list of Agile principles for consideration in test automation strategy:

Gain customer satisfaction through steady delivery of useful software
Embrace changing requirements to provide a competitive advantage to end users
Deliver working software frequently
Constant collaboration between business and engineering teams
Motivate individuals and trust them to get the job done
Prefer face-to-face conversation over documentation
Working software as a primary measure of progress
Promote a continuous and sustainable pace of development indefinitely
Continuous attention to technical excellence and superior design
Keep things simple
Each team is self-organized in its design, architecture, and requirements
Continuous retrospection and improvements

- test pyramid 

System tests 
V 
End-to-end test 
V 
User interface tests 
V 
API tests 
V 
Interface tests 
V 
Unit tests 
Component tests 

- test automation are noted here:

Page Object Model (POM)   selenium 
The factories pattern
Business layer pattern



# Common tools and frameworks 
- cli 
- working with vim 
- git 
- common test framework 

ReactJS frontend 
REST API backend 

selenium 
WebDriver 
Grid 
IDE 
Appium mobile 
Components of Appium 
High-level architecture 
Cypress, Cypress is an open source tool written in JavaScript and is primarily used for web automation testing. The main difference between Cypress and Selenium is that Cypress works directly on the browser, whereas Selenium interacts via drivers
JMeter 
Axe is lightweight browser-based accesibility testing tool 



# Practical affaires 
- Getting started with the basics 
- git --amend: This flag helps modify the most recent commit in the local repository instead of creating a new commit. 


# Test automation for web 
- Some notable tools include Protractor, Cypress, and WebdriverIO. The development of these tools with all their innovative capabilities is strong evidence of the evolution in the quality engineering space, primarily to address modern web automation demands

- Intercepting API calls
Cypress 


# Test automation for mobile 
- technical requirements 
- WebDriver appium 



# Test automation for APIs 
- API architectures—namely, REST, RPC, and SOAP. Each one of them has its pros and cons. Diving deep into the types of APIs and their architectures
- some of the notable ones being Postman, SoapUI, Apigee, Assertible, and so on. 

- Static data references must be eliminated wherever possible

- Testing GraphQL versus REST APIs 



# Test automation for performance 
- The HTTP(S) Test Script Recorder is a component that records requests from the browser.
- Groovy’s official documentation can be found at https://groovy-lang.org/documentation.html. Since the Groovy engine is part of JMeter
- performance testing 
distributed load testing 
managing resurce requirements 
performance testing metrics 
gradual performance degradation 
performance test environment 
constant feedback loop 



# Continue learning 
CI/CD t

# Common pitfalls 