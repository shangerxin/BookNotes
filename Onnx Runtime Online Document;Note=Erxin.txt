Onnx Runtime Online Document;Note=Erxin


# reference 
https://www.onnxruntime.ai/docs/
https://www.onnxruntime.ai/docs/get-started/


# Get started 
- why onnx 

improve performance for variety of ML models 
reduce time and cost of training large models 
train in python but deploy into a c#/c++/java app 
run on different hardware and operating systems 
train and perform inference with models created in different frameworks 

    + runtime inference, stable and production-ready
    + runtime training, introduced in may 2020 in preview, to support accelerate pytorch on nvidia gpus 
- install 

python, https://pypi.org/project/onnxruntime-gpu/

- road map, accelerators 

https://github.com/microsoft/onnxruntime/blob/master/docs/Roadmap.md#accelerators-and-execution-providers

Deep Neural Networks (Intel® DNNL) is an open-source performance library for deep-learning applications

CUDA, The CUDA Execution Provider enables hardware accelerated computation on Nvidia CUDA-enabled GPUs.

TensorRT, execution provider in the ONNX Runtime makes use of NVIDIA’s TensorRT Deep Learning inferencing engine to accelerate ONNX model in their family of GPUs.

OpenVINO, OpenVINO Execution Provider enables deep learning inference on Intel CPUs

DirectML is a high-performance, hardware-accelerated DirectX 12 library for machine learning on Windows

NNAPI is a unified interface to CPU, GPU, and NN accelerators on Android.

MIGraphX execution provider uses AMD’s Deep Learning graph optimization engine to accelerate ONNX model on AMD GPUs.

ArmNN 

AMD MI GraphX 

ARM Compute Library ACL 

- inference 

client samples, https://github.com/microsoft/onnxruntime/tree/master/samples
cpp 
ios 
python
nodejs 
swift 

Windows 10 devices (1809+), ONNX Runtime is available by default as part of the OS
https://docs.microsoft.com/en-us/windows/ai/windows-ml/

- training 

    + pytorch model with onnx runtime, python API for pytorch called ORTTrainer 
    
```
import torch
...
import onnxruntime
from onnxruntime.training import ORTTrainer, optim

# Model definition
class NeuralNet(torch.nn.Module):
  def __init__(self, input_size, hidden_size, num_classes):
    ...
  def forward(self, data):
    ...

model = NeuralNet(input_size=784, hidden_size=500, num_classes=10)
criterion = torch.nn.Functional.cross_entropy 
model_description = {'inputs':  [('data', ['in', 'batch_size']),
                                 ('target', ['label_x_batch_size'])],
                     'outputs': [('loss', [], True),
                                 ('output', ['out', 'batch_size'])]}

optimizer_config = optim.AdamConfig(lr=learning_rate)

trainer = ORTTrainer(model,              # model
                     model_description,  # model description
                     optimizer_config,   # optimizer configuration
                     criterion)          # loss function

# Training Loop
for t in range(1000):
  # forward + backward + weight update
  loss, y_pred = trainer.train_step(input_data, target_labels, learning_rate)
  total_loss += loss.item()
```


# Gallery of examples 
- onnxruntime navigation

https://www.onnxruntime.ai/python/auto_examples/

- tutorial
- API summary 
- gallery of examples 


# Tutorials 
- samples catalog 
https://www.onnxruntime.ai/docs/tutorials/samples_catalog.html

have all languages 

one of the python example 
https://github.com/onnx/tutorials/blob/master/tutorials/OnnxRuntimeServerSSDModel.ipynb

convert yolo model to onnx, score with onnx runtime and deploy in azure 
https://github.com/onnx/tutorials#services

yolo realtime object detectoin using onnx on azureml 
https://github.com/Azure/MachineLearningNotebooks/blob/master/how-to-use-azureml/deployment/onnx/onnx-convert-aml-deploy-tinyyolo.ipynb

convert pytorch model to tensorflow using onnx 
https://github.com/onnx/tutorials/blob/master/tutorials/PytorchTensorflowMnist.ipynb

importing onnx models to tensorflow 
https://github.com/onnx/tutorials/blob/master/tutorials/OnnxTensorflowImport.ipynb

donkey car 
https://docs.donkeycar.com/

- image recognition with ResNet50v2 in c# 
https://www.onnxruntime.ai/docs/tutorials/resnet50_csharp.html


# parscal VOC dataset mirror 
https://pjreddie.com/projects/pascal-voc-dataset-mirror/
- popular dataset for building and evaluating algorithms for impage classification, object detection and segmentation 

http://host.robots.ox.ac.uk/pascal/VOC/index.html



# darknet, yolo 
https://github.com/pjreddie/darknet





























