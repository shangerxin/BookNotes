Microsoft online document, Projects and build systems=Erxin

# Introduction 
- basic cpp compile steps 
    1. transforms all the #directives and macro definitions in each source file. to create translate unit 
    
    2. compiler compiles each translation unit into object files (.obj) and applying compiler options 
    
    3. linker merges the objects files into a single executable 
    
- the MSVC toolset 

$ cl /EHsc hello.cpp

MSVC compiler (cl.exe)

- build systems and projects 

multiple configurations (debug vs. release), multiple platforms (x86, x64, ARM, and so on)

various options for VS projects 

    + create a Visual Studio project by using the Visual Studio ID
    
    + open a foler contain CMakeList.txt 
    
    + open a loose folder of sources, it is good for small console app and compile with command line 
    
    + a folder contain a makefile 
    
    + open a windows makefile in VS, NMAKE reference 
    https://docs.microsoft.com/en-us/cpp/build/reference/nmake-reference?view=msvc-160




# Visual studio projects

# Open folder projects for c++ 

# CMake projects 

# C++ build insights 

# Build and import header units 

# Precompiled header files 

# C++ release builds 

# Use the msvc toolset from the command line 

# Walkthrought, create and use a static library (C++)

# Building c++ dlls in VS 

# Building c/c++ isolated applicationsa nd side-by-side assemblies 

# Configure MSVC for 64-bit, x64 targets 

# Configure C++ projects for ARM processors 

# Configure programs for windows xp 

# Code analysis for c/c++ 

# code statizers for c/c++ 

# Compiler and build tools reference 

# Build tool references 
https://docs.microsoft.com/en-us/cpp/build/reference/c-cpp-building-reference?view=msvc-160