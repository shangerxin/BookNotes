C# 8.0 what's new;Note=Erxin


# reference 
- information 
https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8

it is supported on .net core 3.x and .net standard 2.1 

- c# lanauge version

https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version



# Readonly members 
- apply the readonly modifier to members of a struct. It indicates that the member doesn't modify state.  

//the compiler will treat all auto-implemented getters as readonly, so here there's no need to add the readonly modifier to the X and Y properties


public struct Point
{
    public double X { get; set; }
    public double Y { get; set; }
    public readonly double Distance => Math.Sqrt(X * X + Y * Y);

    public override string ToString() =>
        $"({X}, {Y}) is {Distance} from the origin";
}

public readonly override string ToString() =>
    $"({X}, {Y}) is {Distance} from the origin";



# Default interface methods 
- You can now add members to interfaces and provide an implementation for those members. 



# Pattern matching enhancements 
- Pattern matching gives tools to provide shape-dependent functionality across related but different kinds of data.

    + switch expression 

public static RGBColor FromRainbow(Rainbow colorBand) =>
    colorBand switch
    {
        Rainbow.Red    => new RGBColor(0xFF, 0x00, 0x00),
        Rainbow.Orange => new RGBColor(0xFF, 0x7F, 0x00),
        Rainbow.Yellow => new RGBColor(0xFF, 0xFF, 0x00),
        Rainbow.Green  => new RGBColor(0x00, 0xFF, 0x00),
        Rainbow.Blue   => new RGBColor(0x00, 0x00, 0xFF),
        Rainbow.Indigo => new RGBColor(0x4B, 0x00, 0x82),
        Rainbow.Violet => new RGBColor(0x94, 0x00, 0xD3),
        _              => throw new ArgumentException(message: "invalid enum value", paramName: nameof(colorBand)),
    };
    

    The variable comes before the switch keyword. The different order makes it visually easy to distinguish the switch expression from the switch statement.
    The case and : elements are replaced with =>. It's more concise and intuitive.
    The default case is replaced with a _ discard.
    The bodies are expressions, not statements.

    + property patterns, match on properties of the object examined
    
public static decimal ComputeSalesTax(Address location, decimal salePrice) =>
    location switch
    {
        { State: "WA" } => salePrice * 0.06M,
        { State: "MN" } => salePrice * 0.075M,
        { State: "MI" } => salePrice * 0.05M,
        // other cases removed for brevity...
        _ => 0M
    };

    + tuple patterns 
    
public static string RockPaperScissors(string first, string second)
    => (first, second) switch
    {
        ("rock", "paper") => "rock is covered by paper. Paper wins.",
        ("rock", "scissors") => "rock breaks scissors. Rock wins.",
        ("paper", "rock") => "paper covers rock. Paper wins.",
        ("paper", "scissors") => "paper is cut by scissors. Scissors wins.",
        ("scissors", "rock") => "scissors is broken by rock. Rock wins.",
        ("scissors", "paper") => "scissors cuts paper. Scissors wins.",
        (_, _) => "tie"
    };
    
    + positional patterns 
    
    static Quadrant GetQuadrant(Point point) => point switch
    {
        (0, 0) => Quadrant.Origin,
        var (x, y) when x > 0 && y > 0 => Quadrant.One,
        var (x, y) when x < 0 && y > 0 => Quadrant.Two,
        var (x, y) when x < 0 && y < 0 => Quadrant.Three,
        var (x, y) when x > 0 && y < 0 => Quadrant.Four,
        var (_, _) => Quadrant.OnBorder,
        _ => Quadrant.Unknown
    };
    
    


# Using declarations 
- A using declaration is a variable declaration preceded by the using keyword. It tells the compiler that the variable being declared should be disposed at the end of the enclosing scope

static int WriteLinesToFile(IEnumerable<string> lines)
{
    using (var file = new System.IO.StreamWriter("WriteLines2.txt"))
    {
        int skippedLines = 0;
        foreach (string line in lines)
        {
            if (!line.Contains("Second"))
            {
                file.WriteLine(line);
            }
            else
            {
                skippedLines++;
            }
        }
        return skippedLines;
    } // file is disposed here
}




# Static local functions 
- add static modifier to local functions to ensure that local function doesn't capture any variables from the enclosing scope 

int M()
{
    int y = 5;
    int x = 7;
    return Add(x, y);

    static int Add(int left, int right) => left + right;
}



# Disposable ref structs
- A struct declared with the ref modifier may not implement any interfaces and so can't implement IDisposable. Therefore, to enable a ref struct to be disposed, it must have an accessible void Dispose() method



# Nullable reference types 
- nonnullable reference type. If you want to indicate that a variable may be null, you must append the type name with the ? to declare the variable as a nullable reference type.

https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references




# Asyunchronous streams 
- in c# 8.0 asynchronous stream has three properties:

It's declared with the async modifier.
It returns an IAsyncEnumerable<T>.
The method contains yield return statements to return successive elements in the asynchronous stream.

Consuming an asynchronous stream requires you to add the await keyword before the foreach keyword when you enumerate the elements of the stream.

public static async System.Collections.Generic.IAsyncEnumerable<int> GenerateSequence()
{
    for (int i = 0; i < 20; i++)
    {
        await Task.Delay(100);
        yield return i;
    }
}

await foreach (var number in GenerateSequence())
{
    Console.WriteLine(number);
}




# ASynchronous disposable 
- supports asynchronous disposable types that implement the System.IAsyncDisposable interface. You use the await using statement to work with an asynchronously disposable object.

https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-disposeasync




# Indices and ranges 
-  support relies on two new types, and two new operators:

    System.Index represents an index into a sequence.
    The index from end operator ^, which specifies that an index is relative to the end of the sequence.
    System.Range represents a sub range of a sequence.
    The range operator .., which specifies the start and end of a range as its operands.
    
[0..sequence.Length] represents the entire range. The ^0 index is the same as sequence[sequence.Length]. Note that sequence[^0] does throw an exception, just as sequence[sequence.Length] does.

char[] vowels = new char[] {'a','e','i','o','u'};
char lastElement  = vowels [^1];   // 'u'
char secondToLast = vowels [^2];   // 'o'

var words = new string[]
{
                // index from start    index from end
    "The",      // 0                   ^9
    "quick",    // 1                   ^8
    "brown",    // 2                   ^7
    "fox",      // 3                   ^6
    "jumped",   // 4                   ^5
    "over",     // 5                   ^4
    "the",      // 6                   ^3
    "lazy",     // 7                   ^2
    "dog"       // 8                   ^1
};              // 9 (or words.Length) ^0

Console.WriteLine($"The last word is {words[^1]}");
// writes "dog"

var allWords = words[..]; // contains "The" through "dog".
var firstPhrase = words[..4]; // contains "The" through "fox"
var lastPhrase = words[6..]; // contains "the", "lazy" and "dog"

https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/ranges-indexes#type-support-for-indices-and-ranges



# Null-coalescing assignment 
- C# 8.0 introduces the null-coalescing assignment operator ??=. You can use the ??= operator to assign the value of its right-hand operand to its left-hand operand only if the left-hand operand evaluates to null.

List<int> numbers = null;
int? i = null;

numbers ??= new List<int>();
numbers.Add(i ??= 17);
numbers.Add(i ??= 20);

Console.WriteLine(string.Join(" ", numbers));  // output: 17 17
Console.WriteLine(i);  // output: 17



# Unmanaged constructed types 
- Starting with C# 8.0, a constructed value type is unmanaged if it contains fields of unmanaged types only.

public struct Coords<T>
{
    public T X;
    public T Y;
}

Span<Coords<int>> coordinates = stackalloc[]
{
    new Coords<int> { X = 0, Y = 0 },
    new Coords<int> { X = 0, Y = 3 },
    new Coords<int> { X = 4, Y = 0 }
};

https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/unmanaged-types



# Stackalloc in nested expressions 
- you can use the stackalloc expression in other expressions:
Span<int> numbers = stackalloc[] { 1, 2, 3, 4, 5, 6 };
var ind = numbers.IndexOfAny(stackalloc[] { 2, 4, 6, 8 });
Console.WriteLine(ind);  // output: 1



# Enhancement of interpolated verbatim strings 
- Order of the $ and @ tokens in interpolated verbatim strings can be any: both $@"..." and @$"..." are valid interpolated verbatim strings. in earlier version $ token must appear before the @ token 



# .net versions 
- reference, https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version

Target framework 	version 	C# language version default
.NET 	            5.x 	    C# 9.0
.NET Core 	        3.x 	    C# 8.0
.NET Core 	        2.x 	    C# 7.3
.NET Standard 	    2.1 	    C# 8.0
.NET Standard 	    2.0 	    C# 7.3
.NET Standard 	    1.x 	    C# 7.3
.NET Framework 	    all 	    C# 7.3

