Conda and Anaconda document;Note=Erxin

# Reference 
https://docs.conda.io/en/latest/
https://anaconda.org/

# Introduction 
- environment management for any language—Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, FORTRAN
- install and upgrating 

$ conda install conda-build
$ conda update conda-build


# Concepts 
- package, anything you install using our package manager 
- conda package 

module 
information on how to install 

- what about channels 

$ conda index <path to channel> 



# Conda channels 
- channels 
configure .condar

- create a example package 

setup.py
conda/meta.yaml
example/

$ conda-build ./conda/ -c example

$ use the desire channel 
$ conda-build ./conda/ -c https://conda.anaconda.org/example/


# Conada build recipes 
- reference 
https://docs.conda.io/projects/conda-build/en/latest/concepts/recipe.html


# User guide 
- build conda packages 

    + window 
    $ conda install git m2-patch
    
- automatic test 

$ conda build --test <path to package>.tar.bz2

- building a SEP package with conda and python 2 or 3 

install visual studio, python 3 
$ conda skeleton pypi sep 

- edit the skeleton files 
$ package, bld.bat and build.sh need no changes

- building a GDAL package 
$ conda skeleton pypi click


- build different python version 
$ conda-build --python 2.7 click

- convert to other platoforms 
$ conda convert -f --platform all C:\Users\jsmith\miniconda\conda-bld\win-64\click-7.0-py37_0.tar.bz2
-o outputdir\

- upload package 
$ anaconda upload C:\Users\jsmith\miniconda\conda-bld\win-64\click-7.0-py37_0.tar.bz2


# Recepes 
- reference 
https://docs.conda.io/projects/conda-build/en/latest/user-guide/recipes/index.html


# Environment variables 
https://docs.conda.io/projects/conda-build/en/latest/user-guide/environment-variables.html


# Using wheel files with conda 
$ https://docs.conda.io/projects/conda-build/en/latest/user-guide/wheel-files.html


# Resources 
- reference 
https://docs.conda.io/projects/conda-build/en/latest/resources/index.html

- build scripts 
- conda compiler tools 
- meta data 
- pre-link, post-link and pre-unlink 
- activate scripts 
- making packages relocatable 
- conda pacakge specification 
- using shared libraries 
- build  variables 
- conda build cli refenrece 
- adding windows start menu item 
- writing style guide 
- tutorial template 

# Miniconda 
- Miniconda is a free minimal installer for conda. It is a small, bootstrap version of Anaconda that includes only conda, Python, the packages they depend on


# Anaconda document 
- reference 
https://docs.anaconda.com/

-  editions 
comercial 
team 
enterprise 
community, individual 

- updating from older versions 
$ conda update conda 
$ conda install anaconda=VersionNumber 

conda update anaconda=2019.1

$ conda update --all will unpin everything, updates all packages 

- update a specific environment 
$ conda update -n myenv --all

- navigator 
JupyterLab
Jupyter Notebook
Spyder
PyCharm
VSCode
Glueviz
Orange 3 App
RStudio
Anaconda Prompt (Windows only)
Anaconda PowerShell (Windows only)

- tasks 
    + install package 
    $ conda install pk=version 
    $ conda install local-path 
    $ conda install local-tar 
    
    + switching between python 2 and python 3 

    create a environment and install python 2.7 
    $ conda create --name py2 python=2.7 
    
    $ conda create --name py3 python=3.5 


    active a environment 
    $ activate py2 
    
    $ conda activate py2 
    
    deactive 
    $ deactivate 
    $ conda deactivate 
    
    + configuring a shared package cache 
    $ conda info 
    
    + shared package cache setup 
    C:\Users\username\.condarc
    /home/username/.condarc
    
    + R with anaconda 
    https://docs.anaconda.com/anaconda/user-guide/tasks/using-r-language/
    
    + MRO, microsoft R open
    https://docs.anaconda.com/anaconda/user-guide/tasks/using-mro/
    
    + work with pycharm 

    configure interpreter for conda 
    Settings/Preferences dialog (⌘,), select Project: <project name> | Project Interpreter.
    
    we can also select interpreter for different projects 
    
    Select + to display the packages available
    
    Adding a repository to a project, This project uses the bottle package, conda-forge channel 
    https://github.com/conda-forge
    
    + using conda behind a company proxy 
    
    add proxy setting into the .condarc file 
    ```
    proxy_servers:
        http: http://username:password@corp.com:8080
        https: https://username:password@corp.com:8080
    ```

    + tensorflow 
    
    choose a environment 
    $ conda create -n tf tensorflow
    $ conda activate tf
    
    
    install tensorflow gpu 
    $ conda create -n tf-gpu tensorflow-gpu 
    $ conda activate tf-gpu 
    
    cuda version, On Windows and Linux only CUDA 10.0 is supported for the TensorFlow 2.0 release. Previous versions of TensorFlow
    
    python 2 
    
    nightly
    
    + Cloudera provides Apache Hadoop-based software, support and services, as well as training to business customers
    https://aws.amazon.com/marketplace/seller-profile?id=29f81979-a535-4f44-9e9f-6800807ad996
    
    + docker 
    reference 
    http://docs.docker.com/
    
    display a list of images 
    
    $ docker search continuumio 
    
    pull the image 
    $ docker pull continnumio/miniconda3 
    
    create a container using the image 
    $ docker run -t -i continuumio/miniconda3 /bin/bash 
    
    test the container 
    $ conda info 
    
    + IDEs
    
Eclipse and PyDev
IDLE
IntelliJ
Ninja IDE
Python Tools for Visual Studio (PTVS)
Python for Visual Studio Code
Spyder
Sublime Text
Microsoft Visual Studio Code (VS Code)
Wing IDE
    
    + channel and repositories 
    https://repo.anaconda.com/pkgs/main
    https://anaconda.org/anaconda-extras
    ...
    
    + GPU packages 
    https://www.anaconda.com/getting-started-with-gpu-computing-in-anaconda/
    
    a dependency on the cudatoolkit package
    
    hardware:
    Tesla P100 or V100
    Titan Xp or V
    GeForce 1080 or 1080 Ti
    Various recent Quadro models
    
    packages 
    tensorflow-gpu 
    pytorch 
    caffe-gpu, deep leanring library 
    chainer, deep learning library 
    cupy, gpu accelerated clone of numpy api
    xgboost, machine leanring library that implements gradient boosted decision trees 
    mxnet, machine learning library support by various industry parterns 
    numba, general purpose jit compiler for python functions, implement custom GPU algorithms in purely python syntax 

    + jupyter notebook extensions 
    $ conda install nb_conda 
    manage notebook extensions 
    https://docs.anaconda.com/anaconda/navigator/

    remove a extension 
    $ conda remove nb_conda 

    + running jupyter on a remote server 
    Replace <PORT> with your selected port number
    jupyter notebook --no-browser --port=<PORT>
    
    jupyter notebook --no-browser --port=8080

    access notbook from your remote machine 
    Replace <PORT> with the port number you selected in the above step
    Replace <REMOTE_USER> with the remote server username
    Replace <REMOTE_HOST> with your remote server address
    ssh -L 8080:localhost:<PORT> <REMOTE_USER>@<REMOTE_HOST>












    