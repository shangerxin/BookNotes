Domain-Driven Design=Addison;Note=Erxin

# Preface 
- design versus development process 

Development is iterative.

Developers and domain experts have a close relationship.


# Putting the domain model to work 
- utility of a model in domain driven design 
the model and the heart of the design shape each other 

the model is the backbone of a language used by all teams 

the model is distilled knowledge 

There are systematic ways of thinking that developers can employ to search for insight and produce effective models.

- crunching knowledge 

Binding the model and the implementation.

Cultivating a language based on the model

Developing a knowledge-rich model. the object had behavior and enforced rules 

Distilling the model.

Brainstorming and experimenting.

- document should complete code and speech 


# building blocks of a model driven design 
- navigation map of the mode driven design 

mdd -> |services 
        | entities -----------> |-------------------> | factories  
        |                       |repositories ------> |
        |                       | aggregates  ------> |
        |                       | 
        | value objects ------> |
        | layered architecture 
        | smart UI 

- isolating the domain 

    + layered architecture 
    
user interface 
---------------
application 
---------------
domain 
---------------
infrastructure 

    + Objects carry out responsibilities consistent with their layer and are more coupled to other objects in their layer
    
UI              application         domain               infrastructure
    
controller ->   service <---------->Account, Account <-> unit of work manager  <-> o-r mapper 

- a model expressed in software 

1. Imposing a traversal direction

2. Adding a qualifier, effectively reducing multiplicity

3. Eliminating nonessential associations

- entities, Many objects are not fundamentally defined by their attributes, but rather by a thread of continuity and identity， 

Entities (a.k.a. Reference Objects)

An object must be distinguished from other objects even though they might have the same attributes

each transaction is an ENTITY, which appears in at least two forms.


- design the identity operation, ID symbol is created and stored as an attribute of the ENTITY, it is designated immutable.

- value objects, many objects have no conceptual identity, these objects describe some characteristic of a thing 

Address is a VALUE OBJECT.

VALUE OBJECT as immutable. Don’t give it any identity and avoid the design complexities necessary

- Software design is a constant battle with complexity. 

Immutability of an attribute or an object can be declared in some languages

- a good service has three characteristics 
    + operation relates to a domain concept that is not a natural part of an entity or value object 
    + interface is defined in terms of other elements of the domain model 
    + the operation is stateless 
    
- partitioning services into layers 

Application {  funds transfer app service 
                digest input 
                send message to domain service 
                listens for confirmation 
                decides to send notification using infrastruture service }

Domain { funds transfer domain service 
         interacts with necessary account and ledger objects 
         supplies confirmation of result}

Infrastructure {Send notification service 
                sends emails, letters and other communications as directed by the application }
                
                
- Granualrity of the service, As previously discussed, fine-grained domain objects can contribute to knowledge leaks from the domain into the application layer, where the domain object’s behavior is coordinated. a service is the most natural way to express a domain concept 

- an individual class really does depend on a specific class in another package, and the local MODULE doesn’t seem to have a conceptual dependency on the other MODULE, then maybe a class should be moved

- Use packaging to separate the domain layer from other code. 

- four rules of thumb for mixing nonobject elements into a predominatly object oriented system 

Don’t fight the implementation paradigm. There’s always another way to think about a domain.

Lean on the ubiquitous language.

Don’t get hung up on UML. 

Be skeptical. Is the tool really pulling its weight? Just because you have some rules, that doesn’t necessarily mean you need the overhead of a rules engine



# Six, the life cycle of a domain object 
- The life cycle of a domain object

start -> {active} -> end
        A
        |
        V
        {database/file representation}
        
- factories provid encapsulation 

client <-> factory <-> product 

factory encapsulate all complex 

- when a constructor is all you need, the trade offs are 

the class is the type, it itsn't use polymorphically by implementing an interface 

the client cares about the implementation

all of the attributes of the object are available to the client 

the construction is not complicated 

the public constructor must follow the same rules as a factory 

- designing the interface 

each operation must be atomic 

the facotry will be coupled to its argument 

- where does invariant logic go? 

For each type of object that needs global access, create an object that can provide the illusion of an in-memory collection of all objects of that type. 

- query a repository 

abstract the type, a repository contains all instances of a specify type 

take advantage of the decoupling form the client 

leave transaction control to the client 

- working within your frameworks 



# Using the language an extended example 
- a class diagram representing a model of the shipping domain 

customer 
cargo 
handling event 
delivery specification 
delivery history 
location 
carrier movement 

customer repository 
cargo reppsitory 
location repository 
carrier movement repository 

- object creation, factories and constructors for cargo. 

pubic Cargo copyPrototype(String newTrackingID)

public Cargo newCargo(Cargo prototype, String newTrackingID)

- Adding a Handling Event requires inserting it into a Delivery History.



# Refactoring toward deeper insight 
- useful models comes down to three points 

sophisticated domain models 

involvement of the domain experts with developers interested in learning abou the domain 

sophisticated design skills to implement and to use effectively 

- make implicit concepts explicit 



# Breakthrough 
- a deeper model, drawing on the language used in the disccussions with experts and the scenarios 



# Making implicit concepts explicit 
- digging out concepts, Listen to the language the domain experts use. these are hints of a concept that might benefit the model 

terms 

correcting your word choice 

do the puzzle looks on their faces go away when you use a particular phrase 

- hearing a missing concept in the shipping model 

- contemplate contradictions 




# Supple design 
- pleasure to work with, inviting to change. A supple design.

ubiquitous language 
model-driven design 
intention revealing interfaces 
side-effect-free functions 
assertions 
closure of operations 
standalone classes 
conceptual contours 

-  ASSERTIONS cannot be coded directly in your programming language, write automated unit tests for them.

- When elements of a model or design are embedded in a monolithic construct, their functionality gets duplicated. The external interface doesn’t say everything a client might care about. Their meaning is hard to understand, because different concepts are mixed together.



# Declarative design 
- Specification interface by adding the three new operations


# Relating design patterns to the model 
- stragegy 

    + example 
    route-finding policies 
    
- composite 

shipment routes made of routes 

- prior art, The process of brainstorming for missing concepts and better models has a great capacity to absorb ideas from any source, combine them with local knowledge, and continue crunching to find answers to the current situation



# Maintaining model integrity 
- BOUNDING CONTEXTS and relating them, ranging from closely allied contexts with SHARED KERNELS to loosely coupled models

- a navigation map for model integrity patterns 

ubiquitous language -> bounded context -> context map -> {
    shared kernel 
    customer/supplier teams 
    conformist 
    open host service -> published language 
    separate ways 
    anticorruption layer 
}

- Institute a process of merging all code and other implementation artifacts frequently, with automated tests to flag fragmentation quickly. 

- context map 

{ models in context } <-translation map-> {models in another context}

- testing at the context boundaries 

- FACADE that facilitates and streamlines access to those features and hides the rest. The FACADE does not change the model of the underlying system. It should be written strictly in accordance with the other system’s model.

- adapter 

- Declare a BOUNDED CONTEXT to have no connection to the others at all, allowing developers to find simple, specialized solutions 

- a published language for chemistry 

- Use a well-documented shared language that can express the necessary domain information as a common medium of communication

1. Identify specific functionality of the legacy that could be added to one of the favored systems within a single iteration.
2. Identify additions that will be required in the ANTICORRUPTION LAYER.
3. Implement.
4. Deploy.


# Distillation 
- Apply top talent to the CORE DOMAIN, and recruit accordingly. Spend the effort in the CORE to find a deep model and develop a supple design
- Organization Chart Reabsorbs Its MECHANISM
- Elements in the model may partially serve the CORE DOMAIN and partially play supporting roles
- responsibility layers, 



# Large scale structure 
- evolving order 
- system metaphor 
- some useful characteristics to look for and preserve 

storytelling, the layers should communicate the basic realities or priorities of the domain 

conceptual dependency, the concepts in the upper layers should have meaning against the backdrop of the lower layers 

conceptual contours, the objects of different layers should have different rates of change or different sources of change 

potiential, the resources of the organization including its people the way those resourse are organized 

operation, operational objects to reference or even be composed of potential objects 

decision support, what action should be taken or what policy should be set? 

Policy. What are the rules and goals? Rules and goals are mostly passive, but constrain the behavior in other layers

- Create a distinct set of objects that can be used to describe and constrain the structure and behavior of the basic model.

- sematech CIM framework, manufactoring execution system (MES)




