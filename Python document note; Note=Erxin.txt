Python document note; Note=Erxin

# python 3.9.0
# tutorial 
## using the python interpreter 
- invoking 
- source code encoding 
```
# -*- coding: encoding -*-

# -*- coding: cp1252 -*-

#!/usr/bin/env python3
# -*- coding: cp1252 -*-
```
- control flows 

    + if
if expression:
    ...
elif expression:
    ...
else 
    ...
    
    + for 
    
```
>>> for w in words:
...     print(w, len(w))
...

```

    + range 
    
>>> for i in range(5):
...     print(i)

    + break, continue 
    
    + pass 
    
    + defining function 
>>> def fib(n):    # write Fibonacci series up to n
...     """Print a Fibonacci series up to n."""
...     a, b = 0, 1
...     while a < n:
...         print(a, end=' ')
...         a, b = b, a+b
...     print()
...

        * default argument 
        
    def ask_ok(prompt, retries=4):
        while True:
            ...
            
        * keyword argument 
        
    def parrot(voltage, state='a stiff'):
        ...
        
        * positional-only parameter
        
        Positional-only parameters are placed before a / 
        
        * keyword-only, indicating the parameters must be passed by keyword argument, place an * in the arguments list 
        
```
>>> def standard_arg(arg):
...     print(arg)
...
>>> def pos_only_arg(arg, /):
...     print(arg)
...
>>> def kwd_only_arg(*, arg):
...     print(arg)
...
>>> def combined_example(pos_only, /, standard, *, kwd_only):
...     print(pos_only, standard, kwd_only)

>>> standard_arg(2)
2

>>> standard_arg(arg=2)
2
```

        * arbitrary argument lists 
def write_multiple_items(file, separator, *args):
    file.write(separator.join(args))
    
        * unpacking argument list 
        
>>> list(range(*args))            # call with arguments unpacked from a list
[3, 4, 5]

        * lambda expression, They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function definition
        
        lambda a, b: a+b

        * document string 
        
        >>> def my_function():
        ...     """Do nothing, but document it."""

        * function annotations, stored in the __annotations__ attribute 
        
        >>> def f(ham: str, eggs: str = 'eggs') -> str:
        ...     print("Annotations:", f.__annotations__)
        ...     print("Arguments:", ham, eggs)
        ...     return ham + ' and ' + eggs
        ...
        >>> f('spam')
        Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}

- coding style, PEP 8 has emerged as the style guide that most projects adhere t


## data structures
- list as stacks 
- list as queue 
- list comprehensions 

>>> squares = []
>>> for x in range(10):
...     squares.append(x**2)

>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]

- del statement 

There is a way to remove an item from a list given its index instead of its value: the del statement. This differs from the pop() method which returns a value. 

- tuples and sequences 

>>> empty = ()
>>> singleton = 'hello',    # <-- note trailing comma
>>> len(empty)
0
>>> len(singleton)
1
>>> singleton
('hello',)

- Set objects also support mathematical operations like union, intersection, difference, and symmetric difference

>>> a = set('abracadabra')
>>> b = set('alacazam')
>>> a                                  # unique letters in a
{'a', 'r', 'b', 'c', 'd'}
>>> a - b                              # letters in a but not in b
{'r', 'd', 'b'}

- dictionaries, Performing list(d) on a dictionary returns a list of all the keys used in the dictionary

>>> tel = {'jack': 4098, 'sape': 4139}
>>> tel['guido'] = 4127
>>> tel
{'jack': 4098, 'sape': 4139, 'guido': 4127}
>>> tel['jack']
4098

- looping techniques 

>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
>>> for k, v in knights.items():
...     print(k, v)
...

- more on conditions, Sequence objects typically may be compared to other objects with the same sequence type.

If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively. If all items of two sequences compare equal, the sequences are considered equal


# Modules 
- a module, the module’s name (as a string) is available as the value of the global variable __name

- import module, a file called fibo.py in the current directory with the following contents

>>> import fibo 
This imports all names except those beginning with an underscore (_).

- A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement

- reload module, to test interactively, use importlib.reload(), e.g. import importlib; importlib.reload(modulename).
 
- module search path 

    + Python caches the compiled version of each module in the __pycache__ directory under the name module.version.pyc, where the version encodes the format of the compiled file


    + •You can use the -O or -OO switches on the Python command to reduce the size of a compiled module. The -O switch removes assert statements, the -OO switch removes both assert statements and __doc__ strings
    
    + To support a non-source (compiled only) distribution, the compiled module must be in the source directory, and there must not be a source module.

    + .pyc files is the speed with which they are loaded.

- standard modules 

sys, which is built into every Python interpreter. The variables sys.ps1 and sys.ps2 define the strings used as primary and secondary prompts

variable sys.path is a list of strings that determines the interpreter’s search path for modules

path taken from the environment variable PYTHONPATH

dir() does not list the names of built-in functions and variables. If you want a list of those, they are defined in the standard module builtins:

- packages

    + structure for your package 
    
sound/                          Top-level package
      __init__.py               Initialize the sound package
      formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...
              
    + In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable

    + This would mean that from sound.effects import * would import the three named submodules of the sound package
    
__all__ = ["echo", "surround", "reverse"]


- intro-package references
    + write relative imports, with the from module import name form of import statement. These imports use leading dots to indicate the current and parent packages involved in the relative import

from . import echo
from .. import formats
from ..filters import equalizer

    +  Since the name of the main module is always "__main__", modules intended for use as the main module of a Python application must always use absolute imports

    + Packages support one more special attribute, __path__. This is initialized to be a list containing the name of the directory holding the package’s __init__.py before the code in that file is executed



# Input and output 
- fancier output formatting 

>>> year = 2016
>>> event = 'Referendum'
>>> f'Results of the {year} {event}'
'Results of the 2016 Referendum'

    + str.format()
    
>>> yes_votes = 42_572_654
>>> no_votes = 43_132_495
>>> percentage = yes_votes / (yes_votes + no_votes)
>>> '{:-9} YES votes  {:2.2%}'.format(yes_votes, percentage)
' 42572654 YES votes  49.67%'1`

- formatted string literals 

>>> import math
>>> print(f'The value of pi is approximately {math.pi:.3f}.')
The value of pi is approximately 3.142.

>>> print('This {food} is {adjective}.'.format(
...       food='spam', adjective='absolutely horrible'))
This spam is absolutely horrible.

>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 8637678}
>>> print('Jack: {0[Jack]:d}; Sjoerd: {0[Sjoerd]:d}; '
...       'Dcab: {0[Dcab]:d}'.format(table))
Jack: 4098; Sjoerd: 4127; Dcab: 8637678

- manual string formatting with str.rjust, str.center

- old string formatting 
>>> import math
>>> print('The value of pi is approximately %5.3f.' % math.pi)
The value of pi is approximately 3.142.

- reading and writing files 

>>> with open('workfile') as f:
...     read_data = f.read()

>>> # We can check that the file has been automatically closed.
>>> f.closed
True

- save as json 

json.dump(x, f)



# Error and exceptions 
- syntax errors 
- exceptions, syntax ok, error when an attempt is made to execute it

    + Built-in exceptions, base class BaseException

    + handle exceptions 
    
>>> while True:
...     try:
...         x = int(input("Please enter a number: "))
...         break
...     except (RuntimeError, TypeError, NameError):
...         pass
...     except (RuntimeError, TypeError, NameError):
...         pass
...     except ValueError:
...         print("Oops!  That was no valid number.  Try again...")
...     else:
...         pass
...     finally:    
...         pass

    + Exceptions come in different types, and the type is printed as part of the message: the types in the example are ZeroDivisionError, NameError and TypeError

- raise exception 

>>> raise NameError('HiThere')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: HiThere

>>> try:
...     raise NameError('HiThere')
... except NameError:
...     print('An exception flew by!')
...     raise
...
An exception flew by!
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: HiThere

- exception chaining, raise statement allows an optional from which enables chaining exceptions

>>> def func():
...     raise IOError
...
>>> try:
...     func()
... except IOError as exc:
...     raise RuntimeError('Failed to open database') from exc
...

- user defined exception 

class Error(Exception):
    """Base class for exceptions in this module."""
    pass

class InputError(Error):
    """Exception raised for errors in the input.

    Attributes:
        expression -- input expression in which the error occurred
        message -- explanation of the error
    """

    def __init__(self, expression, message):
        self.expression = expression
        self.message = message

class TransitionError(Error):
    """Raised when an operation attempts a state transition that's not
    allowed.

    Attributes:
        previous -- state at beginning of transition
        next -- attempted new state
        message -- explanation of why the specific transition is not allowed
    """

    def __init__(self, previous, next, message):
        self.previous = previous
        self.next = next
        self.message = message

- clean up, finally statement 

An exception could occur during execution of an except or else clause. Again, the exception is re-raised after the finally clause has been executed.

try statement reaches a break, continue or return statement, the finally clause will execute just prior to the break, continue or return statement’s execution

If a finally clause includes a return statement, the returned value will be the one from the finally clause’s return statement, not the value from the try clause’s return statement

```
>>> def bool_return():
...     try:
...         return True
...     finally:
...         return False
...
>>> bool_return()
False
```

```
>>> def divide(x, y):
...     try:
...         result = x / y
...     except ZeroDivisionError:
...         print("division by zero!")
...     else:
...         print("result is", result)
...     finally:
...         print("executing finally clause")
...
>>> divide(2, 1)
result is 2.0
executing finally clause
>>> divide(2, 0)
division by zero!
executing finally clause
>>> divide("2", "1")
executing finally clause
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in divide
TypeError: unsupported operand type(s) for /: 'str' and 'str'
```

- predefined clean-up 

The with statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly

```
with open("myfile.txt") as f:
    for line in f:
        print(line, end="")
```


# Classes
- scopes and namespace 

Attributes may be read-only or writable. In the latter case, assignment to attributes is possible. Module attributes are writable: 

you can write modname.the_answer = 42. Writable attributes may also be deleted with the del statement

    + scope search sequences 
    
    the innermost scope, which is searched first, contains the local names
    the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names
    the next-to-last scope contains the current module’s global names
    the outermost scope (searched last) is the namespace containing built-in names

    + if no global or nonlocal statement is in effect – assignments to names always go into the innermost scope


    + example 
```
def scope_test():
    def do_local():
        spam = "local spam"

    def do_nonlocal():
        nonlocal spam
        spam = "nonlocal spam"

    def do_global():
        global spam
        spam = "global spam"

    spam = "test spam"
    do_local()
    print("After local assignment:", spam)
    do_nonlocal()
    print("After nonlocal assignment:", spam)
    do_global()
    print("After global assignment:", spam)

scope_test()
print("In global scope:", spam)
```

The nonlocal assignment changed scope_test’s binding of spam, and the global assignment changed the module-level binding.

- class objects 

    + class attribute and function 
    
class MyClass:
    """A simple example class"""
    i = 12345

    def f(self):
        return 'hello world'

MyClass.i and MyClass.f are valid attribute references

    + defines an __init__() method, class instantiation automatically invokes __init__() for the newly-created class instance
    
- instance objects,  do with instance objects? The only operations understood by instance objects are attribute references. data attributes and methods 

>>> class Complex:
...     def __init__(self, realpart, imagpart):
...         self.r = realpart
...         self.i = imagpart
...
>>> x = Complex(3.0, -4.5)
>>> x.r, x.i
(3.0, -4.5) 

```
class Dog:

    kind = 'canine'         # class variable shared by all instances

    def __init__(self, name):
        self.name = name    # instance variable unique to each instance

>>> d = Dog('Fido')
>>> e = Dog('Buddy')
>>> d.kind                  # shared by all dogs
'canine'
>>> e.kind                  # shared by all dogs
'canine'
>>> d.name                  # unique to d
'Fido'
>>> e.name                  # unique to e
'Buddy'
```

- metohd objects 

xf = x.f
while True:
    print(xf())

- Class and Instance Variables
class Dog:

    kind = 'canine'         # class variable shared by all instances

    def __init__(self, name):
        self.name = name    # instance variable unique to each instance

- random remarks 

The global scope associated with a method is the module containing its definition. (A class is never used as a global scope.) 

Each value is an object, and therefore has a class (also called its type). It is stored as object.__class__.

- Inheritance
















