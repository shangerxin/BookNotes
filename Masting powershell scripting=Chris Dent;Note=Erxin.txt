Masting powershell scripting=Chris Dent;Note=Erxin


# Introduction to powershell 
- get help 

$ Get-Help default | more

$ Get-Help * 
$ Get-Help -Category All 

$ Get-Help default -ShowWindow 

$ Get-Help Get-Command -Online

- Save-Help command can be used with modules that support updatable help. 
- The Update-Help command performs two tasks:

$ Update-Help -Name Microsoft.PowerShell.Management -Force -UICulture en-US

- About_* documents describe features of a language or concepts that apply to more than one command. 

$ Get-Help -Name About_*

$ Get-Help -Category HelpFile

- The list of verbs is maintained by Microsoft. Verbs are words such as Add, Get, Set, and New

- Commands in powershell are formed verb-noun 

- verbs, list 

$ Get-Verb

- Finding commands 

$ Get-Command Get-*Firewall*

- aliases 

$ Get-Alias 

- Parameters, values and parameter sets 

mandatory parameters 

optional parameters 

switch parameters 

parameter set, set of parameters that may be used together when running a command.

Common parameters are used to control some of the standardized functionality 

- Confirm and WhatIf can be used with commands that make changes to files

ConfirmPreference has four possible values:
High
Medium, prompts command impact is mediam
Low, prompts when command impact is low
None, never prompts 

ConfirmImpact uses the same four values.

```
Set-Location $env:TEMP
New-Item FileName.txt -Force
Remove-Item FileName.txt -Confirm
Remove-Item FileName.txt -Confirm:$false

#check default confirm preference
$ConfirmPreference
```

WhatIf is typically used when testing a command. If implemented correctly by a command author, 

The WhatIf parameter replaces the confirmation prompt with a simple statement 

- Force has no fixed usage; the effect of using Force is a choice a command author must make
- The PasThru parameter is typically used with commands that do not normally generate output, PassThru is used, it will return the process it created

$ Start-Process notepad -PassThru

- A provider in PowerShell is a specialized interface to a service or dataset that presents items to the end user 

all os following providers:

Alias: PowerShell aliases
Environment: Environment variables (for the process)
FileSystem: Files and folders
Function: Any functions in the session
Variable: Any variables in the session

window specific:
Registry: All loaded registry hives
Certificate: The LocalMachine and CurrentUser certificate stores
WSMan: Windows remoting configuration

check all 
$ Get-Help about_Providers

PowerShell session by running 
$ Get-PSProvider


$ Get-Help -Name about_Certificate_Provider
$ Get-Help -Name About_*_Provider 

The provider-specific help documents describe the additional parameters added to *-Item and *-ChildItem, as well as Test-Path, Get-Content, Set-Content, Add-Content, Get-Acl, Set-Acl, and so on.

shows how Get-ChildItem changes when exploring the Cert drive
```
PS C:\> Set-Location Cert:\LocalMachine\Root
PS Cert:\LocalMachine\Root> Get-ChildItem
```

A new drive named HKCC might be created for HKEY_CURRENT_CONFIG
$ New-PSDrive HKCC -PSProvider Registry -Root HKEY_CURRENT_CONFIG

- Splatting is a way of defining the parameters of a command before calling it.
```
$getProcess = @{
    Name = 'explorer'
}
Get-Process @getProcess
```

```
#avoid long lines 
$taskAction = New-ScheduledTaskAction `
    -Execute pwsh.exe `
    -Argument 'Write-Host "hello world"'
```

position parameters
```
$renameItem = 'oldname.txt', 'newname.txt'
Rename-Item @renameItem
```

- Experimental features 

Enable-ExperimentalFeature
Disable-ExperimentalFeature
Get-ExperimentalFeature



# Modules and snap-ins 
- built-in modules 
built-in modules, including PowerShellGet, ThreadJob, PSReadLine, and the commands in the Microsoft.PowerShell.* 

- By default, Get-Module returns information about each module that has been imported 

$ Get-Module 

list on the system 
$ Get-Module -ListAvailable

$ Get-Module <ModuleName> -All -ListAvailable 

- The import-module command 






# Working with objects in powershell 



# Operators 



# Variables, arrays and hashtables 


# Conditional statements and loops 


# Working with .net 


# String number and date 


# Regular expression 


# Files, folders, and the registry 


# Windows management intrumentation 


# Working with HTML, xml and json 


# Web requests and web services 


# Remoting and remote managment 


# Asynchronous processing 


# Graphical user interfaces 


# Scripts, functions and script blocks 


# Parameters, validation and dynamic parameters 


# Classes and enumerations 


# Building modules 


# Error handling 


# Debugging and troubleshooting 


#