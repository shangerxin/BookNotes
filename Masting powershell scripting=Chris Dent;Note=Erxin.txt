Masting powershell scripting=Chris Dent;Note=Erxin


# Introduction to powershell 
- get help 

$ Get-Help default | more

$ Get-Help * 
$ Get-Help -Category All 

$ Get-Help default -ShowWindow 

$ Get-Help Get-Command -Online

- Save-Help command can be used with modules that support updatable help. 
- The Update-Help command performs two tasks:

$ Update-Help -Name Microsoft.PowerShell.Management -Force -UICulture en-US

- About_* documents describe features of a language or concepts that apply to more than one command. 

$ Get-Help -Name About_*

$ Get-Help -Category HelpFile

- The list of verbs is maintained by Microsoft. Verbs are words such as Add, Get, Set, and New

- Commands in powershell are formed verb-noun 

- verbs, list 

$ Get-Verb

- Finding commands 

$ Get-Command Get-*Firewall*

- aliases 

$ Get-Alias 

- Parameters, values and parameter sets 

mandatory parameters 

optional parameters 

switch parameters 

parameter set, set of parameters that may be used together when running a command.

Common parameters are used to control some of the standardized functionality 

- Confirm and WhatIf can be used with commands that make changes to files

ConfirmPreference has four possible values:
High
Medium, prompts command impact is mediam
Low, prompts when command impact is low
None, never prompts 

ConfirmImpact uses the same four values.

```
Set-Location $env:TEMP
New-Item FileName.txt -Force
Remove-Item FileName.txt -Confirm
Remove-Item FileName.txt -Confirm:$false

#check default confirm preference
$ConfirmPreference
```

WhatIf is typically used when testing a command. If implemented correctly by a command author, 

The WhatIf parameter replaces the confirmation prompt with a simple statement 

- Force has no fixed usage; the effect of using Force is a choice a command author must make
- The PasThru parameter is typically used with commands that do not normally generate output, PassThru is used, it will return the process it created

$ Start-Process notepad -PassThru

- A provider in PowerShell is a specialized interface to a service or dataset that presents items to the end user 

all os following providers:

Alias: PowerShell aliases
Environment: Environment variables (for the process)
FileSystem: Files and folders
Function: Any functions in the session
Variable: Any variables in the session

window specific:
Registry: All loaded registry hives
Certificate: The LocalMachine and CurrentUser certificate stores
WSMan: Windows remoting configuration

check all 
$ Get-Help about_Providers

PowerShell session by running 
$ Get-PSProvider


$ Get-Help -Name about_Certificate_Provider
$ Get-Help -Name About_*_Provider 

The provider-specific help documents describe the additional parameters added to *-Item and *-ChildItem, as well as Test-Path, Get-Content, Set-Content, Add-Content, Get-Acl, Set-Acl, and so on.

shows how Get-ChildItem changes when exploring the Cert drive
```
PS C:\> Set-Location Cert:\LocalMachine\Root
PS Cert:\LocalMachine\Root> Get-ChildItem
```

A new drive named HKCC might be created for HKEY_CURRENT_CONFIG
$ New-PSDrive HKCC -PSProvider Registry -Root HKEY_CURRENT_CONFIG

- Splatting is a way of defining the parameters of a command before calling it.
```
$getProcess = @{
    Name = 'explorer'
}
Get-Process @getProcess
```

```
#avoid long lines 
$taskAction = New-ScheduledTaskAction `
    -Execute pwsh.exe `
    -Argument 'Write-Host "hello world"'
```

position parameters
```
$renameItem = 'oldname.txt', 'newname.txt'
Rename-Item @renameItem
```

- Experimental features 

Enable-ExperimentalFeature
Disable-ExperimentalFeature
Get-ExperimentalFeature



# Modules and snap-ins 
- built-in modules 
built-in modules, including PowerShellGet, ThreadJob, PSReadLine, and the commands in the Microsoft.PowerShell.* 

- By default, Get-Module returns information about each module that has been imported 

$ Get-Module 

list on the system 
$ Get-Module -ListAvailable

$ Get-Module <ModuleName> -All -ListAvailable 

- The import-module command 

Get-Module is used to find the modules either in the current PowerShell session

- import module 

the module is under one of the paths in the $env:PSModulePath environment variable. Explicit use of the Import-Module command

$ Import-Module -Name ThreadJob

powershell will automatic import module when a command is depend on it. 

The autoloader may be disabled using the $PSModuleAutoLoadingPreference variable as shown here:
$PSModuleAutoLoadingPreference = 'None'

- list the command in a mocule 

$ Get-Command -Module ModuleName 

default module location after Windows PowerShell 5 and later are placed in a folder named after the module version, for example, Modules\ModuleName\1.0.0\<ModuleContent>

- remove module 

The Remove-Module command removes a previously imported module from the current session.

- PSModulePath is a delimited list of paths that can be used to store modules. 

PS> Get-Module TLS -ListAvailable -SkipEditionCheck

- finding and installing modules 

PowerShell includes a module named PowerShellGet, which can be used to register repositories and search for and install modules

PowerShell Gallery may be searched using https://www.powershellgallery.com

$ Find-Module -Filter IIS
$ Install-Module posh-git 
$ Install-Module carbon -Scope CurrentUser
$ Update-Module command to update any module installed using the Install-Module
$ Save-Module -Name Carbon -Path C:\Modules 

- PowerShellGet 3.0 is in preview at the time of writing; the following commands are based on the beta7

$ Register-PSResourceRepository -PSGallery

$ Find-PSResource -Name Indented.Net.IP -Type Module

- repositories, the repository configuration file is found in the following path:

$env:LOCALAPPDATA\Microsoft\Windows\PowerShell\PowerShellGet\PSRepositories.xml

the Import-CliXml command. The file is normally read and updated using Get-PSRepository, Register-PSRepository, and Unregister-PSRespository.

- version ranges 

$ Find-PSResource -Name PowerShellGet -Version *

- Creating an SMB repository 

$params = @{
    Name               = 'Internal'
    SourceLocation     = '\\server\share\directory'
    InstallationPolicy = 'Trusted'
}
Register-PSRepository @params


$params = @{
    Name            = 'pester'
    RequiredVersion = '5.0.2'
    Repository      = 'Internal'
}
Publish-Module @params

- nuget repositories 

NuGet is a package manager for .NET. PowerShellGet can use a NuGet repository as a source for PowerShell modules. 

- Snap-ins, and the commands for interacting with snap-ins, are only available in Windows PowerShell, not in powershell 7 



# Working with objects in powershell 
- standard output, In PowerShell, the streams are Standard, Error, Warning, Verbose, Debug, and Information.







# Operators 



# Variables, arrays and hashtables 


# Conditional statements and loops 


# Working with .net 


# String number and date 


# Regular expression 


# Files, folders, and the registry 


# Windows management intrumentation 


# Working with HTML, xml and json 


# Web requests and web services 


# Remoting and remote managment 


# Asynchronous processing 


# Graphical user interfaces 


# Scripts, functions and script blocks 


# Parameters, validation and dynamic parameters 


# Classes and enumerations 


# Building modules 


# Error handling 


# Debugging and troubleshooting 


#