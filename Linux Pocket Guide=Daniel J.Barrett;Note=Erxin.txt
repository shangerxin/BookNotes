Linux Pocket Guide=Daniel J.Barrett;Note=Erxin

# What's in this book 
- it's a short guide 
    + example 
    count file lines 
    $ wc -l file-name 
    
    + mesure free disk space 
    $ df 
    
    cat for short text file 
    
    od for binary files 
    
    acro, read read for pdf files 
    
    less for long ones 
    
- what is linux 
- what is distro? different varieties of linux shared certain core components but may look different and include different program and files each variety is called a distro(short for distribution)

- shell, linux command line interface 
- reading this book 
- shell prompts 
- keystrokes, ^ means compress and hold control key 
- get help 
$ man command-name 
display help doc for a command 

$ man -k keyword 
$ search for document with key word 

    + use info command, which is a extended hypertext help system 
$ info command-name 
use shortcut 
h for help 
q to quit 
jump between hyperlinks with tab 
follow a hyperlink with enter 

- get help from gnome and kde help from http://www.gnome.org, http://www.kde.org 

- distro specific websites 

- linux help sites 
http://www.linuxquestions.org 
http://unix.stackexchange.com 
http://www.linuxhelp.net 
http://www.linuxforums.org 

- linux, a first view the major part 
    + the kernel, handle files, disks networking and other necessities we take for granted 
    + supplied programs, web browsing audio, video, ...
    + the shell, user interface for typing commands 
    + x, a graphic system which provides window, ..
    
- the graphical desktop 
a main menu or taskbar 
desktop icons 
ions to run app 

- run a shell, typical menu items are 
Terminal
xterm 
gnome-terminal 
konsole 
uxterm 

- to become a superuser with command su 
$ su -l 

use sudo command to execute a single command as super user 
$ sudo command-name 

# file system 
- linux all files and directories descend from the root 
/bin/ 
 etc/ 
 home/ 
      dan/
      lisa/
 var/
 usr/
     bin/
     lib/
     
- absolute and relative path 
- home directory ~
    + display home path 
    $ echo $HOME 
    
    $ echo ~
    
    + switch to a specify user's home directory 
    $ cd ~<user-name>
    
- system directory, there names often contain three parts, which we'll call the scope, category and application 

/usr/local/share/emacs 
scope: /usr/local 
category: share/ 
application: emacs 

    + categroy tell you the types of files found in a directory, common category, if the category is bin, it probably 
bin 
sbin, usually binary files intended to be run by the superuser 
lib 
libexec 

categories for documentation:
doc 
info,   documentation files for emacs's built-in help system 
man, documentaion display by the man program 
share, 

categories for configuration:
etc, configuration files for the system and other micellaneous stuff 
init.d, configuration files for booting linux 
rc.d, configuration files for booting linux also rc1.d, rc2.d, ...

categories for programming: 
include, header files for programming 
src, source code for programs 

categories for web files: 
cgi-bin, scripts/programs that run on web pages 
html, web pages 
public_html, web pages typically in user's home directories 
www, web pages 

categories for display: 
fonts, fonts surprise 
X11, X window system files 

categories for hardware: 
dev, device files for interfacing with disks and other hardware 
media, mount points directories that provide access to disks 
mnt, mount points directories that provide access to disks 
misc, mout points directories that provide access to disks 

categories for runtime files:
var, files specific to this computer, created and updated as the computer runs 
lock, lock files, created by program to say "i am running"
log, log files that track important system events, containing error, warning, and information messages 
mail, mailboxes for incoming mail 
run, PID files, which contain the IDs of running processes, these files are often consulted to track or kill particular process 
spool, files queued or in transit such as outgoing email, print jobs and scheduled jobs 
tmp, temporary storage for programs and/or people to use 
proc, operating system state 

    + directory path scope 
/, system files supplied linux 
/usr, more system files supplied with linux 
/usr/games,
/usr/local, system files developed "locally" either for your organization or your individual computer 
/usr/X11R6, files pertaining to the X window system 

    + directory path application 
    + operating system directories 
/boot 
/lost+found, damaged files that were rescured by a disk recovery tool 
/proc, describes currently running processes for advanced users, provied views into the running kernel and have special properties. they always be zero sized read-only and dated now. they magically contain information about the linux kernel 
$ cat /proc/version 
will display linux version 
/proc/ioports, list of input/output hardware 
/proc/version, uname command prints the same information, system version 
/proc/uptime, seconds elapsed since the last boot 
/proc/nnn, the nnn is a positive integer, information about the linux process with ID nnn 
/proc/self, information about the current proces you're running 

- file protection 
    + see ownership and permissions of a file 
    $ ls -l <file-name> 
    -rw-r--r-- 1 smith smith   7384 Jan 04 22:40 file-name 
    
    + ownership of directory 
    $ ls -ld <dir-name>
    drwxr-x--- 3 smith smith   4096 Jan 08 15:02 dirname 
    
    the 10 leftmost characters a string of (r)ead, (w)rite, x(execute) and dashes 
    position    meaning 
    1           file type, -=file, d=directory, l=symbolic link, p=named pipe, c=character device, b=block device 
    2-4         read, write and execute permission for file's owner 
    5-7         read, write and execute permission for file's group user 
    8-10        read, write and execute permission for file's other user 
    

# the shell 
- check who's logged in 
$ who 

- shell versus programs, check a program is linux built-in or not by 
$ type <command-name>

$ type who 
who is /usr/bin/who 

$ type cd 
is a shell builtin 

- selected features of the bash shell 
- wildcards 
*, ?
[set]
[^set], not in 
[!set], not in 

- dot files, filenames start with a leading period, it will not be displayed by some program 

ls omit the file unless you provde the -a option 
shell wildcards do not match a leading period 

- brace expansion
{X, YY, ZZZ} 

$ echo sand{X, YY, ZZ}wich 
sandXwich sandYYwich sandZZZwich 

braces work with any string

- shell variables 
$ varName = 3 
$ echo $varName 

    + standard and commonly defined by your shell upon login 
DISPLAY, the name of your X window
HOME 
LOGNAME, login name 
MAIL, incomming mailbox such as /var/spool/mail/smith 
OLDPWD, shell's previous directory prior to the last cd command 
PATH, shell search path 
PWD, current working directory 
SHELL, the path to your shell 
TERM, the type of your terminal 
USER, your login name 

    + display environment variables 
    $ printenv 
    
    + expose a variable to other program 
    $ export varName 
    or 
    $ export varName=value 
    
- search path, critical variable PATH tells where to look 

- aliases, built-in command alias defines a convenient shorthand for a longer command 
$ alias ll='ls -l' 

define alias in your ~/.bashrc file 

- input/output redirectory >,>>,<,<<
$ command >& output
redirect both output and error 

$ command > outfile 2> error file 

- pipes 
$ command1|command2 

- combining commands
    + invoke several commands in sequence on a single command 
    $ command1; command2; 

    + run in sequence but stop on any error 
    $ command1 && command2 
    
    + run a sequence of commands and stopping execution as soon as one succeeds 
    $ command1 || command2
    
- quoting, normally shell treats whitespace simply as separating the words on the command line 
$ echo 'a b c' 
$ echo "a b c"

backquotes(backsticks) cause their contents to be evaluated 
$ echo my name is `whoami`

- escaping with \
$ echo a\* 
a* 

escape control characters(tabs, newlines, ^D and so on) ^V ^I 

- command line editing with emacs keys 
$ set -o emacs 
$ set -o vi 

- command history 
hostory, print history 
history, print most recent n commands 
history -c, clear 
!! re-run previous command 
!N re-run command number N in history 
!-N re-run command typed N commands ago 
!$ represents the last paramters from the previous commands 
    + example 
    $ ls a* 
    $ rm !$ 
!*represents all parameters from the previous command 

- filename completion, use TAB, two TAB will present alternative 

- shell job control 
jobs, list your jobs 
&, run a job in the background 
suspend, suspend a shell 
fg, unsuspend a job, bring it into the forground 
bg, make a suspend job run in the background 
% bg [%jobnumber]

all linux shell have job control, the abilityto run programs in the background and forground 
suspend, stop a forground job temporarily

- tailoring shell behavior 
edith .bash_profile and .bashrc in your home directory. this is two example scripts 

- basic file operation 
ls 
cp 
mv 
rm, delete files 
ln, create links to a file 

    + copy multiple files to a directory 
    $ cp file1 file2 destination 
    
    + ln -s file link-name
    s, soft link which like shortcut if the orignal file delete then the link become invalid 
    without -s will create hard link which will still point to the file 

    another difference is soft link could point to directory but hard link need administrator previliges to do it 
    
- diretory options 
cd 
pwd 
basename, print the final part of a path 
mkdir 
rmdir 
rm -r

- file viewing 
cat, view files in their entirety 
less 
head 
tail 
nl, view text files with their lines numbered 
strings, display text that's embedded in a binary file 
od, view data in octal 
xxd, view data in hexadecimal 
acroread, view pdf 
gv, view postscript or pdf files 
xdvi, view tex dvi files 

- file creation and editing 
emacs 
vim 
soffice, office suite for editing word, excel and power point 
abiword, edit word 
gnumic, edit excel 

- creating a file quickly 
$ touch file-name 

- default editor 
$ EDITOR = emacs 
set the environment variables 
$ VISUAL = emacs 
$ export EDITOR VISUAL 

$ nano [options] [files]





